// This file is auto-generated by @hey-api/openapi-ts

/**
 * Schema for attachment creation operations
 */
export type CreateAttachmentRequest = {
    name: string;
    contentType: string;
    contentLength: number;
    ''?: string;
};

export type CreateAttachmentResponseSuccess = {
    data: {
        id: string;
        type: string;
        attributes: {
            name: string;
            contentType: string;
            contentLength: number;
            uploaded: boolean;
            redacted: boolean;
        };
        relationships: {
            org: {
                data: {
                    id: string;
                    type: string;
                };
                links: {
                    self: string;
                };
            };
        };
        links: {
            self: string;
            related: string;
        };
    };
    meta: {
        upload: {
            url: string;
            fields: {
                key: string;
                acl: string;
                'Content-Type': string;
                'X-Amz-Meta-Attachment-Id': string;
                bucket: string;
                'X-Amz-Algorithm': string;
                'X-Amz-Credential': string;
                'X-Amz-Date': string;
                Policy: string;
                'X-Amz-Signature': string;
            };
        };
    };
};

/**
 * Schema for attachment update operations
 */
export type UpsertAttachmentRequest = {
    name?: string;
    redacted?: boolean;
    contentType?: string;
    contentLength?: number;
};

export type UpsertAttachmentResponseSuccess = {
    data: {
        id: string;
        type: string;
        attributes: {
            name: string;
            contentType: string;
            contentLength: number;
            uploaded: boolean;
            redacted: boolean;
        };
        relationships: {
            org: {
                data: {
                    id: string;
                    type: string;
                };
                links: {
                    self: string;
                };
            };
        };
        links: {
            self: string;
            related: string;
        };
    };
    meta: {
        upload: {
            url: string;
            fields: {
                key: string;
                acl: string;
                'Content-Type': string;
                'X-Amz-Meta-Attachment-Id': string;
                bucket: string;
                'X-Amz-Algorithm': string;
                'X-Amz-Credential': string;
                'X-Amz-Date': string;
                Policy: string;
                'X-Amz-Signature': string;
            };
        };
    };
};

export type GetAttachmentsbyIdOutboundOnlyResponseSuccess = {
    data: {
        id: string;
        type: string;
        attributes: {
            name: string;
            contentType: string;
            contentLength: number;
            uploaded: boolean;
            redacted: boolean;
        };
        relationships: {
            org: {
                data: {
                    id: string;
                    type: string;
                };
                links: {
                    self: string;
                };
            };
        };
        links: {
            self: string;
            related: string;
        };
    };
    meta: {
        upload: {
            url: string;
            fields: {
                key: string;
                acl: string;
                'Content-Type': string;
                'X-Amz-Meta-Attachment-Id': string;
                bucket: string;
                'X-Amz-Algorithm': string;
                'X-Amz-Credential': string;
                'X-Amz-Date': string;
                Policy: string;
                'X-Amz-Signature': string;
            };
        };
    };
};

export type GetConversationAttachmentsResponseSuccess = {
    data: Array<{
        id?: string;
        type?: string;
        attributes?: {
            name: string;
            contentType: string;
            contentLength: number;
            redacted: boolean;
        };
        relationships?: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            message: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links?: {
            self: string;
            related: string;
        };
    }>;
};

export type GetAttachmentbyMessageandAttachmentIdInboundorOutboundResponseGetAttachmentsbyMessageandAttachmentIdInboundorOutbound = {
    data: {
        id: string;
        type: string;
        attributes: {
            name: string;
            contentType: string;
            contentLength: number;
            redacted: boolean;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            message: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
            related: string;
        };
    };
};

export type GetBrandsResponseGetBrands = {
    meta: {
        pageSize: number;
        page: number;
    };
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            name: string;
            default: boolean;
            createdAt: string;
            updatedAt: string;
            modifiedAt?: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy?: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy?: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
};

export type GetDefaultBrandResponseGeTdefaultbrand = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            default: boolean;
            createdAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetBrandbyIdResponseGetBrandbyId = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            default: boolean;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type PostBrandsResponsePostBrands = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            iconUrl: string;
            default: boolean;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type PatchBrandResourceResponsePatchBrandresource = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            iconUrl: string;
            default: boolean;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetAllSchedulesResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            name: string;
            hours: {
                0: string | null;
                1: Array<Array<number>>;
                2: Array<Array<number>>;
                3: Array<Array<number>>;
                4: Array<Array<number>>;
                5: Array<Array<number>>;
                6: string | null;
            };
            timezone: string;
            default: boolean;
            createdAt: string;
            modifiedAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
};

export type GetDefaultScheduleResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            hours: {
                0: string | null;
                1: Array<Array<number>>;
                2: Array<Array<number>>;
                3: Array<Array<number>>;
                4: Array<Array<number>>;
                5: Array<Array<number>>;
                6: string | null;
            };
            timezone: string;
            default: boolean;
            createdAt: string;
            modifiedAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
    included: Array<{
        type: string;
        id: string;
        attributes: {
            name: string;
            startDate: string;
            endDate: string;
            description: string;
            enabled: boolean;
            createdAt: string;
            modifiedAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            schedule: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
};

export type GetSchedulebyIdResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            hours: {
                0: string | null;
                1: Array<Array<number>>;
                2: Array<Array<number>>;
                3: Array<Array<number>>;
                4: Array<Array<number>>;
                5: Array<Array<number>>;
                6: string | null;
            };
            timezone: string;
            default: boolean;
            createdAt: string;
            modifiedAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
    included: Array<{
        type: string;
        id: string;
        attributes: {
            name: string;
            startDate: string;
            endDate: string;
            description: string;
            enabled: boolean;
            createdAt: string;
            modifiedAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            schedule: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
};

export type UpdateSchedulebyIdRequest = {
    name: string;
    hours: {
        0: Array<[
            number,
            number
        ]> | null;
        1: Array<[
            number,
            number
        ]> | null;
        2: Array<[
            number,
            number
        ]> | null;
        3: Array<[
            number,
            number
        ]> | null;
        4: Array<[
            number,
            number
        ]> | null;
        5: Array<[
            number,
            number
        ]> | null;
        6: Array<[
            number,
            number
        ]> | null;
    };
    timezone: string;
    default: boolean;
};

export type UpdateSchedulebyIdResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            hours: {
                0: string | null;
                1: Array<Array<number>>;
                2: Array<Array<number>>;
                3: Array<Array<number>>;
                4: Array<Array<number>>;
                5: Array<Array<number>>;
                6: string | null;
            };
            timezone: string;
            default: boolean;
            createdAt: string;
            modifiedAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type CreateScheduleRequest = {
    name: string;
    hours: {
        0: Array<[
            number,
            number
        ]> | null;
        1: Array<[
            number,
            number
        ]> | null;
        2: Array<[
            number,
            number
        ]> | null;
        3: Array<[
            number,
            number
        ]> | null;
        4: Array<[
            number,
            number
        ]> | null;
        5: Array<[
            number,
            number
        ]> | null;
        6: Array<[
            number,
            number
        ]> | null;
    };
    timezone: string;
    default: boolean;
};

export type CreateScheduleResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            hours: {
                0: string | null;
                1: Array<Array<number>>;
                2: Array<Array<number>>;
                3: Array<Array<number>>;
                4: Array<Array<number>>;
                5: Array<Array<number>>;
                6: string | null;
            };
            timezone: string;
            default: boolean;
            createdAt: string;
            modifiedAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type DeleteSchedulebyIdResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            hours: {
                0: string | null;
                1: Array<Array<number>>;
                2: Array<Array<number>>;
                3: Array<Array<number>>;
                4: Array<Array<number>>;
                5: Array<Array<number>>;
                6: string | null;
            };
            timezone: string;
            default: boolean;
            deleted: boolean;
            deletedAt: string;
            createdAt: string;
            modifiedAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            deletedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type Timezones = string;

export type HourTuples = Array<[
    number,
    number
]>;

export type BulkBatchUpdateCompaniesRequest = Array<{
    id: string;
    name?: string;
    externalId?: string | null;
    avatarUrl?: string | null;
    emails?: Array<{
        type?: 'home' | 'work' | 'other';
        email: string;
        verified?: boolean;
    }>;
    phones?: Array<{
        type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
        phone: string;
        verified?: boolean;
    }>;
    socials?: Array<{
        type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
        userid?: string;
        username: string;
        url?: string;
        verified?: boolean;
    }>;
    urls?: Array<{
        type?: 'website' | 'blog' | 'other';
        url: string;
    }>;
    domains?: Array<{
        domain: string;
    }>;
    locations?: Array<{
        type?: 'home' | 'work' | 'other';
        name?: string | null;
        address?: string | null;
        address2?: string | null;
        address3?: string | null;
        latitude?: number | null;
        longitude?: number | null;
        countryCode?: string | null;
        countryName?: string | null;
        regionCode?: string | null;
        regionName?: string | null;
        cityName?: string | null;
        zipCode?: string | null;
        areaCode?: string | null;
    }>;
    employeeCount?: number;
    tags?: Array<string>;
    custom?: {
        [key: string]: never;
    };
    defaultLang?: string | null;
    deleted?: boolean | null;
}>;

export type BulkBatchUpdateCompaniesResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            ids: Array<unknown>;
            context: string;
            status: string;
            v2: boolean;
            payload: {
                api: {
                    data: Array<{
                        id: string;
                        name: string;
                    }>;
                    path: string;
                    user: {
                        id: string;
                        userType: string;
                        roles: Array<string>;
                        orgName: string;
                        subject: string;
                        org: string;
                    };
                    requestId: string;
                    service: string;
                    method: string;
                };
            };
            createdAt: string;
            updatedAt: string;
            completed: boolean;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type CreateaCompanyRequest = {
    /**
     * The name of the company. The minimum length is 3 and the maximum is 255.
     */
    name: string;
    /**
     * The third party application ID for this company, if applicable. The maximum length is 256.
     */
    externalId?: string;
    /**
     * The URL for the avatar image of this company.
     */
    avatarUrl?: string | null;
    /**
     * The email addresses associated with this company. The maximum amount is 10.
     */
    emails?: Array<{
        type?: 'home' | 'work' | 'other';
        email: string;
        verified?: boolean;
    }>;
    /**
     * The phone numbers associated with this company. The maximum amount is 10.
     */
    phones?: Array<{
        type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
        phone: string;
        verified?: boolean;
    }>;
    /**
     * The WhatsApp phone numbers associated with this company. The maximum amount is 10.
     */
    whatsapps?: Array<{
        type?: 'mobile';
        phone: string;
        verified?: boolean;
    }>;
    /**
     * The social media handles associated with this company. The maximum amount of items is 10.
     */
    socials?: Array<{
        type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
        userid?: string;
        username: string;
        url?: string;
        verified?: boolean;
    }>;
    /**
     * The websites associated with this company. The maximum amount is 10.
     */
    urls?: Array<{
        type?: 'website' | 'blog' | 'other';
        url: string;
    }>;
    domains?: Array<{
        domain: string;
    }>;
    /**
     * The primary address associated with this company.
     * The maximum amount is 10.
     */
    locations?: Array<{
        type?: 'home' | 'work' | 'other';
        name?: string | null;
        address?: string | null;
        address2?: string | null;
        address3?: string | null;
        latitude?: number | null;
        longitude?: number | null;
        countryCode?: string | null;
        countryName?: string | null;
        regionCode?: string | null;
        regionName?: string | null;
        cityName?: string | null;
        zipCode?: string | null;
        areaCode?: string | null;
    }>;
    /**
     * The number of customers associated with this company.
     */
    employeeCount?: number;
    tags?: Array<string>;
    /**
     * The date and time the company object was created in Kustomer.
     */
    createdAt?: string;
    /**
     * The date and time the company was imported from an external system.
     */
    importedAt?: string;
    rev?: number;
    custom?: {
        [key: string]: never;
    };
    defaultLang?: string | null;
};

export type CreateaCompanyResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            tags: Array<unknown>;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type BulkCreateCompaniesRequest = Array<{
    name: string;
    externalId?: string;
    avatarUrl?: string | null;
    emails?: Array<{
        type?: 'home' | 'work' | 'other';
        email: string;
        verified?: boolean;
    }>;
    phones?: Array<{
        type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
        phone: string;
        verified?: boolean;
    }>;
    whatsapps?: Array<{
        type?: 'mobile';
        phone: string;
        verified?: boolean;
    }>;
    socials?: Array<{
        type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
        userid?: string;
        username: string;
        url?: string;
        verified?: boolean;
    }>;
    urls?: Array<{
        type?: 'website' | 'blog' | 'other';
        url: string;
    }>;
    domains?: Array<{
        domain: string;
    }>;
    locations?: Array<{
        type?: 'home' | 'work' | 'other';
        name?: string | null;
        address?: string | null;
        address2?: string | null;
        address3?: string | null;
        latitude?: number | null;
        longitude?: number | null;
        countryCode?: string | null;
        countryName?: string | null;
        regionCode?: string | null;
        regionName?: string | null;
        cityName?: string | null;
        zipCode?: string | null;
        areaCode?: string | null;
    }>;
    employeeCount?: number;
    tags?: Array<string>;
    createdAt?: string;
    importedAt?: string;
    rev?: number;
    custom?: {
        [key: string]: never;
    };
    defaultLang?: string | null;
}>;

export type BulkCreateCompaniesResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            ids: Array<unknown>;
            context: string;
            status: string;
            v2: boolean;
            payload: {
                api: {
                    data: Array<{
                        name: string;
                    }>;
                    path: string;
                    user: {
                        id: string;
                        userType: string;
                        roles: Array<string>;
                        orgName: string;
                        subject: string;
                        org: string;
                    };
                    requestId: string;
                    service: string;
                    method: string;
                };
            };
            createdAt: string;
            updatedAt: string;
            completed: boolean;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetCompaniesResponseFilterSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            name: string;
            extenalId: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            tags: Array<string>;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type GetCompanybyIdResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            tags: Array<string>;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type UpdateCompanyAttributesRequest = {
    name?: string;
    externalId?: string | null;
    avatarUrl?: string | null;
    emails?: Array<{
        type?: 'home' | 'work' | 'other';
        email: string;
        verified?: boolean;
    }>;
    phones?: Array<{
        type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
        phone: string;
        verified?: boolean;
    }>;
    whatsapps?: Array<{
        type?: 'mobile';
        phone: string;
        verified?: boolean;
    }>;
    socials?: Array<{
        type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
        userid?: string;
        username: string;
        url?: string;
        verified?: boolean;
    }>;
    urls?: Array<{
        type?: 'website' | 'blog' | 'other';
        url: string;
    }>;
    domains?: Array<{
        domain: string;
    }>;
    locations?: Array<{
        type?: 'home' | 'work' | 'other';
        name?: string | null;
        address?: string | null;
        address2?: string | null;
        address3?: string | null;
        latitude?: number | null;
        longitude?: number | null;
        countryCode?: string | null;
        countryName?: string | null;
        regionCode?: string | null;
        regionName?: string | null;
        cityName?: string | null;
        zipCode?: string | null;
        areaCode?: string | null;
    }>;
    employeeCount?: number;
    tags?: Array<string>;
    custom?: {
        [key: string]: never;
    };
    defaultLang?: string | null;
    rev?: number;
    deleted?: boolean | null;
};

export type UpdateCompanyAttributesResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            tags: Array<string>;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type Email = {
    type?: 'home' | 'work' | 'other';
    email: string;
    verified?: boolean;
};

export type Domain = {
    domain: string;
};

export type CustomAttrs = {
    [key: string]: never;
};

export type Lang = string | null;

export type Location = {
    type?: 'home' | 'work' | 'other';
    name?: string | null;
    address?: string | null;
    address2?: string | null;
    address3?: string | null;
    latitude?: number | null;
    longitude?: number | null;
    countryCode?: string | null;
    countryName?: string | null;
    regionCode?: string | null;
    regionName?: string | null;
    cityName?: string | null;
    zipCode?: string | null;
    areaCode?: string | null;
};

export type Phone = {
    type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
    phone: string;
    verified?: boolean;
};

export type Social = {
    type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
    userid?: string;
    username: string;
    url?: string;
    verified?: boolean;
};

export type Tags = Array<string>;

export type TagName = string;

export type Url = {
    type?: 'website' | 'blog' | 'other';
    url: string;
};

export type Whatsapp = {
    type?: 'mobile';
    phone: string;
    verified?: boolean;
};

export type CreateaConversationRequest = {
    id?: string;
    customer: string;
    externalId?: string;
    name?: string;
    status?: 'open' | 'done';
    priority?: number;
    createdAt?: string;
    importedAt?: string;
    direction?: 'in' | 'out';
    replyChannel?: string | null;
    tags?: Array<string>;
    assignedUsers?: Array<string>;
    assignedTeams?: Array<string>;
    custom?: {
        [key: string]: never;
    };
    defaultLang?: string | null;
    queue?: unknown & {
        id?: string | null;
        external?: 'amazon-connect';
    };
};

export type CreateaConversationResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            channels: Array<unknown>;
            status: string;
            messageCount: number;
            noteCount: number;
            satisfaction: number;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            tags: Array<unknown>;
            suggestedTags: Array<unknown>;
            sentiment: {
                [key: string]: unknown;
            };
            lastMessageIn: {
                [key: string]: unknown;
            };
            assignedUsers: Array<unknown>;
            assignedTeams: Array<unknown>;
            firstResponse: {
                [key: string]: unknown;
            };
            direction: string;
            outboundMessageCount: number;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetConversationsResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            name: string;
            channels: Array<string>;
            status: string;
            messageCount: number;
            noteCount: number;
            satisfaction: number;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            tags: Array<unknown>;
            suggestedTags: Array<unknown>;
            sentiment: {
                [key: string]: unknown;
            };
            lastMessageIn: {
                [key: string]: unknown;
            };
            assignedUsers: Array<unknown>;
            assignedTeams: Array<unknown>;
            firstResponse: {
                [key: string]: unknown;
            };
            direction: string;
            outboundMessageCount: number;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type GetConversationResponseUntitledResponse = {
    errors: Array<{
        status: string;
        code: string;
        title: string;
        source: {
            parameters: string;
        };
    }>;
};

export type GetConversationResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            channels: Array<unknown>;
            status: string;
            messageCount: number;
            noteCount: number;
            satisfaction: number;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            tags: Array<unknown>;
            suggestedTags: Array<unknown>;
            sentiment: {
                [key: string]: unknown;
            };
            lastMessageIn: {
                [key: string]: unknown;
            };
            assignedUsers: Array<unknown>;
            assignedTeams: Array<unknown>;
            firstResponse: {
                [key: string]: unknown;
            };
            direction: string;
            outboundMessageCount: number;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetConversationbyExternalIdResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            externalId: string;
            name: string;
            channels: Array<unknown>;
            status: string;
            messageCount: number;
            noteCount: number;
            satisfaction: number;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            tags: Array<unknown>;
            suggestedTags: Array<unknown>;
            sentiment: {
                [key: string]: unknown;
            };
            lastMessageIn: {
                [key: string]: unknown;
            };
            assignedUsers: Array<unknown>;
            assignedTeams: Array<unknown>;
            firstResponse: {
                [key: string]: unknown;
            };
            direction: string;
            outboundMessageCount: number;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type UpdateConversationRequest = {
    externalId?: string | null;
    name?: string | null;
    direction?: 'in' | 'out';
    priority?: number;
    satisfaction?: number | null;
    satisfactionLevel?: {
        form?: string;
        formResponse?: string;
        createdAt: string;
        updatedAt?: string;
        status: 'scheduled' | 'offered' | 'rated' | 'commented' | 'canceled' | 'unresponded';
        scheduledFor?: string;
        firstAnswer?: string;
        sentAt?: string;
        score?: 0 | 1;
        rating?: number;
        channel?: 'email' | 'sms' | 'chat' | 'facebook' | 'twitter-dm' | 'twitter-tweet' | 'voice' | 'instagram' | 'instagram-comment' | 'whatsapp' | 'form';
        sentBy?: string;
        sentByTeams?: Array<string>;
    };
    suggestedShortcuts?: Array<{
        shortcutId: string;
        confidence: number;
    }>;
    status?: 'open' | 'snoozed' | 'done';
    replyChannel?: string | null;
    subStatus?: string;
    snooze?: {
        time?: string;
        status: 'scheduled' | 'canceled' | 'elapsed';
    };
    tags?: Array<string>;
    suggestedTags?: Array<{
        tag: string;
        confidence: number;
    }>;
    sentiment?: {
        polarity: -1 | 0 | 1;
        confidence: number;
    };
    assignedUsers?: Array<string>;
    assignedTeams?: Array<string>;
    custom?: {
        [key: string]: never;
    };
    deleted?: boolean | null;
    ended?: boolean;
    endedAt?: string;
    endedReason?: string;
    endedBy?: string;
    endedByType?: 'user' | 'customer';
    locked?: boolean;
    rev?: number;
    defaultLang?: string | null;
    queue?: (unknown & {
        id?: string;
        external?: 'amazon-connect';
    }) | (unknown & {
        id?: string | null;
        external?: 'amazon-connect';
    });
} | {
    customer?: string;
};

export type UpdateConversationResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            channels: Array<unknown>;
            status: string;
            messageCount: number;
            noteCount: number;
            satisfaction: number;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            tags: Array<unknown>;
            suggestedTags: Array<unknown>;
            sentiment: {
                [key: string]: unknown;
            };
            lastMessageIn: {
                [key: string]: unknown;
            };
            assignedUsers: Array<unknown>;
            assignedTeams: Array<unknown>;
            firstResponse: {
                [key: string]: unknown;
            };
            direction: string;
            outboundMessageCount: number;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type UpdateConversationAttributesRequest = {
    externalId?: string | null;
    name?: string | null;
    direction?: 'in' | 'out';
    priority?: number;
    satisfaction?: number | null;
    satisfactionLevel?: {
        form?: string;
        formResponse?: string;
        createdAt: string;
        updatedAt?: string;
        status: 'scheduled' | 'offered' | 'rated' | 'commented' | 'canceled' | 'unresponded';
        scheduledFor?: string;
        firstAnswer?: string;
        sentAt?: string;
        score?: 0 | 1;
        rating?: number;
        channel?: 'email' | 'sms' | 'chat' | 'facebook' | 'twitter-dm' | 'twitter-tweet' | 'voice' | 'instagram' | 'instagram-comment' | 'whatsapp' | 'form';
        sentBy?: string;
        sentByTeams?: Array<string>;
    };
    suggestedShortcuts?: Array<{
        shortcutId: string;
        confidence: number;
    }>;
    status?: 'open' | 'snoozed' | 'done';
    replyChannel?: string | null;
    subStatus?: string;
    snooze?: {
        time?: string;
        status: 'scheduled' | 'canceled' | 'elapsed';
    };
    tags?: Array<string>;
    suggestedTags?: Array<{
        tag: string;
        confidence: number;
    }>;
    sentiment?: {
        polarity: -1 | 0 | 1;
        confidence: number;
    };
    assignedUsers?: Array<string>;
    assignedTeams?: Array<string>;
    custom?: {
        [key: string]: never;
    };
    deleted?: boolean | null;
    ended?: boolean;
    endedAt?: string;
    endedReason?: string;
    endedBy?: string;
    endedByType?: 'user' | 'customer';
    locked?: boolean;
    rev?: number;
    defaultLang?: string | null;
    queue?: (unknown & {
        id?: string;
        external?: 'amazon-connect';
    }) | (unknown & {
        id?: string | null;
        external?: 'amazon-connect';
    });
} | {
    customer?: string;
};

export type UpdateConversationAttributesResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            channels: Array<unknown>;
            status: string;
            messageCount: number;
            noteCount: number;
            satisfaction: number;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            tags: Array<unknown>;
            suggestedTags: Array<unknown>;
            sentiment: {
                [key: string]: unknown;
            };
            lastMessageIn: {
                [key: string]: unknown;
            };
            assignedUsers: Array<unknown>;
            assignedTeams: Array<unknown>;
            firstResponse: {
                [key: string]: unknown;
            };
            direction: string;
            outboundMessageCount: number;
            externalQueue: string;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetConversationEventsResponseSuccess = {
    meta: {
        [key: string]: unknown;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            name: string;
            type: string;
            publishedAt: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            changes?: {
                attributes: {
                    updatedAt?: {
                        op: string;
                        before: string;
                        after: string;
                    };
                    modifiedAt?: {
                        op: string;
                        before: string;
                        after: string;
                    };
                };
                relationships: {
                    customer?: {
                        op: string;
                        before: {
                            links: {
                                self: string;
                            };
                            data: {
                                type: string;
                                id: string;
                            };
                        };
                        after: {
                            links: {
                                self: string;
                            };
                            data: {
                                type: string;
                                id: string;
                            };
                        };
                    };
                };
            };
            location: string | null;
            meta: string | null;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type ConversationSatisfaction = {
    form?: string;
    formResponse?: string;
    createdAt: string;
    updatedAt?: string;
    status: 'scheduled' | 'offered' | 'rated' | 'commented' | 'canceled' | 'unresponded';
    scheduledFor?: string;
    firstAnswer?: string;
    sentAt?: string;
    score?: 0 | 1;
    rating?: number;
    channel?: 'email' | 'sms' | 'chat' | 'facebook' | 'twitter-dm' | 'twitter-tweet' | 'voice' | 'instagram' | 'instagram-comment' | 'whatsapp' | 'form';
    sentBy?: string;
    sentByTeams?: Array<string>;
};

export type Sentiment = {
    polarity: -1 | 0 | 1;
    confidence: number;
};

export type BulkCreateConversationsRequest = Array<{
    id?: string;
    customer: string;
    externalId?: string;
    name?: string;
    status?: 'open' | 'done';
    priority?: number;
    createdAt?: string;
    importedAt?: string;
    direction?: 'in' | 'out';
    replyChannel?: string | null;
    tags?: Array<string>;
    assignedUsers?: Array<string>;
    assignedTeams?: Array<string>;
    custom?: {
        [key: string]: never;
    };
    defaultLang?: string | null;
    queue?: unknown & {
        id?: string | null;
        external?: 'amazon-connect';
    };
}>;

export type BulkCreateConversationsResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            ids: Array<unknown>;
            context: string;
            status: string;
            v2: boolean;
            payload: {
                api: {
                    data: Array<{
                        externalId: string;
                        name: string;
                    }>;
                    path: string;
                    user: {
                        id: string;
                        userType: string;
                        roles: Array<string>;
                        orgName: string;
                        subject: string;
                        org: string;
                    };
                    requestId: string;
                    service: string;
                    method: string;
                };
            };
            createdAt: string;
            updatedAt: string;
            completed: boolean;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type BulkBatchUpdateConversationsRequest = Array<{
    id: string;
    externalId?: string | null;
    name?: string | null;
    direction?: 'in' | 'out';
    priority?: number;
    satisfaction?: number | null;
    status?: 'open' | 'snoozed' | 'done';
    replyChannel?: string | null;
    subStatus?: string;
    snooze?: {
        time?: string;
        status: 'scheduled' | 'canceled' | 'elapsed';
    };
    tags?: Array<string>;
    suggestedTags?: Array<{
        tag: string;
        confidence: number;
    }>;
    sentiment?: {
        polarity: -1 | 0 | 1;
        confidence: number;
    };
    assignedUsers?: Array<string>;
    assignedTeams?: Array<string>;
    custom?: {
        [key: string]: never;
    };
    deleted?: boolean | null;
    ended?: boolean;
    endedAt?: string;
    endedReason?: string;
    endedBy?: string;
    endedByType?: 'user' | 'customer';
    locked?: boolean;
    rev?: number;
    defaultLang?: string | null;
    queue?: unknown & {
        id?: string | null;
        external?: 'amazon-connect';
    };
} | {
    id: string;
    customer?: string;
}>;

export type BulkBatchUpdateConversationsResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            ids: Array<unknown>;
            context: string;
            status: string;
            v2: boolean;
            payload: {
                api: {
                    data: Array<{
                        id: string;
                        status?: string;
                        name?: string;
                    }>;
                    path: string;
                    user: {
                        id: string;
                        userType: string;
                        roles: Array<string>;
                        orgName: string;
                        subject: string;
                        org: string;
                    };
                    requestId: string;
                    service: string;
                    method: string;
                };
            };
            createdAt: string;
            updatedAt: string;
            completed: boolean;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type CreateaMessagefromConversationRequest = {
    id?: string;
    externalId?: string;
    customer?: string;
    conversation?: string;
    reference?: {
        message: string;
        type: 'reply' | 'replyAll' | 'forward';
    };
    channel: 'email' | 'sms' | 'chat' | 'facebook' | 'twitter-dm' | 'twitter-tweet' | 'voice' | 'instagram' | 'whatsapp';
    preview?: string;
    subject?: string;
    direction?: 'in' | 'out';
    app: string;
    size?: number;
    related?: string;
    status?: 'sent' | 'received' | 'error';
    error?: {
        status?: number;
        code?: string;
        title?: string;
        detail?: string;
        source?: {
            [key: string]: unknown;
        };
        meta?: {
            [key: string]: unknown;
        };
        links?: {
            [key: string]: unknown;
        };
    };
    errorAt?: string;
    auto?: boolean;
    sentAt?: string;
    source?: 'bulk' | 'satisfaction';
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    attachments?: Array<{
        _id: string;
        name: string;
        contentType: string;
        contentLength: number;
        sourceId?: string;
    }> | Array<string>;
    location?: {
        name?: string;
        address?: string;
        address2?: string;
        address3?: string;
        latitude?: number;
        longitude?: number;
        countryCode?: string;
        countryName?: string;
        regionCode?: string;
        regionName?: string;
        cityName?: string;
        zipCode?: string;
        areaCode?: string;
    };
    meta?: {
        [key: string]: unknown;
    };
    custom?: {
        [key: string]: never;
    };
    sentiment?: {
        polarity: -1 | 0 | 1;
        confidence: number;
    };
    createdAt?: string;
    modifiedAt?: string;
    createdBy?: string;
    modifiedBy?: string;
    importedAt?: string;
    lang?: string | null;
    queue?: unknown & {
        id?: string;
        external?: 'amazon-connect';
    };
};

export type CreateaMessagefromConversationResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            channel: string;
            app: string;
            size: number;
            direction: string;
            meta: {
                [key: string]: unknown;
            };
            status: string;
            sentAt: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetMessagesbyConversationResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            externalId: string;
            channel: string;
            app: string;
            size: number;
            direction: string;
            preview: string;
            sentiment: {
                [key: string]: unknown;
            };
            meta: {
                inReplyTo: string;
                recipient: {
                    mailboxHash: string;
                    email: string;
                };
                cc: Array<unknown>;
                to: Array<{
                    email: string;
                }>;
                from: string;
                subject: string;
            };
            status: string;
            sentAt: string;
            createdAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
            related: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type AppendTagstoConversationRequest = Array<string>;

export type AppendTagstoConversationResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            channels: Array<unknown>;
            status: string;
            messageCount: number;
            noteCount: number;
            satisfaction: number;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            tags: Array<string>;
            suggestedTags: Array<unknown>;
            sentiment: {
                [key: string]: unknown;
            };
            lastMessageIn: {
                [key: string]: unknown;
            };
            assignedUsers: Array<unknown>;
            assignedTeams: Array<unknown>;
            firstResponse: {
                [key: string]: unknown;
            };
            direction: string;
            outboundMessageCount: number;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type RemoveTagsfromConversationRequest = Array<string>;

export type RemoveTagsfromConversationResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            channels: Array<unknown>;
            status: string;
            messageCount: number;
            noteCount: number;
            satisfaction: number;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            tags: Array<unknown>;
            suggestedTags: Array<unknown>;
            sentiment: {
                [key: string]: unknown;
            };
            lastMessageIn: {
                [key: string]: unknown;
            };
            assignedUsers: Array<unknown>;
            assignedTeams: Array<unknown>;
            firstResponse: {
                [key: string]: unknown;
            };
            direction: string;
            outboundMessageCount: number;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type CreateaForwardbyConversationRequest = {
    channel: 'email';
    app?: 'gmail' | 'postmark';
    customer?: string;
    status?: 'draft' | 'sent' | 'failed';
    sendAt?: string;
    to?: Array<{
        email: string;
        name?: string;
    }>;
    from?: {
        email: string;
        name?: string;
    };
    body?: string;
    subject?: string;
    replyTo?: string;
    template?: string | null;
    payload?: {
        [key: string]: unknown;
    };
    attachments?: Array<{
        id: string;
        name: string;
        contentType: string;
        contentLength: number;
    }>;
};

export type CreateaForwardbyConversationResponseSuccess = {
    data: {
        id: string;
        type: string;
        attributes: {
            app: string;
            channel: string;
            status: string;
            from: {
                name: string;
                email: string;
            };
            to: Array<{
                name: string;
                email: string;
            }>;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
        };
        relationships: {
            org: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            customer: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            conversation: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            createdBy: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            modifiedBy: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            attachments?: Array<{
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            }>;
        };
    };
};

export type GetallForwardsbyConversationResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        id: string;
        type: string;
        attributes: {
            app: string;
            channel: string;
            from: {
                name: string;
                email: string;
            };
            to: Array<{
                name: string;
                email: string;
            }>;
            body: string;
            payload?: {
                draftJs: {
                    blocks: Array<{
                        data: {
                            [key: string]: unknown;
                        };
                        entityRanges: Array<unknown>;
                        inlineStyleRanges: Array<unknown>;
                        depth: number;
                        type: string;
                        text: string;
                        key: string;
                    }>;
                    entityMap: {
                        [key: string]: unknown;
                    };
                };
            };
            status: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
        };
        relationships: {
            org: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            customer: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            createdBy: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            modifiedBy: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            conversation?: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type GetconversationtimesbyconversationidResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            createdAt: string;
            createdByTeams: Array<string>;
            assignedUsers: Array<string>;
            assignedTeams: Array<unknown>;
            handleAt: string;
            handleTime: number;
            channels: Array<string>;
            messageAt?: string;
            messageTime?: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
};

export type GetconversationtimebyidsResponsesuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            createdAt: string;
            createdByTeams: Array<string>;
            assignedUsers: Array<string>;
            assignedTeams: Array<unknown>;
            handleAt: string;
            handleTime: number;
            channels: Array<string>;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type CreateaNotewithinConversationResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            body: string;
            createdAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            userMentions: {
                data: Array<{
                    type: string;
                    id: string;
                }>;
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetNotesbyConversationResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            body: string;
            createdAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            userMentions: {
                data: Array<{
                    type: string;
                    id: string;
                }>;
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type CreateaNotewithinConversationRequest = {
    id?: string;
    conversation?: string;
    externalId?: string;
    body: string;
    userMentions?: Array<{
        user?: string;
        team?: string;
    }>;
    attachments?: Array<{
        _id: string;
        name: string;
        contentType: string;
        contentLength: number;
        sourceId?: string;
    }>;
    createdAt?: string;
    modifiedAt?: string;
    createdBy?: string;
    modifiedBy?: string;
    importedAt?: string;
    lang?: string | null;
};

export type CreateaNoteRequest = {
    id?: string;
    externalId?: string;
    body: string;
    userMentions?: Array<{
        user?: string;
        team?: string;
    }>;
    createdAt?: string;
    modifiedAt?: string;
    createdBy?: string;
    modifiedBy?: string;
    lang?: string | null;
};

export type _Error = {
    status?: number;
    code?: string;
    title?: string;
    detail?: string;
    source?: {
        [key: string]: unknown;
    };
    meta?: {
        [key: string]: unknown;
    };
    links?: {
        [key: string]: unknown;
    };
};

export type Attachment = {
    _id: string;
    name: string;
    contentType: string;
    contentLength: number;
    sourceId?: string;
};

export type BulkCreateCustomersRequest = Array<{
    name?: string | null;
    company?: string | null;
    externalId?: string | null;
    username?: string | null;
    signedUpAt?: string | null;
    lastActivityAt?: string | null;
    lastCustomerActivityAt?: string | null;
    lastSeenAt?: string | null;
    avatarUrl?: string | null;
    externalIds?: Array<{
        externalId: string;
        verified?: boolean;
    }>;
    sharedExternalIds?: Array<{
        externalId: string;
        verified?: boolean;
    }>;
    emails?: Array<{
        type?: 'home' | 'work' | 'other';
        email: string;
        verified?: boolean;
    }>;
    sharedEmails?: Array<{
        type?: 'home' | 'work' | 'other';
        email: string;
        verified?: boolean;
    }>;
    phones?: Array<{
        type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
        phone: string;
        verified?: boolean;
    }>;
    sharedPhones?: Array<{
        type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
        phone: string;
        verified?: boolean;
    }>;
    whatsapps?: Array<{
        type?: 'mobile';
        phone: string;
        verified?: boolean;
    }>;
    facebookIds?: Array<{
        pageId: string;
        userId: string;
        name?: string;
    }>;
    instagramIds?: Array<{
        pageId: string;
        threadId: string;
        username: string;
        instagramId?: string;
    }>;
    socials?: Array<{
        type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
        userid?: string;
        username: string;
        url?: string;
        verified?: boolean;
    }>;
    sharedSocials?: Array<{
        type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
        userid?: string;
        username: string;
        url?: string;
        verified?: boolean;
    }>;
    urls?: Array<{
        type?: 'website' | 'blog' | 'other';
        url: string;
    }>;
    locations?: Array<{
        type?: 'home' | 'work' | 'other';
        name?: string | null;
        address?: string | null;
        address2?: string | null;
        address3?: string | null;
        latitude?: number | null;
        longitude?: number | null;
        countryCode?: string | null;
        countryName?: string | null;
        regionCode?: string | null;
        regionName?: string | null;
        cityName?: string | null;
        zipCode?: string | null;
        areaCode?: string | null;
    }>;
    locale?: string | null;
    timeZone?: string | null;
    tags?: Array<string>;
    sentiment?: {
        polarity: -1 | 0 | 1;
        confidence: number;
    };
    custom?: {
        [key: string]: never;
    };
    birthdayAt?: string | null;
    gender?: 'm' | 'f';
    createdAt?: string;
    importedAt?: string;
    rev?: number;
    defaultLang?: string | null;
}>;

export type BulkCreateCustomersResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            ids: Array<unknown>;
            context: string;
            status: string;
            v2: boolean;
            payload: {
                api: {
                    data: Array<{
                        name: string;
                    }>;
                    path: string;
                    user: {
                        id: string;
                        userType: string;
                        roles: Array<string>;
                        orgName: string;
                        subject: string;
                        org: string;
                    };
                    requestId: string;
                    service: string;
                    method: string;
                };
            };
            createdAt: string;
            updatedAt: string;
            completed: boolean;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type BulkBatchUpdateCustomersRequest = Array<{
    id: string;
    name?: string | null;
    company?: string | null;
    externalId?: string | null;
    username?: string | null;
    signedUpAt?: string | null;
    lastActivityAt?: string | null;
    lastCustomerActivityAt?: string | null;
    lastSeenAt?: string | null;
    avatarUrl?: string | null;
    externalIds?: Array<{
        externalId: string;
        verified?: boolean;
    }>;
    sharedExternalIds?: Array<{
        externalId: string;
        verified?: boolean;
    }>;
    emails?: Array<{
        type?: 'home' | 'work' | 'other';
        email: string;
        verified?: boolean;
    }>;
    sharedEmails?: Array<{
        type?: 'home' | 'work' | 'other';
        email: string;
        verified?: boolean;
    }>;
    phones?: Array<{
        type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
        phone: string;
        verified?: boolean;
    }>;
    sharedPhones?: Array<{
        type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
        phone: string;
        verified?: boolean;
    }>;
    facebookIds?: Array<{
        pageId: string;
        userId: string;
        name?: string;
    }>;
    socials?: Array<{
        type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
        userid?: string;
        username: string;
        url?: string;
        verified?: boolean;
    }>;
    sharedSocials?: Array<{
        type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
        userid?: string;
        username: string;
        url?: string;
        verified?: boolean;
    }>;
    urls?: Array<{
        type?: 'website' | 'blog' | 'other';
        url: string;
    }>;
    locations?: Array<{
        type?: 'home' | 'work' | 'other';
        name?: string | null;
        address?: string | null;
        address2?: string | null;
        address3?: string | null;
        latitude?: number | null;
        longitude?: number | null;
        countryCode?: string | null;
        countryName?: string | null;
        regionCode?: string | null;
        regionName?: string | null;
        cityName?: string | null;
        zipCode?: string | null;
        areaCode?: string | null;
    }>;
    locale?: string | null;
    timeZone?: string | null;
    tags?: Array<string>;
    sentiment?: {
        polarity: -1 | 0 | 1;
        confidence: number;
    };
    custom?: {
        [key: string]: never;
    };
    birthdayAt?: string | null;
    gender?: 'm' | 'f';
    createdAt?: string;
    importedAt?: string;
    rev?: number;
    defaultLang?: string | null;
}>;

export type BulkBatchUpdateCustomersResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            ids: Array<unknown>;
            context: string;
            status: string;
            v2: boolean;
            payload: {
                api: {
                    data: Array<{
                        id: string;
                        name: string;
                    }>;
                    path: string;
                    user: {
                        id: string;
                        userType: string;
                        roles: Array<string>;
                        orgName: string;
                        subject: string;
                        org: string;
                    };
                    requestId: string;
                    service: string;
                    method: string;
                };
            };
            createdAt: string;
            updatedAt: string;
            completed: boolean;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type BulkDeleteCustomersResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            ids: Array<string>;
            context: string;
            status: string;
            v2: boolean;
            payload: {
                api: {
                    data: {
                        [key: string]: unknown;
                    };
                    path: string;
                    user: {
                        id: string;
                        userType: string;
                        roles: Array<string>;
                        orgName: string;
                        subject: string;
                        org: string;
                    };
                    requestId: string;
                    service: string;
                    method: string;
                };
            };
            createdAt: string;
            updatedAt: string;
            completed: boolean;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type CreateaConversationforaCustomerRequest = {
    id?: string;
    externalId?: string;
    campaign?: string;
    name?: string;
    status?: 'open' | 'done';
    priority?: number;
    createdAt?: string;
    importedAt?: string;
    direction?: 'in' | 'out';
    replyChannel?: string | null;
    tags?: Array<string>;
    assignedUsers?: Array<string>;
    assignedTeams?: Array<string>;
    custom?: {
        [key: string]: never;
    };
    defaultLang?: string | null;
    queue?: unknown & {
        id?: string | null;
        external?: 'amazon-connect';
    };
};

export type CreateaConversationforaCustomerResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            channels: Array<unknown>;
            status: string;
            messageCount: number;
            noteCount: number;
            satisfaction: number;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            tags: Array<unknown>;
            suggestedTags: Array<unknown>;
            sentiment: {
                [key: string]: unknown;
            };
            lastMessageIn: {
                [key: string]: unknown;
            };
            assignedUsers: Array<unknown>;
            assignedTeams: Array<unknown>;
            firstResponse: {
                [key: string]: unknown;
            };
            direction: string;
            outboundMessageCount: number;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetConversationsbyCustomerResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            name: string;
            channels: Array<string>;
            status: string;
            messageCount: number;
            noteCount: number;
            satisfaction: number;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            tags: Array<unknown>;
            suggestedTags: Array<unknown>;
            sentiment: {
                [key: string]: unknown;
            };
            lastMessageIn: {
                [key: string]: unknown;
            };
            assignedUsers: Array<unknown>;
            assignedTeams: Array<unknown>;
            firstResponse: {
                [key: string]: unknown;
            };
            direction: string;
            outboundMessageCount: number;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type GetallDraftsbyCustomerResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        id: string;
        type: string;
        attributes: {
            channel: string;
            body: string;
            payload?: {
                draftJs: {
                    blocks: Array<{
                        data: {
                            [key: string]: unknown;
                        };
                        entityRanges: Array<unknown>;
                        inlineStyleRanges: Array<unknown>;
                        depth: number;
                        type: string;
                        text: string;
                        key: string;
                    }>;
                    entityMap: {
                        [key: string]: unknown;
                    };
                };
            };
            status: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
        };
        relationships: {
            org: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            customer: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            createdBy: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            modifiedBy: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            conversation?: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
    included: Array<unknown>;
};

export type CreateaDraftWhatsappParamsCommon = {
    channel: 'whatsapp';
    conversation?: string;
    customer?: string;
    /**
     * If true, message was automatically generated from a Kustomer workflow or auto-response feature. If set to true, this message will be excluded from reporting metrics. If false, message was created by a manual method.
     */
    auto?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    payload?: {
        [key: string]: unknown;
    };
};

export type CreateaDraftWhatsappTemplateMeta = {
    /**
     * WhatsApp templates are only officially supported for Kustomer native WhatsApp for now.
     */
    app: 'whatsapp';
    meta: {
        /**
         * Template IDs can be found at /v1/whatsapp/accounts/{accountId}/templates
         */
        template: string;
        components?: {
            header?: {
                type: 'text';
                /**
                 * A map of parameter indices to values. The keys of this map should be single digit, 1-indexed numbers (e.g. '{ 1: "{ "type": "text", "text": "YOUR_TEXT_GOES_HERE" }, 2: { ... } }')
                 */
                text: {
                    [key: string]: {
                        type?: 'text';
                        text?: string;
                    };
                };
            } | {
                type: 'image' | 'video' | 'document';
                attachment: string;
            };
            body?: {
                [key: string]: {
                    type?: 'text';
                    text?: string;
                };
            };
            /**
             * We currently only support parameterizing one button. The `index` and `sub_type` fields should be the same for all entries in this array, and the numbered parameters provided will only be applied to the button indexed by the `index` value provided.
             */
            buttons?: Array<{
                index: number;
                sub_type: 'url';
                [key: string]: {
                    type?: 'text';
                    text?: string;
                } | number | 'url';
            }>;
        };
    };
};

export type CreateaDraftWhatsappInteractiveMeta = {
    /**
     * WhatsApp interactive messages are only officially supported for Kustomer native WhatsApp for now.
     */
    app: 'whatsapp';
    meta: {
        interactive: {
            type: 'list';
            header?: {
                type: 'text';
                text: string;
            };
            body: {
                text: string;
            };
            footer?: {
                text: string;
            };
            action: {
                button: string;
                sections: Array<{
                    title?: string;
                    rows: Array<{
                        id: string;
                        title: string;
                        description?: string;
                    }>;
                }>;
            };
        } | {
            type: 'button';
            header?: {
                type: 'text';
                text: string;
            };
            body: {
                text: string;
            };
            footer?: {
                text: string;
            };
            action: {
                buttons: Array<{
                    type: 'reply';
                    reply: {
                        id: string;
                        title: string;
                    };
                }>;
            };
        };
    };
};

export type CreateaDraftbyCustomerRequest = {
    /**
     * The communication channel for the message.
     */
    channel: 'email';
    conversation?: string;
    app?: 'gmail' | 'postmark';
    customer?: string;
    /**
     * If true, message was automatically generated from a Kustomer workflow or auto-response feature. If set to true, this message will be excluded from reporting metrics. If false, message was created by a manual method.
     */
    auto?: boolean;
    /**
     * A timestamp for a future date/time the drafted message to be sent at.
     */
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction';
    /**
     * The language the message is in.
     */
    lang?: string | null;
    /**
     * The ID string associated with a shortcut. Shortcuts are pre-defined blocks of text defined in Kustomer. See [Get All Shortcuts](https://developer.kustomer.com/kustomer-api-docs/reference/getallshortcuts) endpoint view currently available shortcuts or create a shortcut with the [Create Shortcut](https://developer.kustomer.com/kustomer-api-docs/reference/createashortcut) endpoint. to Learn more about shortcuts in the [Use workspace shortcuts](https://help.kustomer.com/en_us/use-shortcuts-BymTcNSU) article.
     */
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: Array<{
        email: string;
        name?: string;
    }> | {
        email: string;
        name?: string;
    };
    from?: {
        email: string;
        name?: string;
    };
    body?: string;
    cc?: Array<{
        email: string;
        name?: string;
    }>;
    bcc?: Array<{
        email: string;
        name?: string;
    }>;
    subject?: string;
    replyTo?: string;
    headers?: Array<{
        name: string;
        value?: string;
    }>;
    template?: string | null;
    payload?: {
        [key: string]: unknown;
    };
} | {
    channel: 'sms';
    app?: 'twilio' | 'zipwhip';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    /**
     * A timestamp for a future date/time the drafted message to be sent at.
     */
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
} | ({
    channel: 'whatsapp';
    conversation?: string;
    customer?: string;
    /**
     * If true, message was automatically generated from a Kustomer workflow or auto-response feature. If set to true, this message will be excluded from reporting metrics. If false, message was created by a manual method.
     */
    auto?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    payload?: {
        [key: string]: unknown;
    };
} & {
    app: 'twilio_whatsapp' | 'messagebird' | 'whatsapp';
    /**
     * Required if the message doesn't have any attachments. If the message has an image or video attachment, this field is optional and will be used as the caption for the attached media. If the attachment is any other type, this field is ignored.
     */
    body: string;
}) | ({
    channel: 'whatsapp';
    conversation?: string;
    customer?: string;
    /**
     * If true, message was automatically generated from a Kustomer workflow or auto-response feature. If set to true, this message will be excluded from reporting metrics. If false, message was created by a manual method.
     */
    auto?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    payload?: {
        [key: string]: unknown;
    };
} & {
    /**
     * WhatsApp interactive messages are only officially supported for Kustomer native WhatsApp for now.
     */
    app: 'whatsapp';
    meta: {
        interactive: {
            type: 'list';
            header?: {
                type: 'text';
                text: string;
            };
            body: {
                text: string;
            };
            footer?: {
                text: string;
            };
            action: {
                button: string;
                sections: Array<{
                    title?: string;
                    rows: Array<{
                        id: string;
                        title: string;
                        description?: string;
                    }>;
                }>;
            };
        } | {
            type: 'button';
            header?: {
                type: 'text';
                text: string;
            };
            body: {
                text: string;
            };
            footer?: {
                text: string;
            };
            action: {
                buttons: Array<{
                    type: 'reply';
                    reply: {
                        id: string;
                        title: string;
                    };
                }>;
            };
        };
    };
}) | ({
    channel: 'whatsapp';
    conversation?: string;
    customer?: string;
    /**
     * If true, message was automatically generated from a Kustomer workflow or auto-response feature. If set to true, this message will be excluded from reporting metrics. If false, message was created by a manual method.
     */
    auto?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    payload?: {
        [key: string]: unknown;
    };
} & {
    /**
     * WhatsApp templates are only officially supported for Kustomer native WhatsApp for now.
     */
    app: 'whatsapp';
    meta: {
        /**
         * Template IDs can be found at /v1/whatsapp/accounts/{accountId}/templates
         */
        template: string;
        components?: {
            header?: {
                type: 'text';
                /**
                 * A map of parameter indices to values. The keys of this map should be single digit, 1-indexed numbers (e.g. '{ 1: "{ "type": "text", "text": "YOUR_TEXT_GOES_HERE" }, 2: { ... } }')
                 */
                text: {
                    [key: string]: {
                        type?: 'text';
                        text?: string;
                    };
                };
            } | {
                type: 'image' | 'video' | 'document';
                attachment: string;
            };
            body?: {
                [key: string]: {
                    type?: 'text';
                    text?: string;
                };
            };
            /**
             * We currently only support parameterizing one button. The `index` and `sub_type` fields should be the same for all entries in this array, and the numbered parameters provided will only be applied to the button indexed by the `index` value provided.
             */
            buttons?: Array<{
                index: number;
                sub_type: 'url';
                [key: string]: {
                    type?: 'text';
                    text?: string;
                } | number | 'url';
            }>;
        };
    };
}) | {
    channel: 'chat';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    /**
     * A timestamp for a future date/time the drafted message to be sent at.
     */
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
    attachments?: Array<string>;
} | {
    channel: 'facebook';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    /**
     * A timestamp for a future date/time the drafted message to be sent at.
     */
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
} | {
    channel: 'twitter-tweet';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    /**
     * A timestamp for a future date/time the drafted message to be sent at.
     */
    sendAt?: string;
    source?: 'bulk' | 'satisfaction';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
} | {
    channel: 'twitter-dm';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    /**
     * A timestamp for a future date/time the drafted message to be sent at.
     */
    sendAt?: string;
    source?: 'bulk' | 'satisfaction';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
} | {
    channel: 'note';
    conversation?: string;
    customer?: string;
    /**
     * A timestamp for a future date/time the drafted message to be sent at.
     */
    sendAt?: string | null;
    source?: 'bulk';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
    userMentions?: Array<{
        user?: string;
        team?: string;
    }>;
} | {
    channel: 'instagram';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    /**
     * A timestamp for a future date/time the drafted message to be sent at.
     */
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
};

export type CreateaDraftbyCustomerResponseCreateanEmailDraft = {
    data: {
        id: string;
        type: string;
        attributes: {
            channel: string;
            status: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
        };
        relationships: {
            org: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            customer: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            createdBy: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            modifiedBy: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
        };
    };
};

export type GetaCustomerEventResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            type: string;
            publishedAt: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string | null;
            changes: {
                attributes: {
                    conversationCounts: {
                        op: string;
                        before: {
                            all: number;
                            snoozed: number;
                            open: number;
                            done: number;
                        };
                        after: {
                            all: number;
                            snoozed: number;
                            open: number;
                            done: number;
                        };
                    };
                    progressiveStatus: {
                        op: string;
                        before: string | null;
                        after: string;
                    };
                    rev: {
                        op: string;
                        before: number;
                        after: number;
                    };
                };
                relationships: {
                    [key: string]: unknown;
                };
            };
            location: string | null;
            meta: string | null;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: string | null;
            modifiedBy: string | null;
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetallEventsbyCustomerforSessionResponseSuccess = {
    meta: {
        [key: string]: unknown;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            name: string;
            trackingEvent: string;
            app: string | null;
            publishedAt: string;
            createdAt: string;
            location: {
                countryCode: string;
                countryName: string;
                regionCode: string;
                cityName: string;
                zipCode: string;
                latitude: number;
                longitude: number;
                areaCode: string;
                regionName: string;
            };
            meta: {
                statusStr: string;
            };
            sessionId: string;
            realIp: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: string | null;
            modifiedBy: string | null;
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type GetallCustomerEventsResponseSuccess = {
    meta: {
        [key: string]: unknown;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            name: string;
            type: string;
            publishedAt: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string | null;
            location: string | null;
            meta: string | null;
            changes?: {
                attributes: {
                    conversationCounts?: {
                        op: string;
                        before: {
                            all: number;
                            snoozed: number;
                            open: number;
                            done: number;
                        };
                        after: {
                            all: number;
                            snoozed: number;
                            open: number;
                            done: number;
                        };
                    };
                    progressiveStatus?: {
                        op: string;
                        before: string | null;
                        after: string;
                    };
                    rev: {
                        op: string;
                        before: number;
                        after: number;
                    };
                    presence?: {
                        op: string;
                        before: string | null;
                        after: string;
                    };
                    updatedAt?: {
                        op: string;
                        before: string;
                        after: string;
                    };
                    lastSeenAt?: {
                        op: string;
                        before: string | null;
                        after: string;
                    };
                    lastActivityAt?: {
                        op: string;
                        before: string;
                        after: string;
                    };
                    lastCustomerActivityAt?: {
                        op: string;
                        before: string | null;
                        after: string;
                    };
                };
                relationships: {
                    [key: string]: unknown;
                };
            };
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: string | null;
            modifiedBy: string | null;
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation?: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            message?: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type GetCustomerSessionsResponseSuccess = {
    meta: {
        [key: string]: unknown;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            sessionId: string;
            firstEventAt: string;
            lastEventAt: string;
            count: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type CreateCustomerKObjectRequest = {
    customer?: string;
    company?: string;
    externalId?: string;
    title: string;
    description?: string;
    images?: Array<string>;
    icon?: string;
    data?: {
        [key: string]: unknown;
    };
    custom?: {
        [key: string]: never;
    };
    tags?: Array<string>;
    createdAt?: string;
    importedAt?: string;
};

export type CreateCustomerKObjectResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            title: string;
            icon: string;
            images: Array<string>;
            custom: {
                orderStatusStr: string;
                shippingStatusStr: string;
                billingStatusStr: string;
                specialInstructionsStr: string;
                orderNumberNum: number;
                orderDescriptionStr: string;
                totalPriceNum: number;
                orderUpdatedAt: string;
            };
            tags: Array<unknown>;
            updatedAt: string;
            createdAt: string;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            klass: {
                link: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type FindCustomerKObjectsResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            title: string;
            description?: string;
            icon: string;
            images: Array<string>;
            s3DataUrl?: string;
            custom: {
                orderStatusStr: string;
                shippingStatusStr: string;
                billingStatusStr: string;
                specialInstructionsStr: string;
                orderNumberNum: number;
                orderDescriptionStr: string;
                totalPriceNum: number;
                orderUpdatedAt: string;
            };
            tags: Array<unknown>;
            updatedAt: string;
            createdAt: string;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            klass: {
                link: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type FindCompanyKObjectsResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            title: string;
            icon: string;
            images: Array<string>;
            s3DataUrl?: string;
            custom: {
                [key: string]: unknown;
            };
            tags: Array<unknown>;
            updatedAt: string;
            createdAt: string;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            klass: {
                link: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            company: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type CreateaCustomerMergeRequest = {
    source: string;
    target: string;
};

export type CreateaCustomerMergeResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            status: string;
            createdAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            source: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            target: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetaCustomerMergeResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            status: string;
            createdAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            source: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            target: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetCustomerMergesbyCustomerResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            status: string;
            createdAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            source: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            target: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type CreateaMessagebyCustomerRequest = {
    id?: string;
    externalId?: string;
    conversation?: string;
    reference?: {
        message: string;
        type: 'reply' | 'replyAll' | 'forward';
    };
    channel: 'email' | 'sms' | 'chat' | 'facebook' | 'twitter-dm' | 'twitter-tweet' | 'voice' | 'instagram' | 'whatsapp';
    preview?: string;
    subject?: string;
    direction?: 'in' | 'out';
    app: string;
    size?: number;
    related?: string;
    status?: 'sent' | 'received' | 'error';
    error?: {
        status?: number;
        code?: string;
        title?: string;
        detail?: string;
        source?: {
            [key: string]: unknown;
        };
        meta?: {
            [key: string]: unknown;
        };
        links?: {
            [key: string]: unknown;
        };
    };
    errorAt?: string;
    auto?: boolean;
    sentAt?: string;
    source?: 'bulk' | 'satisfaction';
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    attachments?: Array<{
        _id: string;
        name: string;
        contentType: string;
        contentLength: number;
        sourceId?: string;
    }> | Array<string>;
    location?: {
        name?: string;
        address?: string;
        address2?: string;
        address3?: string;
        latitude?: number;
        longitude?: number;
        countryCode?: string;
        countryName?: string;
        regionCode?: string;
        regionName?: string;
        cityName?: string;
        zipCode?: string;
        areaCode?: string;
    };
    meta?: {
        [key: string]: unknown;
    };
    custom?: {
        [key: string]: never;
    };
    sentiment?: {
        polarity: -1 | 0 | 1;
        confidence: number;
    };
    createdAt?: string;
    modifiedAt?: string;
    createdBy?: string;
    modifiedBy?: string;
    importedAt?: string;
    lang?: string | null;
    queue?: unknown & {
        id?: string;
        external?: 'amazon-connect';
    };
};

export type CreateaMessagebyCustomerResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            channel: string;
            app: string;
            size: number;
            direction: string;
            meta: {
                [key: string]: unknown;
            };
            status: string;
            sentAt: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetMessagesbyCustomerResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            externalId: string;
            channel: string;
            app: string;
            size: number;
            direction: string;
            preview: string;
            sentiment: {
                [key: string]: unknown;
            };
            meta: {
                inReplyTo: string;
                recipient: {
                    mailboxHash: string;
                    email: string;
                };
                cc: Array<unknown>;
                to: Array<{
                    email: string;
                }>;
                from: string;
                subject: string;
            };
            status: string;
            sentAt: string;
            createdAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
            related: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type GetNotesbyCustomerResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            body: string;
            createdAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            userMentions: {
                data: Array<{
                    type: string;
                    id: string;
                }>;
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type CreateaCustomerRequest = {
    name?: string | null;
    company?: string | null;
    externalId?: string | null;
    username?: string | null;
    signedUpAt?: string | null;
    lastActivityAt?: string | null;
    lastCustomerActivityAt?: string | null;
    lastSeenAt?: string | null;
    avatarUrl?: string | null;
    externalIds?: Array<{
        externalId: string;
        verified?: boolean;
    }>;
    sharedExternalIds?: Array<{
        externalId: string;
        verified?: boolean;
    }>;
    emails?: Array<{
        type?: 'home' | 'work' | 'other';
        email: string;
        verified?: boolean;
    }>;
    sharedEmails?: Array<{
        type?: 'home' | 'work' | 'other';
        email: string;
        verified?: boolean;
    }>;
    phones?: Array<{
        type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
        phone: string;
        verified?: boolean;
    }>;
    sharedPhones?: Array<{
        type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
        phone: string;
        verified?: boolean;
    }>;
    whatsapps?: Array<{
        type?: 'mobile';
        phone: string;
        verified?: boolean;
    }>;
    facebookIds?: Array<{
        pageId: string;
        userId: string;
        name?: string;
    }>;
    instagramIds?: Array<{
        pageId: string;
        threadId: string;
        username: string;
        instagramId?: string;
    }>;
    socials?: Array<{
        type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
        userid?: string;
        username: string;
        url?: string;
        verified?: boolean;
    }>;
    sharedSocials?: Array<{
        type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
        userid?: string;
        username: string;
        url?: string;
        verified?: boolean;
    }>;
    urls?: Array<{
        type?: 'website' | 'blog' | 'other';
        url: string;
    }>;
    locations?: Array<{
        type?: 'home' | 'work' | 'other';
        name?: string | null;
        address?: string | null;
        address2?: string | null;
        address3?: string | null;
        latitude?: number | null;
        longitude?: number | null;
        countryCode?: string | null;
        countryName?: string | null;
        regionCode?: string | null;
        regionName?: string | null;
        cityName?: string | null;
        zipCode?: string | null;
        areaCode?: string | null;
    }>;
    locale?: string | null;
    timeZone?: string | null;
    tags?: Array<string>;
    sentiment?: {
        polarity: -1 | 0 | 1;
        confidence: number;
    };
    custom?: {
        [key: string]: never;
    };
    birthdayAt?: string | null;
    gender?: 'm' | 'f';
    createdAt?: string;
    importedAt?: string;
    rev?: number;
    defaultLang?: string | null;
};

export type CreateaCustomerResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            displayName: string;
            displayColor: string;
            displayIcon: string;
            externalIds: Array<unknown>;
            sharedExternalIds: Array<unknown>;
            emails: Array<{
                email: string;
                verified: boolean;
                type: string;
                id: string | null;
            }>;
            sharedEmails: Array<unknown>;
            phones: Array<{
                phone: string;
                verified: boolean;
                type: string;
                id: string | null;
            }>;
            sharedPhones: Array<unknown>;
            socials: Array<{
                type: string;
                userid: string;
                username: string;
                url: string;
                verified: boolean;
                id: string | null;
            }>;
            sharedSocials: Array<unknown>;
            urls: Array<{
                url: string;
                type: string;
                id: string | null;
            }>;
            locations: Array<{
                type: string;
                address: string;
                id: string | null;
            }>;
            activeUsers: Array<unknown>;
            watchers: Array<unknown>;
            recentLocation: {
                updatedAt: string;
            };
            locale: string;
            defaultLang: string;
            gender: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            lastActivityAt: string;
            lastConversation: {
                tags: Array<unknown>;
            };
            conversationCounts: {
                all: number;
                snoozed: number;
                open: number;
                done: number;
            };
            tags: Array<string>;
            progressiveStatus: string | null;
            verified: boolean;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetCustomersResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
        total: number;
        totalPages: number;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            name: string;
            displayName: string;
            displayColor: string;
            displayIcon: string;
            externalIds: Array<unknown>;
            sharedExternalIds: Array<unknown>;
            emails: Array<{
                email: string;
                verified: boolean;
                type: string;
            }>;
            sharedEmails: Array<unknown>;
            phones: Array<{
                phone: string;
                verified: boolean;
                type: string;
            }>;
            sharedPhones: Array<unknown>;
            socials: Array<{
                type: string;
                userid: string;
                username: string;
                url: string;
                verified: boolean;
            }>;
            sharedSocials: Array<unknown>;
            urls: Array<{
                url: string;
                type: string;
            }>;
            locations: Array<{
                type: string;
                address: string;
            }>;
            activeUsers: Array<unknown>;
            watchers: Array<unknown>;
            recentLocation: {
                updatedAt: string;
            };
            locale: string;
            gender: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            lastActivityAt: string;
            lastMessageIn: {
                sentiment: {
                    [key: string]: unknown;
                };
            };
            lastConversation: {
                tags: Array<unknown>;
                sentiment: {
                    [key: string]: unknown;
                };
            };
            conversationCounts: {
                done: number;
                open: number;
                snoozed: number;
                all: number;
            };
            preview: {
                [key: string]: unknown;
            };
            tags: Array<string>;
            progressiveStatus: string | null;
            verified: boolean;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
        last: string;
    };
};

export type GetCustomerbyIdResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            displayName: string;
            displayColor: string;
            displayIcon: string;
            externalId: string;
            externalIds: Array<{
                externalId: string;
                verified: boolean;
                id: string | null;
            }>;
            sharedExternalIds: Array<unknown>;
            signedUpAt: string | null;
            avatarUrl: string | null;
            username: string | null;
            emails: Array<{
                email: string;
                verified: boolean;
                type: string;
                id: string | null;
            }>;
            sharedEmails: Array<{
                email: string;
                verified: boolean;
                type: string;
                id: string | null;
            }>;
            phones: Array<unknown>;
            sharedPhones: Array<unknown>;
            socials: Array<unknown>;
            sharedSocials: Array<unknown>;
            urls: Array<unknown>;
            locations: Array<unknown>;
            activeUsers: Array<unknown>;
            watchers: Array<unknown>;
            recentLocation: {
                updatedAt: string;
            };
            locale: string | null;
            timeZone: string | null;
            birthdayAt: string | null;
            gender: string | null;
            presence: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            lastSeenAt: string;
            lastActivityAt: string;
            lastCustomerActivityAt: string;
            lastMessageIn: {
                sentAt: string;
                sentiment: string | null;
            };
            lastConversation: {
                id: string;
                sentiment: {
                    confidence: number;
                    polarity: number;
                };
                tags: Array<unknown>;
            };
            conversationCounts: {
                all: number;
                snoozed: number;
                open: number;
                done: number;
            };
            preview: {
                previewAt: string;
                type: string;
                text: string;
                subject: string;
            };
            tags: Array<unknown>;
            sentiment: {
                polarity: number;
                confidence: number;
            };
            progressiveStatus: string;
            verified: boolean;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetCustomerbyEmailResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            displayName: string;
            displayColor: string;
            displayIcon: string;
            externalId: string;
            externalIds: Array<{
                externalId: string;
                verified: boolean;
                id: string | null;
            }>;
            sharedExternalIds: Array<unknown>;
            signedUpAt: string | null;
            avatarUrl: string | null;
            username: string | null;
            emails: Array<{
                email: string;
                verified: boolean;
                type: string;
                id: string | null;
            }>;
            sharedEmails: Array<{
                email: string;
                verified: boolean;
                type: string;
                id: string | null;
            }>;
            phones: Array<unknown>;
            sharedPhones: Array<unknown>;
            socials: Array<unknown>;
            sharedSocials: Array<unknown>;
            urls: Array<unknown>;
            locations: Array<unknown>;
            activeUsers: Array<unknown>;
            watchers: Array<unknown>;
            recentLocation: {
                updatedAt: string;
            };
            locale: string | null;
            timeZone: string | null;
            birthdayAt: string | null;
            gender: string | null;
            presence: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            lastSeenAt: string;
            lastActivityAt: string;
            lastCustomerActivityAt: string;
            lastMessageIn: {
                sentAt: string;
                sentiment: string | null;
            };
            lastConversation: {
                id: string;
                sentiment: {
                    confidence: number;
                    polarity: number;
                };
                tags: Array<unknown>;
            };
            conversationCounts: {
                all: number;
                snoozed: number;
                open: number;
                done: number;
            };
            preview: {
                previewAt: string;
                type: string;
                text: string;
                subject: string;
            };
            tags: Array<unknown>;
            sentiment: {
                polarity: number;
                confidence: number;
            };
            progressiveStatus: string;
            verified: boolean;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetCustomerbyExternalIdResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            displayName: string;
            displayColor: string;
            displayIcon: string;
            externalId: string;
            externalIds: Array<{
                externalId: string;
                verified: boolean;
                id: string | null;
            }>;
            sharedExternalIds: Array<unknown>;
            signedUpAt: string | null;
            avatarUrl: string | null;
            username: string | null;
            emails: Array<{
                email: string;
                verified: boolean;
                type: string;
                id: string | null;
            }>;
            sharedEmails: Array<{
                email: string;
                verified: boolean;
                type: string;
                id: string | null;
            }>;
            phones: Array<unknown>;
            sharedPhones: Array<unknown>;
            socials: Array<unknown>;
            sharedSocials: Array<unknown>;
            urls: Array<unknown>;
            locations: Array<unknown>;
            activeUsers: Array<unknown>;
            watchers: Array<unknown>;
            recentLocation: {
                updatedAt: string;
            };
            locale: string | null;
            timeZone: string | null;
            birthdayAt: string | null;
            gender: string | null;
            presence: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            lastSeenAt: string;
            lastActivityAt: string;
            lastCustomerActivityAt: string;
            lastMessageIn: {
                sentAt: string;
                sentiment: string | null;
            };
            lastConversation: {
                id: string;
                sentiment: {
                    confidence: number;
                    polarity: number;
                };
                tags: Array<unknown>;
            };
            conversationCounts: {
                all: number;
                snoozed: number;
                open: number;
                done: number;
            };
            preview: {
                previewAt: string;
                type: string;
                text: string;
                subject: string;
            };
            tags: Array<unknown>;
            sentiment: {
                polarity: number;
                confidence: number;
            };
            progressiveStatus: string;
            verified: boolean;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetCustomerbyPhoneResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            displayName: string;
            displayColor: string;
            displayIcon: string;
            externalId: string;
            externalIds: Array<{
                externalId: string;
                verified: boolean;
                id: string | null;
            }>;
            sharedExternalIds: Array<unknown>;
            signedUpAt: string | null;
            avatarUrl: string | null;
            username: string | null;
            emails: Array<{
                email: string;
                verified: boolean;
                type: string;
                id: string | null;
            }>;
            sharedEmails: Array<{
                email: string;
                verified: boolean;
                type: string;
                id: string | null;
            }>;
            phones: Array<{
                phone: string;
                type: string;
            }>;
            sharedPhones: Array<unknown>;
            socials: Array<unknown>;
            sharedSocials: Array<unknown>;
            urls: Array<unknown>;
            locations: Array<unknown>;
            activeUsers: Array<unknown>;
            watchers: Array<unknown>;
            recentLocation: {
                updatedAt: string;
            };
            locale: string | null;
            timeZone: string | null;
            birthdayAt: string | null;
            gender: string | null;
            presence: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            lastSeenAt: string;
            lastActivityAt: string;
            lastCustomerActivityAt: string;
            lastMessageIn: {
                sentAt: string;
                sentiment: string | null;
            };
            lastConversation: {
                id: string;
                sentiment: {
                    confidence: number;
                    polarity: number;
                };
                tags: Array<unknown>;
            };
            conversationCounts: {
                all: number;
                snoozed: number;
                open: number;
                done: number;
            };
            preview: {
                previewAt: string;
                type: string;
                text: string;
                subject: string;
            };
            tags: Array<unknown>;
            sentiment: {
                polarity: number;
                confidence: number;
            };
            progressiveStatus: string;
            verified: boolean;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type UpdateCustomerRequest = {
    name?: string | null;
    company?: string | null;
    externalId?: string | null;
    username?: string | null;
    signedUpAt?: string | null;
    lastActivityAt?: string | null;
    lastCustomerActivityAt?: string | null;
    lastSeenAt?: string | null;
    avatarUrl?: string | null;
    externalIds?: Array<{
        externalId: string;
        verified?: boolean;
    }>;
    sharedExternalIds?: Array<{
        externalId: string;
        verified?: boolean;
    }>;
    emails?: Array<{
        type?: 'home' | 'work' | 'other';
        email: string;
        verified?: boolean;
    }>;
    sharedEmails?: Array<{
        type?: 'home' | 'work' | 'other';
        email: string;
        verified?: boolean;
    }>;
    phones?: Array<{
        type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
        phone: string;
        verified?: boolean;
    }>;
    sharedPhones?: Array<{
        type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
        phone: string;
        verified?: boolean;
    }>;
    whatsapps?: Array<{
        type?: 'mobile';
        phone: string;
        verified?: boolean;
    }>;
    facebookIds?: Array<{
        pageId: string;
        userId: string;
        name?: string;
    }>;
    instagramIds?: Array<{
        pageId: string;
        threadId: string;
        username: string;
        instagramId?: string;
    }>;
    socials?: Array<{
        type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
        userid?: string;
        username: string;
        url?: string;
        verified?: boolean;
    }>;
    sharedSocials?: Array<{
        type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
        userid?: string;
        username: string;
        url?: string;
        verified?: boolean;
    }>;
    urls?: Array<{
        type?: 'website' | 'blog' | 'other';
        url: string;
    }>;
    locations?: Array<{
        type?: 'home' | 'work' | 'other';
        name?: string | null;
        address?: string | null;
        address2?: string | null;
        address3?: string | null;
        latitude?: number | null;
        longitude?: number | null;
        countryCode?: string | null;
        countryName?: string | null;
        regionCode?: string | null;
        regionName?: string | null;
        cityName?: string | null;
        zipCode?: string | null;
        areaCode?: string | null;
    }>;
    locale?: string | null;
    timeZone?: string | null;
    tags?: Array<string>;
    sentiment?: {
        polarity: -1 | 0 | 1;
        confidence: number;
    };
    custom?: {
        [key: string]: never;
    };
    birthdayAt?: string | null;
    gender?: 'm' | 'f';
    createdAt?: string;
    importedAt?: string;
    rev?: number;
    defaultLang?: string | null;
};

export type UpdateCustomerResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            displayName: string;
            displayColor: string;
            displayIcon: string;
            externalId: string;
            externalIds: Array<{
                externalId: string;
                verified: boolean;
                id: string | null;
            }>;
            sharedExternalIds: Array<unknown>;
            signedUpAt: string | null;
            avatarUrl: string | null;
            username: string | null;
            emails: Array<{
                type: string;
                email: string;
            }>;
            sharedEmails: Array<unknown>;
            phones: Array<{
                type: string;
                phone: string;
            }>;
            sharedPhones: Array<unknown>;
            socials: Array<{
                type: string;
                userid: string;
                username: string;
                url: string;
            }>;
            sharedSocials: Array<unknown>;
            urls: Array<{
                url: string;
            }>;
            locations: Array<{
                type: string;
                address: string;
            }>;
            activeUsers: Array<unknown>;
            watchers: Array<unknown>;
            recentLocation: {
                updatedAt: string;
            };
            locale: string;
            gender: string;
            tags: Array<string>;
            timeZone: string | null;
            birthdayAt: string | null;
            presence: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            lastSeenAt: string;
            lastActivityAt: string;
            lastCustomerActivityAt: string;
            lastMessageIn: {
                sentAt: string;
                sentiment: string | null;
            };
            lastConversation: {
                id: string;
                sentiment: {
                    confidence: number;
                    polarity: number;
                };
                tags: Array<unknown>;
            };
            defaultLang: string;
            conversationCounts: {
                all: number;
                snoozed: number;
                open: number;
                done: number;
            };
            preview: {
                previewAt: string;
                type: string;
                text: string;
                subject: string;
            };
            sentiment: {
                polarity: number;
                confidence: number;
            };
            progressiveStatus: string;
            verified: boolean;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type UpdateCustomerAttributesRequest = {
    name?: string | null;
    company?: string | null;
    externalId?: string | null;
    username?: string | null;
    signedUpAt?: string | null;
    lastActivityAt?: string | null;
    lastCustomerActivityAt?: string | null;
    lastSeenAt?: string | null;
    avatarUrl?: string | null;
    externalIds?: Array<{
        externalId: string;
        verified?: boolean;
    }>;
    sharedExternalIds?: Array<{
        externalId: string;
        verified?: boolean;
    }>;
    emails?: Array<{
        type?: 'home' | 'work' | 'other';
        email: string;
        verified?: boolean;
    }>;
    sharedEmails?: Array<{
        type?: 'home' | 'work' | 'other';
        email: string;
        verified?: boolean;
    }>;
    phones?: Array<{
        type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
        phone: string;
        verified?: boolean;
    }>;
    sharedPhones?: Array<{
        type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
        phone: string;
        verified?: boolean;
    }>;
    whatsapps?: Array<{
        type?: 'mobile';
        phone: string;
        verified?: boolean;
    }>;
    facebookIds?: Array<{
        pageId: string;
        userId: string;
        name?: string;
    }>;
    instagramIds?: Array<{
        pageId: string;
        threadId: string;
        username: string;
        instagramId?: string;
    }>;
    socials?: Array<{
        type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
        userid?: string;
        username: string;
        url?: string;
        verified?: boolean;
    }>;
    sharedSocials?: Array<{
        type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
        userid?: string;
        username: string;
        url?: string;
        verified?: boolean;
    }>;
    urls?: Array<{
        type?: 'website' | 'blog' | 'other';
        url: string;
    }>;
    locations?: Array<{
        type?: 'home' | 'work' | 'other';
        name?: string | null;
        address?: string | null;
        address2?: string | null;
        address3?: string | null;
        latitude?: number | null;
        longitude?: number | null;
        countryCode?: string | null;
        countryName?: string | null;
        regionCode?: string | null;
        regionName?: string | null;
        cityName?: string | null;
        zipCode?: string | null;
        areaCode?: string | null;
    }>;
    locale?: string | null;
    timeZone?: string | null;
    tags?: Array<string>;
    sentiment?: {
        polarity: -1 | 0 | 1;
        confidence: number;
    };
    custom?: {
        [key: string]: never;
    };
    birthdayAt?: string | null;
    gender?: 'm' | 'f';
    createdAt?: string;
    importedAt?: string;
    rev?: number;
    defaultLang?: string | null;
};

export type UpdateCustomerAttributesResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            displayName: string;
            displayColor: string;
            displayIcon: string;
            externalId: string;
            externalIds: Array<{
                externalId: string;
                verified: boolean;
                id: string | null;
            }>;
            sharedExternalIds: Array<unknown>;
            signedUpAt: string | null;
            avatarUrl: string | null;
            username: string | null;
            emails: Array<{
                type: string;
                email: string;
            }>;
            sharedEmails: Array<unknown>;
            phones: Array<{
                type: string;
                phone: string;
            }>;
            sharedPhones: Array<unknown>;
            socials: Array<{
                type: string;
                userid: string;
                username: string;
                url: string;
            }>;
            sharedSocials: Array<unknown>;
            urls: Array<{
                url: string;
            }>;
            locations: Array<{
                type: string;
                address: string;
            }>;
            activeUsers: Array<unknown>;
            watchers: Array<unknown>;
            recentLocation: {
                updatedAt: string;
            };
            locale: string;
            gender: string;
            tags: Array<string>;
            timeZone: string | null;
            birthdayAt: string | null;
            presence: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            lastSeenAt: string;
            lastActivityAt: string;
            lastCustomerActivityAt: string;
            lastMessageIn: {
                sentAt: string;
                sentiment: string | null;
            };
            lastConversation: {
                id: string;
                sentiment: {
                    confidence: number;
                    polarity: number;
                };
                tags: Array<unknown>;
            };
            defaultLang: string;
            conversationCounts: {
                all: number;
                snoozed: number;
                open: number;
                done: number;
            };
            preview: {
                previewAt: string;
                type: string;
                text: string;
                subject: string;
            };
            sentiment: {
                polarity: number;
                confidence: number;
            };
            progressiveStatus: string;
            verified: boolean;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            messages: {
                links: {
                    self: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type ExternalId = {
    externalId: string;
    verified?: boolean;
};

export type FacebookId = {
    pageId: string;
    userId: string;
    name?: string;
};

export type InstagramId = {
    pageId: string;
    threadId: string;
    username: string;
    instagramId?: string;
};

export type GetCustomAttributeMetadataResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            properties: {
                shopifyCustomerIdNum: {
                    type: string;
                    displayName: string;
                };
                myCustomStr: {
                    modifiedBy: string;
                    modifiedAt: string;
                    updatedAt: string;
                    type: string;
                    enumeration: Array<string>;
                    displayName: string;
                };
                ordersId: {
                    modifiedBy: string;
                    modifiedAt: string;
                    updatedAt: string;
                    type: string;
                    target: string;
                    multi: boolean;
                    displayName: string;
                };
            };
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type UpdateCustomAttributeMetadataRequest = {
    standardProperties?: {
        [key: string]: unknown;
    };
    relationships?: {
        [key: string]: never;
    };
    properties?: {
        [key: string]: never;
    };
    validations?: Array<string>;
};

export type UpdateCustomAttributeMetadataResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            properties: {
                shopifyCustomerIdNum: {
                    type: string;
                    displayName: string;
                };
                myCustomStr: {
                    modifiedBy: string;
                    modifiedAt: string;
                    updatedAt: string;
                    type: string;
                    enumeration: Array<string>;
                    displayName: string;
                    sensitive?: {
                        enabled?: boolean;
                        maskType?: string;
                    };
                };
                ordersId: {
                    modifiedBy: string;
                    modifiedAt: string;
                    updatedAt: string;
                    type: string;
                    target: string;
                    multi: boolean;
                    displayName: string;
                };
            };
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type BulkCreateKObjectsRequest = Array<{
    customer?: string;
    company?: string;
    externalId?: string;
    title: string;
    description?: string;
    images?: Array<string>;
    icon?: string;
    data?: {
        [key: string]: unknown;
    };
    custom?: {
        [key: string]: never;
    };
    tags?: Array<string>;
    createdAt?: string;
    importedAt?: string;
}>;

export type BulkCreateKObjectsResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            ids: Array<unknown>;
            context: string;
            status: string;
            v2: boolean;
            payload: {
                api: {
                    data: Array<{
                        title: string;
                        customer: string;
                        externalId: string;
                        description: string;
                    }>;
                    path: string;
                    user: {
                        id: string;
                        userType: string;
                        roles: Array<string>;
                        orgName: string;
                        subject: string;
                        org: string;
                    };
                    requestId: string;
                    service: string;
                    method: string;
                };
            };
            createdAt: string;
            updatedAt: string;
            completed: boolean;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type BulkBatchUpdateKObjectsRequest = Array<{
    id: string;
    externalId?: string;
    title?: string;
    description?: string;
    images?: Array<string>;
    icon?: string;
    data?: {
        [key: string]: unknown;
    };
    custom?: {
        [key: string]: never;
    };
    tags?: Array<string>;
    createdAt?: string;
    importedAt?: string;
    rev?: number;
}>;

export type BulkBatchUpdateKObjectsResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            ids: Array<unknown>;
            context: string;
            status: string;
            v2: boolean;
            payload: {
                api: {
                    data: Array<{
                        id: string;
                        custom: {
                            shippingStatusStr: string;
                        };
                    }>;
                    path: string;
                    user: {
                        id: string;
                        userType: string;
                        roles: Array<string>;
                        orgName: string;
                        subject: string;
                        org: string;
                    };
                    requestId: string;
                    service: string;
                    method: string;
                };
            };
            createdAt: string;
            updatedAt: string;
            completed: boolean;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type BulkDeleteKObjectsResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            ids: Array<string>;
            context: string;
            status: string;
            v2: boolean;
            payload: {
                api: {
                    data: {
                        [key: string]: unknown;
                    };
                    path: string;
                    user: {
                        id: string;
                        userType: string;
                        roles: Array<string>;
                        orgName: string;
                        subject: string;
                        org: string;
                    };
                    requestId: string;
                    service: string;
                    method: string;
                };
            };
            createdAt: string;
            updatedAt: string;
            completed: boolean;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type KobjectResponseFirstDone = {
    time?: number;
    businessTime?: number;
    createdAt?: string;
    createdBy?: string;
    createdByTeam?: string;
    assignedTeam?: string;
    assignedUser?: string;
    commentCount?: number;
};

export type KobjectResponseLastDone = {
    time?: number;
    businessTime?: number;
    createdAt?: string;
    createdBy?: string;
    createdByTeam?: string;
    assignedTeam?: string;
    assignedUser?: string;
    commentCount?: number;
};

export type GetKObjectsResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            title: string;
            icon: string;
            images: Array<string>;
            s3DataUrl?: string;
            custom: {
                [key: string]: unknown;
            };
            tags: Array<unknown>;
            updatedAt: string;
            createdAt: string;
            rev: number;
            klassDisplayName?: string;
            klassMixins?: Array<'assignable'>;
            firstDone?: {
                time?: number;
                businessTime?: number;
                createdAt?: string;
                createdBy?: string;
                createdByTeam?: string;
                assignedTeam?: string;
                assignedUser?: string;
                commentCount?: number;
            };
            lastDone?: {
                time?: number;
                businessTime?: number;
                createdAt?: string;
                createdBy?: string;
                createdByTeam?: string;
                assignedTeam?: string;
                assignedUser?: string;
                commentCount?: number;
            };
            doneCount?: number;
            reopenCount?: number;
            reopenFromDoneCount?: number;
            queue?: string;
            assignedUser?: string;
            status?: 'open' | 'done';
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            queue?: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            klass: {
                link: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type CreateKObjectRequest = {
    customer?: string;
    company?: string;
    externalId?: string;
    title: string;
    description?: string;
    images?: Array<string>;
    icon?: string;
    data?: {
        [key: string]: unknown;
    };
    custom?: {
        [key: string]: never;
    };
    tags?: Array<string>;
    createdAt?: string;
    importedAt?: string;
};

export type CreateKObjectResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            title: string;
            icon: string;
            images: Array<string>;
            custom: {
                orderStatusStr: string;
                shippingStatusStr: string;
                billingStatusStr: string;
                specialInstructionsStr: string;
                orderNumberNum: number;
                orderDescriptionStr: string;
                totalPriceNum: number;
                orderUpdatedAt: string;
            };
            tags: Array<unknown>;
            updatedAt: string;
            createdAt: string;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            klass: {
                link: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetKObjectResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            title: string;
            icon: string;
            images: Array<string>;
            custom: {
                orderStatusStr: string;
                shippingStatusStr: string;
                billingStatusStr: string;
                specialInstructionsStr: string;
                orderNumberNum: number;
                orderDescriptionStr: string;
                totalPriceNum: number;
                orderUpdatedAt: string;
            };
            tags: Array<unknown>;
            updatedAt: string;
            createdAt: string;
            rev: number;
            firstDone?: {
                time?: number;
                businessTime?: number;
                createdAt?: string;
                createdBy?: string;
                createdByTeam?: string;
                assignedTeam?: string;
                assignedUser?: string;
                commentCount?: number;
            };
            lastDone?: {
                time?: number;
                businessTime?: number;
                createdAt?: string;
                createdBy?: string;
                createdByTeam?: string;
                assignedTeam?: string;
                assignedUser?: string;
                commentCount?: number;
            };
            doneCount?: number;
            reopenCount?: number;
            reopenFromDoneCount?: number;
            queue?: string;
            assignedUser?: string;
            status?: 'open' | 'done';
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            klass: {
                link: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type UpdateKObjectRequest = {
    externalId?: string;
    title?: string;
    description?: string;
    images?: Array<string>;
    icon?: string;
    data?: {
        [key: string]: unknown;
    };
    custom?: {
        [key: string]: never;
    };
    tags?: Array<string>;
    createdAt?: string;
    importedAt?: string;
    rev?: number;
};

export type UpdateKObjectResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            title: string;
            description: string | null;
            icon: string;
            images: Array<string>;
            custom: {
                orderUpdatedAt: string;
                totalPriceNum: number;
                orderDescriptionStr: string;
                orderNumberNum: number;
                specialInstructionsStr: string;
                billingStatusStr: string;
                shippingStatusStr: string;
                orderStatusStr: string;
                refundedBool: boolean;
            };
            tags: Array<unknown>;
            updatedAt: string;
            createdAt: string;
            rev: number;
            firstDone?: {
                time?: number;
                businessTime?: number;
                createdAt?: string;
                createdBy?: string;
                createdByTeam?: string;
                assignedTeam?: string;
                assignedUser?: string;
                commentCount?: number;
            };
            lastDone?: {
                time?: number;
                businessTime?: number;
                createdAt?: string;
                createdBy?: string;
                createdByTeam?: string;
                assignedTeam?: string;
                assignedUser?: string;
                commentCount?: number;
            };
            doneCount?: number;
            reopenCount?: number;
            reopenFromDoneCount?: number;
            queue?: string;
            assignedUser?: string;
            status?: 'open' | 'done';
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            klass: {
                link: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type CreateaKlassRequest = {
    name: string;
    displayName?: string;
    icon?: string;
    color?: string;
    jsonSchema?: unknown;
    klassSchema?: 'task';
    mixins?: Array<'commentable' | 'assignable' | 'editable' | 'creatable'>;
    status?: 'enabled' | 'disabled';
};

export type CreateaKlassResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            status: string;
            updatedAt: string;
            createdAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            kobjects: {
                links: {
                    self: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetKlassesResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            name: string;
            displayName: string;
            icon?: string;
            color?: string;
            klassSchema?: string;
            appVersion?: string;
            appDisabled?: boolean;
            status: string;
            mixins?: Array<'commentable' | 'assignable' | 'editable' | 'creatable'>;
            updatedAt: string;
            createdAt: string;
            s3DataUrl?: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            kobjects: {
                links: {
                    self: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type GetKlassResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            displayName?: string;
            icon: string;
            color?: string;
            appDisabled?: boolean;
            status: string;
            mixins?: Array<'commentable' | 'assignable' | 'editable' | 'creatable'>;
            updatedAt: string;
            createdAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            kobjects: {
                links: {
                    self: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type UpdateaKlassRequest = {
    displayName?: string;
    icon?: string;
    color?: string;
    jsonSchema?: unknown;
    klassSchema?: 'task';
    mixins?: Array<'commentable' | 'assignable' | 'editable' | 'creatable'>;
    status?: 'enabled' | 'disabled';
};

export type UpdateaKlassResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            name: string;
            displayName?: string;
            appDisabled?: boolean;
            mixins?: Array<'commentable' | 'assignable' | 'editable' | 'creatable'>;
            icon: string;
            status: string;
            updatedAt: string;
            createdAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            kobjects: {
                links: {
                    self: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type CreateDraftAttachmentRequest = {
    name: string;
    contentType: string;
    contentLength: number;
};

export type CreateDraftAttachmentResponseSuccess = {
    data: {
        id: string;
        type: string;
        attributes: {
            name: string;
            contentType: string;
            contentLength: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            draft: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
            related: string;
        };
    };
};

export type GetDraftAttachmentsResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        id: string;
        type: string;
        attributes: {
            name: string;
            contentType: string;
            contentLength: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            draft: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type GetDraftAttachmentResponseSuccess = {
    data: {
        id: string;
        type: string;
        attributes: {
            name: string;
            contentType: string;
            contentLength: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            draft: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
            related: string;
        };
    };
};

export type CreateForwardAttachmentRequest = {
    name: string;
    contentType: string;
    contentLength: number;
};

export type CreateForwardAttachmentResponseSuccess = {
    data: {
        id: string;
        type: string;
        attributes: {
            name: string;
            contentType: string;
            contentLength: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            forward: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
            related: string;
        };
    };
};

export type GetForwardAttachmentsResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        id: string;
        type: string;
        attributes: {
            name: string;
            contentType: string;
            contentLength: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            forward: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type GetForwardAttachmentResponseSuccess = {
    data: {
        id: string;
        type: string;
        attributes: {
            name: string;
            contentType: string;
            contentLength: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            forward: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
            related: string;
        };
    };
};

export type GetaDraftForwardByIdResponseSuccess = {
    data: {
        id: string;
        type: string;
        attributes: {
            app: string;
            channel: string;
            body: string;
            status: string;
            from: {
                name: string;
                email: string;
            };
            to: Array<{
                name: string;
                email: string;
            }>;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
        };
        relationships: {
            org: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            customer: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            createdBy: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            modifiedBy: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            attachments?: Array<{
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            }>;
        };
    };
};

export type UpdateaDraftForwardRequest = {
    status?: 'draft' | 'sent' | 'failed';
    /**
     * A timestamp for a future date/time the drafted message to be sent at.
     */
    sendAt?: string;
    lang?: string | null;
    to?: Array<{
        email: string;
        name?: string;
    }>;
    from?: {
        email: string;
        name?: string;
    };
    body?: string;
    subject?: string;
    replyTo?: string;
    template?: string | null;
    payload?: {
        [key: string]: unknown;
    };
    attachments?: Array<{
        id: string;
        name: string;
        contentType: string;
        contentLength: number;
    }>;
};

export type UpdateaDraftForwardResponseSuccess = {
    data: {
        id: string;
        type: string;
        attributes: {
            app: string;
            channel: string;
            body: string;
            status: string;
            from: {
                name: string;
                email: string;
            };
            to: Array<{
                name: string;
                email: string;
            }>;
            /**
             * A timestamp for a future date/time the drafted message to be sent at.
             */
            sendAt: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
        };
        relationships: {
            org: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            customer: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            createdBy: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            modifiedBy: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            attachments?: Array<{
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            }>;
        };
    };
};

export type GetOutboundAccountsResponseSuccess = {
    meta: {
        [key: string]: unknown;
    };
    data: Array<{
        type: string;
        attributes: {
            channel: string;
            name: string;
            account: string;
        };
    }>;
    links: {
        self: string;
    };
};

export type UpdateaDraftRequest = {
    channel: 'email';
    conversation?: string;
    app?: 'gmail' | 'postmark';
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: Array<{
        email: string;
        name?: string;
    }> | {
        email: string;
        name?: string;
    };
    from?: {
        email: string;
        name?: string;
    };
    body?: string;
    htmlBody?: string;
    cc?: Array<{
        email: string;
        name?: string;
    }>;
    bcc?: Array<{
        email: string;
        name?: string;
    }>;
    subject?: string;
    replyTo?: string;
    headers?: Array<{
        name: string;
        value?: string;
    }>;
    templateType?: 'email-reply' | 'email-autoresponse' | 'email-satisfaction';
    template?: string | null;
    payload?: {
        [key: string]: unknown;
    };
} | {
    channel: 'sms';
    app?: 'twilio' | 'zipwhip' | 'messagebird';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
} | {
    channel: 'whatsapp';
    app: 'twilio_whatsapp' | 'messagebird' | 'whatsapp';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
} | {
    channel: 'chat';
    app?: 'chat' | 'smooch';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
    responseButtons?: Array<{
        label: string;
        value: string;
    }>;
    messageTemplate?: {
        id?: string;
        templateType: 'text';
        body: string;
    } | {
        id?: string;
        templateType: 'quick_replies';
        body?: string;
        actions: Array<{
            displayText: string;
            valueType: 'url' | 'text';
            value: string;
        }>;
    } | {
        id?: string;
        templateType: 'deflection';
        body?: string;
        actions: Array<{
            displayText: string;
            valueType: 'url' | 'text';
            value: string;
        }>;
        articles: Array<{
            id: string;
            type?: string;
            attributes?: {
                [key: string]: unknown;
            };
        }>;
        followupText?: string;
    } | {
        id?: string;
        templateType: 'mll';
        body?: string;
        actions: {
            tree: {
                [key: string]: unknown;
            };
        };
    };
    attachments?: Array<string>;
} | {
    channel: 'facebook';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
} | {
    channel: 'twitter-tweet';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
} | {
    channel: 'twitter-dm';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
} | {
    channel: 'note';
    conversation?: string;
    customer?: string;
    scheduled?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
    userMentions?: Array<{
        user?: string;
        team?: string;
    }>;
} | {
    channel: 'instagram';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
};

export type UpdateaDraftResponseSuccess = {
    data: {
        id: string;
        type: string;
        attributes: {
            channel: string;
            body: string;
            status: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
        };
        relationships: {
            org: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            customer: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            createdBy: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
            modifiedBy: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
        };
    };
};

export type DraftChat = {
    channel: 'chat';
    app?: 'chat' | 'smooch';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
    responseButtons?: Array<{
        label: string;
        value: string;
    }>;
    messageTemplate?: {
        id?: string;
        templateType: 'text';
        body: string;
    } | {
        id?: string;
        templateType: 'quick_replies';
        body?: string;
        actions: Array<{
            displayText: string;
            valueType: 'url' | 'text';
            value: string;
        }>;
    } | {
        id?: string;
        templateType: 'deflection';
        body?: string;
        actions: Array<{
            displayText: string;
            valueType: 'url' | 'text';
            value: string;
        }>;
        articles: Array<{
            id: string;
            type?: string;
            attributes?: {
                [key: string]: unknown;
            };
        }>;
        followupText?: string;
    } | {
        id?: string;
        templateType: 'mll';
        body?: string;
        actions: {
            tree: {
                [key: string]: unknown;
            };
        };
    };
    attachments?: Array<string>;
};

export type DraftEmail = {
    channel: 'email';
    conversation?: string;
    app?: 'gmail' | 'postmark';
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: Array<{
        email: string;
        name?: string;
    }> | {
        email: string;
        name?: string;
    };
    from?: {
        email: string;
        name?: string;
    };
    body?: string;
    htmlBody?: string;
    cc?: Array<{
        email: string;
        name?: string;
    }>;
    bcc?: Array<{
        email: string;
        name?: string;
    }>;
    subject?: string;
    replyTo?: string;
    headers?: Array<{
        name: string;
        value?: string;
    }>;
    templateType?: 'email-reply' | 'email-autoresponse' | 'email-satisfaction';
    template?: string | null;
    payload?: {
        [key: string]: unknown;
    };
};

export type DraftFacebook = {
    channel: 'facebook';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
};

export type DraftInstagram = {
    channel: 'instagram';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
};

export type DraftInstagramComment = {
    channel: 'instagram-comment';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
};

export type DraftNote = {
    channel: 'note';
    conversation?: string;
    customer?: string;
    scheduled?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
    userMentions?: Array<{
        user?: string;
        team?: string;
    }>;
};

export type DraftSms = {
    channel: 'sms';
    app?: 'twilio' | 'zipwhip' | 'messagebird';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
};

export type DraftTwitterDm = {
    channel: 'twitter-dm';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
};

export type DraftTwitterTweet = {
    channel: 'twitter-tweet';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
};

export type DraftWhatsapp = {
    channel: 'whatsapp';
    app: 'twilio_whatsapp' | 'messagebird' | 'whatsapp';
    conversation?: string;
    customer?: string;
    auto?: boolean;
    scheduled?: boolean;
    sendAt?: string | null;
    source?: 'bulk' | 'satisfaction' | 'biz-rules';
    lang?: string | null;
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    to?: string;
    from?: string;
    body?: string;
    payload?: {
        [key: string]: unknown;
    };
};

export type TemplateChat = {
    id?: string;
    templateType: 'text';
    body: string;
} | {
    id?: string;
    templateType: 'quick_replies';
    body?: string;
    actions: Array<{
        displayText: string;
        valueType: 'url' | 'text';
        value: string;
    }>;
} | {
    id?: string;
    templateType: 'deflection';
    body?: string;
    actions: Array<{
        displayText: string;
        valueType: 'url' | 'text';
        value: string;
    }>;
    articles: Array<{
        id: string;
        type?: string;
        attributes?: {
            [key: string]: unknown;
        };
    }>;
    followupText?: string;
} | {
    id?: string;
    templateType: 'mll';
    body?: string;
    actions: {
        tree: {
            [key: string]: unknown;
        };
    };
};

export type TemplateChatDeflection = {
    id?: string;
    templateType: 'deflection';
    body?: string;
    actions: Array<{
        displayText: string;
        valueType: 'url' | 'text';
        value: string;
    }>;
    articles: Array<{
        id: string;
        type?: string;
        attributes?: {
            [key: string]: unknown;
        };
    }>;
    followupText?: string;
};

export type TemplateChatMll = {
    id?: string;
    templateType: 'mll';
    body?: string;
    actions: {
        tree: {
            [key: string]: unknown;
        };
    };
};

export type TemplateChatQuickReplies = {
    id?: string;
    templateType: 'quick_replies';
    body?: string;
    actions: Array<{
        displayText: string;
        valueType: 'url' | 'text';
        value: string;
    }>;
};

export type TemplateChatText = {
    id?: string;
    templateType: 'text';
    body: string;
};

/**
 * Schema for media create operations
 */
export type CreateMediaRequest = {
    name: string;
    contentType: string;
    contentLength: number;
};

export type CreateMediaResponseSuccess = {
    data: {
        id: string;
        type: string;
        attributes: {
            name: string;
            contentType: string;
            contentLength: number;
            redacted: boolean;
            uploaded: boolean;
            createdAt: string;
            updatedAt: string;
            context: string;
        };
        relationships: {
            org: {
                data: {
                    id: string;
                    type: string;
                };
                links: {
                    self: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
    meta: {
        provider: string;
        upload: {
            url: string;
            fields: {
                key: string;
                acl: string;
                'Content-Type': string;
                'X-Amz-Meta-Attachment-Id': string;
                bucket: string;
                'X-Amz-Algorithm': string;
                'X-Amz-Credential': string;
                'X-Amz-Date': string;
                Policy: string;
                'X-Amz-Signature': string;
            };
        };
    };
};

export type GetMediabyIdResponseSuccess = {
    data: {
        id: string;
        type: string;
        attributes: {
            name: string;
            contentType: string;
            contentLength: number;
            redacted: boolean;
            uploaded: boolean;
            createdAt: string;
            updatedAt: string;
            context: string;
        };
        relationships: {
            org: {
                data: {
                    id: string;
                    type: string;
                };
                links: {
                    self: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
    meta: {
        provider: string;
        upload: {
            url: string;
            fields: {
                key: string;
                acl: string;
                'Content-Type': string;
                'X-Amz-Meta-Attachment-Id': string;
                bucket: string;
                'X-Amz-Algorithm': string;
                'X-Amz-Credential': string;
                'X-Amz-Date': string;
                Policy: string;
                'X-Amz-Signature': string;
            };
        };
    };
};

export type RedactMessageRequest = {
    preview?: string;
} | {
    attachments?: Array<string>;
} | {
    meta?: {
        [key: string]: unknown;
    };
};

export type RedactMessageResponseSuccess = {
    data: {
        id: string;
        type: string;
        attributes: {
            preview: string;
            meta?: string;
        };
        relationships: {
            org: {
                data: {
                    id: string;
                    type: string;
                };
                links: {
                    self: string;
                };
            };
            createdBy?: {
                data: {
                    id: string;
                    type: string;
                };
                links: {
                    self: string;
                };
            };
            message?: {
                data: {
                    id: string;
                    type: string;
                };
                links: {
                    self: string;
                };
            };
            conversation?: {
                data: {
                    id: string;
                    type: string;
                };
                links: {
                    self: string;
                };
            };
            customer?: {
                data: {
                    id: string;
                    type: string;
                };
                links: {
                    self: string;
                };
            };
            attachments?: Array<{
                data?: {
                    id: string;
                    type: string;
                };
                links?: {
                    self: string;
                };
            }>;
        };
    };
};

/**
 * Schema for media update operations
 */
export type UpdateMediaRequest = {
    name?: string;
    redacted?: boolean;
};

export type UpdateMediaResponseSuccess = {
    data: {
        id: string;
        type: string;
        attributes: {
            name: string;
            contentType: string;
            contentLength: number;
            redacted: boolean;
            uploaded: boolean;
            createdAt: string;
            updatedAt: string;
            context: string;
        };
        relationships: {
            org: {
                data: {
                    id: string;
                    type: string;
                };
                links: {
                    self: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
    meta: {
        provider: string;
        upload: {
            url: string;
            fields: {
                key: string;
                acl: string;
                'Content-Type': string;
                'X-Amz-Meta-Attachment-Id': string;
                bucket: string;
                'X-Amz-Algorithm': string;
                'X-Amz-Credential': string;
                'X-Amz-Date': string;
                Policy: string;
                'X-Amz-Signature': string;
            };
        };
    };
};

export type BulkBatchUpdateMessagesRequest = Array<{
    id: string;
    conversation?: string;
    externalId?: string | null;
    preview?: string | null;
    subject?: string | null;
    status?: 'sent' | 'received' | 'error';
    error?: {
        status?: number;
        code?: string;
        title?: string;
        detail?: string;
        source?: {
            [key: string]: unknown;
        };
        meta?: {
            [key: string]: unknown;
        };
        links?: {
            [key: string]: unknown;
        };
    };
    errorAt?: string;
    sentAt?: string | null;
    size?: number;
    attachments?: Array<{
        _id: string;
        name: string;
        contentType: string;
        contentLength: number;
        sourceId?: string;
    }>;
    meta?: {
        [key: string]: unknown;
    };
    custom?: {
        [key: string]: never;
    };
    related?: string;
    sentiment?: {
        polarity: -1 | 0 | 1;
        confidence: number;
    };
    createdAt?: string;
    modifiedAt?: string;
    updatedAt?: string;
    createdBy?: string;
    modifiedBy?: string | null;
    lang?: string | null;
}>;

export type BulkBatchUpdateMessagesResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            ids: Array<unknown>;
            context: string;
            status: string;
            v2: boolean;
            payload: {
                api: {
                    data: Array<{
                        id: string;
                        custom: {
                            foobar: boolean;
                        };
                    }>;
                    path: string;
                    user: {
                        id: string;
                        userType: string;
                        roles: Array<string>;
                        orgName: string;
                        subject: string;
                        org: string;
                    };
                    requestId: string;
                    service: string;
                    method: string;
                };
            };
            createdAt: string;
            updatedAt: string;
            completed: boolean;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type CreateMessageRequest = {
    id?: string;
    /**
     * The unique identifier from the channel the message. For example, a message ID from Instagram for a specific DM.
     */
    externalId?: string;
    /**
     * The customer's name
     */
    customer?: string;
    /**
     * The conversation ID of the conversation message is to be added to.
     */
    conversation?: string;
    reference?: {
        /**
         * For email channel only. The unique message ID for an email that is a reply, reply-all, or forward.
         */
        message: string;
        /**
         * Indicate if the message is a reply, reply-all, or forward.
         */
        type: 'reply' | 'replyAll' | 'forward';
    };
    /**
     * The communication channel of the message: email, SMS, chat, facebook, twitter-dm, twitter-tweet, voice, instagram, whatsapp
     */
    channel: 'email' | 'sms' | 'chat' | 'facebook' | 'twitter-dm' | 'twitter-tweet' | 'voice' | 'instagram' | 'whatsapp';
    preview?: string;
    subject?: string;
    /**
     * Indicates if the message is coming in from a customer or sent out by an agent.
     */
    direction: 'in' | 'out';
    app: string;
    size?: number;
    related?: string;
    status?: 'sent' | 'received' | 'error';
    error?: {
        status?: number;
        code?: string;
        title?: string;
        detail?: string;
        source?: {
            [key: string]: unknown;
        };
        meta?: {
            [key: string]: unknown;
        };
        links?: {
            [key: string]: unknown;
        };
    };
    /**
     * The timestamp for when the message errored out.
     */
    errorAt?: string;
    /**
     * If true, message was automatically generated from a Kustomer workflow or auto-response feature. If set to true, this message will be excluded from reporting metrics. If false, message was created by a manual method.
     */
    auto?: boolean;
    /**
     * The timestamp for when the message was sent.
     */
    sentAt?: string;
    /**
     * Indicate if the message is part of a bulk message (bulk) or CSAT (Customer Satisfaction Survey) (satisfaction) message.
     */
    source?: 'bulk' | 'satisfaction';
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    attachments?: Array<{
        _id: string;
        name: string;
        contentType: string;
        contentLength: number;
        sourceId?: string;
    }> | Array<string>;
    location?: {
        name?: string;
        address?: string;
        address2?: string;
        address3?: string;
        latitude?: number;
        longitude?: number;
        countryCode?: string;
        countryName?: string;
        regionCode?: string;
        regionName?: string;
        cityName?: string;
        zipCode?: string;
        areaCode?: string;
    };
    meta?: {
        [key: string]: unknown;
    };
    custom?: {
        [key: string]: never;
    };
    sentiment?: {
        polarity: -1 | 0 | 1;
        confidence: number;
    };
    createdAt?: string;
    modifiedAt?: string;
    createdBy?: string;
    modifiedBy?: string;
    importedAt?: string;
    /**
     * The language the message is in.
     */
    lang?: string | null;
    queue?: unknown & {
        id?: string;
        external?: 'amazon-connect';
    };
};

export type CreateMessageResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            channel: string;
            app: string;
            size: string;
            direction: string;
            preview: string;
            subject: string;
            meta: string;
            status: string;
            sentAt: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
            lang: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetMessagesResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            externalId: string;
            channel: string;
            app: string;
            size: number;
            direction: string;
            preview: string;
            sentiment: {
                [key: string]: unknown;
            };
            meta: {
                inReplyTo: string;
                recipient: {
                    mailboxHash: string;
                    email: string;
                };
                cc: Array<unknown>;
                to: Array<{
                    email: string;
                }>;
                from: string;
                subject: string;
            };
            status: string;
            sentAt: string;
            createdAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
            related: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type GetMessagesResponseUntitledResponse = {
    errors: Array<{
        status: string;
        code: string;
        title: string;
        source: {
            parameters: string;
        };
    }>;
};

export type GetaMessageResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            externalId: string;
            channel: string;
            app: string;
            size: number;
            direction: string;
            preview: string;
            sentiment: {
                confidence: number;
                polarity: number;
            };
            meta: {
                subject: string;
                from: string;
                to: Array<{
                    email: string;
                }>;
                cc: Array<unknown>;
                recipient: {
                    email: string;
                    mailboxHash: string;
                };
                inReplyTo: string;
            };
            status: string;
            lang: string;
            sentAt: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
            related: string;
        };
    };
};

export type GetaMessagebyExternalIdResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            externalId: string;
            channel: string;
            app: string;
            size: number;
            direction: string;
            preview: string;
            sentiment: {
                confidence: number;
                polarity: number;
            };
            meta: {
                subject: string;
                from: string;
                to: Array<{
                    email: string;
                }>;
                cc: Array<unknown>;
                recipient: {
                    email: string;
                    mailboxHash: string;
                };
                inReplyTo: string;
            };
            status: string;
            sentAt: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
            related: string;
        };
    };
};

export type UpdateaMessageRequest = {
    conversation?: string;
    externalId?: string | null;
    preview?: string | null;
    subject?: string | null;
    status?: 'sent' | 'received' | 'error';
    error?: {
        status?: number;
        code?: string;
        title?: string;
        detail?: string;
        source?: {
            [key: string]: unknown;
        };
        meta?: {
            [key: string]: unknown;
        };
        links?: {
            [key: string]: unknown;
        };
    };
    errorAt?: string;
    sentAt?: string | null;
    size?: number;
    attachments?: Array<{
        _id: string;
        name: string;
        contentType: string;
        contentLength: number;
        sourceId?: string;
    }>;
    meta?: {
        [key: string]: unknown;
    };
    custom?: {
        [key: string]: never;
    };
    related?: string;
    sentiment?: {
        polarity: -1 | 0 | 1;
        confidence: number;
    };
    createdAt?: string;
    modifiedAt?: string;
    updatedAt?: string;
    createdBy?: string;
    spam?: boolean;
    modifiedBy?: string | null;
    lang?: string | null;
    reactions?: Array<{
        subjectId: string;
        subjectType: 'customer' | 'user';
        name: 'love';
        createdAt?: string;
    }>;
};

export type UpdateaMessageResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            externalId: string;
            channel: string;
            app: string;
            size: number;
            direction: string;
            preview: string;
            sentiment: {
                confidence: number;
                polarity: number;
            };
            meta: {
                subject: string;
                from: string;
                to: Array<{
                    email: string;
                }>;
                cc: Array<unknown>;
                recipient: {
                    email: string;
                    mailboxHash: string;
                };
                inReplyTo: string;
            };
            status: string;
            lang: string;
            sentAt: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
            related: string;
        };
    };
};

export type UpdateMessageAttributesRequest = {
    conversation?: string;
    externalId?: string | null;
    preview?: string | null;
    subject?: string | null;
    status?: 'sent' | 'received' | 'error';
    error?: {
        status?: number;
        code?: string;
        title?: string;
        detail?: string;
        source?: {
            [key: string]: unknown;
        };
        meta?: {
            [key: string]: unknown;
        };
        links?: {
            [key: string]: unknown;
        };
    };
    errorAt?: string;
    sentAt?: string | null;
    size?: number;
    attachments?: Array<{
        _id: string;
        name: string;
        contentType: string;
        contentLength: number;
        sourceId?: string;
    }>;
    meta?: {
        [key: string]: unknown;
    };
    custom?: {
        [key: string]: never;
    };
    related?: string;
    sentiment?: {
        polarity: -1 | 0 | 1;
        confidence: number;
    };
    createdAt?: string;
    modifiedAt?: string;
    updatedAt?: string;
    createdBy?: string;
    modifiedBy?: string | null;
    lang?: string | null;
};

export type UpdateMessageAttributesResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            externalId: string;
            channel: string;
            app: string;
            size: number;
            direction: string;
            preview: string;
            sentiment: {
                confidence: number;
                polarity: number;
            };
            meta: {
                subject: string;
                from: string;
                to: Array<{
                    email: string;
                }>;
                cc: Array<unknown>;
                recipient: {
                    email: string;
                    mailboxHash: string;
                };
                inReplyTo: string;
            };
            status: string;
            lang: string | null;
            sentAt: string;
            createdAt: string;
            updatedAt: string;
            modifiedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
            related: string;
        };
    };
};

export type BulkCreateMessagesRequest = Array<{
    id?: string;
    externalId?: string;
    customer?: string;
    conversation?: string;
    reference?: {
        message: string;
        type: 'reply' | 'replyAll' | 'forward';
    };
    channel: 'email' | 'sms' | 'chat' | 'facebook' | 'twitter-dm' | 'twitter-tweet' | 'voice' | 'instagram' | 'whatsapp';
    preview?: string;
    subject?: string;
    direction?: 'in' | 'out';
    app: string;
    size?: number;
    related?: string;
    status?: 'sent' | 'received' | 'error';
    error?: {
        status?: number;
        code?: string;
        title?: string;
        detail?: string;
        source?: {
            [key: string]: unknown;
        };
        meta?: {
            [key: string]: unknown;
        };
        links?: {
            [key: string]: unknown;
        };
    };
    errorAt?: string;
    /**
     * If true, message was automatically generated from a Kustomer workflow or auto-response feature. If set to true, this message will be excluded from reporting metrics. If false, message was created by a manual method.
     */
    auto?: boolean;
    sentAt?: string;
    source?: 'bulk' | 'satisfaction';
    shortcuts?: Array<string>;
    kbArticles?: Array<string>;
    attachments?: Array<{
        _id: string;
        name: string;
        contentType: string;
        contentLength: number;
        sourceId?: string;
    }> | Array<string>;
    location?: {
        name?: string;
        address?: string;
        address2?: string;
        address3?: string;
        latitude?: number;
        longitude?: number;
        countryCode?: string;
        countryName?: string;
        regionCode?: string;
        regionName?: string;
        cityName?: string;
        zipCode?: string;
        areaCode?: string;
    };
    meta?: {
        [key: string]: unknown;
    };
    custom?: {
        [key: string]: never;
    };
    sentiment?: {
        polarity: -1 | 0 | 1;
        confidence: number;
    };
    createdAt?: string;
    modifiedAt?: string;
    createdBy?: string;
    modifiedBy?: string;
    importedAt?: string;
    lang?: string | null;
    queue?: unknown & {
        id?: string;
        external?: 'amazon-connect';
    };
}>;

export type BulkCreateMessagesResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            ids: Array<unknown>;
            context: string;
            status: string;
            v2: boolean;
            payload: {
                api: {
                    data: Array<{
                        id: string;
                        app: string;
                        channel: string;
                        preview: string;
                        subject: string;
                        size: number;
                        createdAt: string;
                    }>;
                    path: string;
                    user: {
                        id: string;
                        userType: string;
                        roles: Array<string>;
                        orgName: string;
                        subject: string;
                        org: string;
                    };
                    requestId: string;
                    service: string;
                    method: string;
                };
            };
            createdAt: string;
            updatedAt: string;
            completed: boolean;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type Reaction = {
    subjectId: string;
    subjectType: 'customer' | 'user';
    name: 'love';
    createdAt?: string;
};

export type BulkCreateNotesRequest = Array<{
    id?: string;
    conversation: string;
    externalId?: string;
    body: string;
    userMentions?: Array<{
        user?: string;
        team?: string;
    }>;
    attachments?: Array<{
        _id: string;
        name: string;
        contentType: string;
        contentLength: number;
        sourceId?: string;
    }>;
    createdAt?: string;
    modifiedAt?: string;
    createdBy?: string;
    modifiedBy?: string;
    importedAt?: string;
    lang?: string | null;
}>;

export type BulkCreateNotesResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            ids: Array<unknown>;
            context: string;
            status: string;
            v2: boolean;
            payload: {
                api: {
                    data: Array<{
                        conversation: string;
                        body: string;
                        userMentions: Array<{
                            user?: string;
                            team?: string;
                        }>;
                    }>;
                    path: string;
                    user: {
                        id: string;
                        userType: string;
                        roles: Array<string>;
                        orgName: string;
                        subject: string;
                        org: string;
                    };
                    requestId: string;
                    service: string;
                    method: string;
                };
            };
            createdAt: string;
            updatedAt: string;
            completed: boolean;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type BulkBatchUpdateNotesRequest = Array<{
    id: string;
    conversation?: string;
    externalId?: string | null;
    body?: string;
    userMentions?: Array<{
        user?: string;
        team?: string;
    }>;
    deleted?: boolean | null;
    attachments?: Array<{
        _id: string;
        name: string;
        contentType: string;
        contentLength: number;
        sourceId?: string;
    }>;
    createdAt?: string;
    modifiedAt?: string;
    updatedAt?: string;
    createdBy?: string;
    modifiedBy?: string | null;
    lang?: string | null;
}>;

export type BulkBatchUpdateNotesResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            ids: Array<unknown>;
            context: string;
            status: string;
            v2: boolean;
            payload: {
                api: {
                    data: Array<{
                        id: string;
                        tags: Array<string>;
                    }>;
                    path: string;
                    user: {
                        id: string;
                        userType: string;
                        roles: Array<string>;
                        orgName: string;
                        subject: string;
                        org: string;
                    };
                    requestId: string;
                    service: string;
                    method: string;
                };
            };
            createdAt: string;
            updatedAt: string;
            completed: boolean;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type CreateNoteResponseUntitledResponse = {
    data: {
        type: string;
        id: string;
        attributes: {
            body: string;
            externalId: string;
            createdAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            userMentions: {
                data: Array<{
                    type: string;
                    id: string;
                }>;
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetNotesforOrgResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            body: string;
            createdAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type GetNotebyIdResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            body: string;
            createdAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type GetAuditLogsResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            eventName: string;
            eventVerb: string;
            org: string;
            userId?: string;
            userType?: string;
            objectId?: string;
            objectType?: string;
            client?: string;
            ip?: string;
            changes?: {
                attributes?: {
                    [key: string]: unknown;
                };
                relationships?: {
                    [key: string]: unknown;
                };
            };
            createdAt?: string;
            publishedAt?: string;
            expiresAt?: string;
        };
        relationships: {
            user: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
            first: string;
            previous: string;
            next: string;
        };
    };
};

export type UpdateNotebyIdRequest = {
    conversation: string;
    externalId?: string | null;
    body: string;
    userMentions?: Array<{
        user?: string;
        team?: string;
    }>;
    deleted?: boolean | null;
    attachments?: Array<{
        _id: string;
        name: string;
        contentType: string;
        contentLength: number;
        sourceId?: string;
    }>;
    createdAt?: string;
    modifiedAt?: string;
    updatedAt?: string;
    createdBy?: string;
    modifiedBy?: string | null;
    lang?: string | null;
};

export type UpdateNotebyIdResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            body: string;
            createdAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            userMentions: {
                data: Array<{
                    type: string;
                    id: string;
                }>;
            };
        };
        links: {
            self: string;
        };
    };
};

export type UpdateNotebyIDpatchRequest = {
    conversation?: string;
    externalId?: string | null;
    body?: string;
    userMentions?: Array<{
        user?: string;
        team?: string;
    }>;
    deleted?: boolean | null;
    attachments?: Array<{
        _id: string;
        name: string;
        contentType: string;
        contentLength: number;
        sourceId?: string;
    }>;
    createdAt?: string;
    modifiedAt?: string;
    updatedAt?: string;
    createdBy?: string;
    modifiedBy?: string | null;
    lang?: string | null;
};

export type UpdateNotebyIDpatchResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            body: string;
            createdAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            conversation: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            userMentions: {
                data: Array<{
                    type: string;
                    id: string;
                }>;
            };
        };
        links: {
            self: string;
        };
    };
};

export type CreateaTrackingEventRequest = {
    trackingId?: string;
    sessionId?: string;
    name: string;
    meta?: {
        [key: string]: never;
    };
};

export type CreateaTrackingIdentityRequest = {
    remember?: boolean;
    trackingId?: string;
    sessionId?: string;
    name?: string;
    company?: string;
    externalId?: string;
    username?: string;
    signedUpAt?: string;
    birthdayAt?: string;
    gender?: 'm' | 'f';
    locale?: string;
    timeZone?: string;
    email?: string;
    phone?: string;
    location?: {
        type?: 'home' | 'work' | 'other';
        name?: string | null;
        address?: string | null;
        address2?: string | null;
        address3?: string | null;
        latitude?: number | null;
        longitude?: number | null;
        countryCode?: string | null;
        countryName?: string | null;
        regionCode?: string | null;
        regionName?: string | null;
        cityName?: string | null;
        zipCode?: string | null;
        areaCode?: string | null;
    };
    tags?: Array<string>;
    custom?: {
        [key: string]: never;
    };
};

export type CreateaTrackingIdentityResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            trackingId: string;
            email: string;
            status: string;
            statusAt: string;
            createdAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type CreateaTrackingIdentityEventRequest = {
    identity: {
        remember?: boolean;
        trackingId?: string;
        sessionId?: string;
        name?: string;
        company?: string;
        externalId?: string;
        username?: string;
        signedUpAt?: string;
        birthdayAt?: string;
        gender?: 'm' | 'f';
        locale?: string;
        timeZone?: string;
        email?: string;
        phone?: string;
        location?: {
            type?: 'home' | 'work' | 'other';
            name?: string | null;
            address?: string | null;
            address2?: string | null;
            address3?: string | null;
            latitude?: number | null;
            longitude?: number | null;
            countryCode?: string | null;
            countryName?: string | null;
            regionCode?: string | null;
            regionName?: string | null;
            cityName?: string | null;
            zipCode?: string | null;
            areaCode?: string | null;
        };
        tags?: Array<string>;
        custom?: {
            [key: string]: never;
        };
    };
    event: {
        trackingId?: string;
        sessionId?: string;
        name: string;
        meta?: {
            [key: string]: never;
        };
    };
};

export type CreateaTrackingIdentityEventResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            trackingId: string;
            email: string;
            status: string;
            statusAt: string;
            createdAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            customer: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    };
};

export type Event = {
    trackingId?: string;
    sessionId?: string;
    name: string;
    meta?: {
        [key: string]: never;
    };
};

export type Identity = {
    remember?: boolean;
    trackingId?: string;
    sessionId?: string;
    name?: string;
    company?: string;
    externalId?: string;
    username?: string;
    signedUpAt?: string;
    birthdayAt?: string;
    gender?: 'm' | 'f';
    locale?: string;
    timeZone?: string;
    email?: string;
    phone?: string;
    location?: {
        type?: 'home' | 'work' | 'other';
        name?: string | null;
        address?: string | null;
        address2?: string | null;
        address3?: string | null;
        latitude?: number | null;
        longitude?: number | null;
        countryCode?: string | null;
        countryName?: string | null;
        regionCode?: string | null;
        regionName?: string | null;
        cityName?: string | null;
        zipCode?: string | null;
        areaCode?: string | null;
    };
    tags?: Array<string>;
    custom?: {
        [key: string]: never;
    };
};

export type GetSatisfactionResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            name?: string;
            formType?: string;
            enabled?: boolean;
            channel?: string;
            description?: string;
            from?: {
                account?: string;
                app?: string;
                channel?: string;
            };
            metaTitle?: string;
            metaDescription?: string;
            delayTime?: number;
            scale?: {
                options?: number;
                type?: string;
                labelHigh?: string;
                labelLow?: string;
            };
            introduction?: string;
            ratingPrompt?: string;
            questions?: Array<unknown>;
            positiveQuestions?: Array<unknown>;
            negativeQuestions?: Array<unknown>;
            allQuestions?: Array<unknown>;
            followUpType?: string;
            criteria?: {
                and?: Array<unknown>;
                or?: Array<unknown>;
            };
            createdAt?: string;
            updatedAt?: string;
            modifiedAt?: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy?: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            template?: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
};

export type CustomerSearchRequest = {
    searchHash?: string;
    queryContext?: string;
    includeDeleted?: boolean;
    timeZone?: string;
    and?: {
        [key: string]: unknown;
    } | Array<{
        [key: string]: unknown;
    }>;
    or?: {
        [key: string]: unknown;
    } | Array<{
        [key: string]: unknown;
    }>;
    not?: {
        [key: string]: unknown;
    } | Array<{
        [key: string]: unknown;
    }>;
    sort?: {
        [key: string]: unknown;
    } | Array<{
        [key: string]: unknown;
    }>;
    aggs?: {
        [key: string]: unknown;
    };
    fields?: Array<{
        [key: string]: unknown;
    }>;
};

export type CustomerSearchResponseSuccess = {
    meta: {
        pageSize: number;
        page: number;
        total: number;
        totalPages: number;
        aggregations: {
            [key: string]: unknown;
        };
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            name: string;
            displayName: string;
            createdAt: string;
            updatedAt: string;
            lastActivityAt: string;
            verified: boolean;
            rev: number;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
        links: {
            self: string;
        };
    }>;
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string;
        last: string;
    };
};

export type CustomerArchiveSearchRequest = {
    queryContext?: string;
    includeDeleted?: boolean;
    timeZone?: string;
    and?: {
        [key: string]: unknown;
    } | Array<{
        conversation_id?: {
            [key: string]: unknown;
        };
        conversation_created_at?: {
            [key: string]: unknown;
        };
        conversation_updated_at?: {
            [key: string]: unknown;
        };
        conversation_customer_id?: {
            [key: string]: unknown;
        };
        conversation_any_text?: {
            [key: string]: unknown;
        };
        conversation_deleted?: {
            [key: string]: unknown;
        };
        customer_id?: {
            [key: string]: unknown;
        };
        customer_companyId?: {
            [key: string]: unknown;
        };
        customer_created_at?: {
            [key: string]: unknown;
        };
        customer_updated_at?: {
            [key: string]: unknown;
        };
        customer_deleted?: {
            [key: string]: unknown;
        };
        customer_any_text_new?: {
            [key: string]: unknown;
        };
        message_id?: {
            [key: string]: unknown;
        };
        message_created_at?: {
            [key: string]: unknown;
        };
        message_updated_at?: {
            [key: string]: unknown;
        };
        message_conversation_id?: {
            [key: string]: unknown;
        };
        message_any_text?: {
            [key: string]: unknown;
        };
        kobject_id?: {
            [key: string]: unknown;
        };
        kobject_created_at?: {
            [key: string]: unknown;
        };
        kobject_updated_at?: {
            [key: string]: unknown;
        };
        kobject_customer_id?: {
            [key: string]: unknown;
        };
        kobject_company_id?: {
            [key: string]: unknown;
        };
        kobject_any_text?: {
            [key: string]: unknown;
        };
        '^kobject_.*_id$'?: {
            [key: string]: unknown;
        };
        '^kobject_.*_created_at$'?: {
            [key: string]: unknown;
        };
        '^kobject_.*_updated_at$'?: {
            [key: string]: unknown;
        };
        '^kobject_.*_customer_id$'?: {
            [key: string]: unknown;
        };
        '^kobject_.*_company_id$'?: {
            [key: string]: unknown;
        };
        '^kobject_.*_any_text$'?: {
            [key: string]: unknown;
        };
        company_created_at?: {
            [key: string]: unknown;
        };
        company_updated_at?: {
            [key: string]: unknown;
        };
    }>;
    or?: {
        [key: string]: unknown;
    } | Array<{
        conversation_id?: {
            [key: string]: unknown;
        };
        conversation_created_at?: {
            [key: string]: unknown;
        };
        conversation_updated_at?: {
            [key: string]: unknown;
        };
        conversation_customer_id?: {
            [key: string]: unknown;
        };
        conversation_any_text?: {
            [key: string]: unknown;
        };
        conversation_deleted?: {
            [key: string]: unknown;
        };
        customer_id?: {
            [key: string]: unknown;
        };
        customer_companyId?: {
            [key: string]: unknown;
        };
        customer_created_at?: {
            [key: string]: unknown;
        };
        customer_updated_at?: {
            [key: string]: unknown;
        };
        customer_deleted?: {
            [key: string]: unknown;
        };
        customer_any_text_new?: {
            [key: string]: unknown;
        };
        message_id?: {
            [key: string]: unknown;
        };
        message_created_at?: {
            [key: string]: unknown;
        };
        message_updated_at?: {
            [key: string]: unknown;
        };
        message_conversation_id?: {
            [key: string]: unknown;
        };
        message_any_text?: {
            [key: string]: unknown;
        };
        kobject_id?: {
            [key: string]: unknown;
        };
        kobject_created_at?: {
            [key: string]: unknown;
        };
        kobject_updated_at?: {
            [key: string]: unknown;
        };
        kobject_customer_id?: {
            [key: string]: unknown;
        };
        kobject_company_id?: {
            [key: string]: unknown;
        };
        kobject_any_text?: {
            [key: string]: unknown;
        };
        '^kobject_.*_id$'?: {
            [key: string]: unknown;
        };
        '^kobject_.*_created_at$'?: {
            [key: string]: unknown;
        };
        '^kobject_.*_updated_at$'?: {
            [key: string]: unknown;
        };
        '^kobject_.*_customer_id$'?: {
            [key: string]: unknown;
        };
        '^kobject_.*_company_id$'?: {
            [key: string]: unknown;
        };
        '^kobject_.*_any_text$'?: {
            [key: string]: unknown;
        };
        company_created_at?: {
            [key: string]: unknown;
        };
        company_updated_at?: {
            [key: string]: unknown;
        };
    }>;
    not?: {
        [key: string]: unknown;
    } | Array<{
        conversation_id?: {
            [key: string]: unknown;
        };
        conversation_created_at?: {
            [key: string]: unknown;
        };
        conversation_updated_at?: {
            [key: string]: unknown;
        };
        conversation_customer_id?: {
            [key: string]: unknown;
        };
        conversation_any_text?: {
            [key: string]: unknown;
        };
        conversation_deleted?: {
            [key: string]: unknown;
        };
        customer_id?: {
            [key: string]: unknown;
        };
        customer_companyId?: {
            [key: string]: unknown;
        };
        customer_created_at?: {
            [key: string]: unknown;
        };
        customer_updated_at?: {
            [key: string]: unknown;
        };
        customer_deleted?: {
            [key: string]: unknown;
        };
        customer_any_text_new?: {
            [key: string]: unknown;
        };
        message_id?: {
            [key: string]: unknown;
        };
        message_created_at?: {
            [key: string]: unknown;
        };
        message_updated_at?: {
            [key: string]: unknown;
        };
        message_conversation_id?: {
            [key: string]: unknown;
        };
        message_any_text?: {
            [key: string]: unknown;
        };
        kobject_id?: {
            [key: string]: unknown;
        };
        kobject_created_at?: {
            [key: string]: unknown;
        };
        kobject_updated_at?: {
            [key: string]: unknown;
        };
        kobject_customer_id?: {
            [key: string]: unknown;
        };
        kobject_company_id?: {
            [key: string]: unknown;
        };
        kobject_any_text?: {
            [key: string]: unknown;
        };
        '^kobject_.*_id$'?: {
            [key: string]: unknown;
        };
        '^kobject_.*_created_at$'?: {
            [key: string]: unknown;
        };
        '^kobject_.*_updated_at$'?: {
            [key: string]: unknown;
        };
        '^kobject_.*_customer_id$'?: {
            [key: string]: unknown;
        };
        '^kobject_.*_company_id$'?: {
            [key: string]: unknown;
        };
        '^kobject_.*_any_text$'?: {
            [key: string]: unknown;
        };
        company_created_at?: {
            [key: string]: unknown;
        };
        company_updated_at?: {
            [key: string]: unknown;
        };
    }>;
    sort?: {
        [key: string]: unknown;
    } | Array<{
        [key: string]: unknown;
    }>;
};

export type GeTanSlAbyIdResponseSuccess = {
    data: {
        type: string;
        id: string;
        attributes: {
            currentVersion: number;
            createdAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            versions: {
                data: Array<{
                    type: string;
                    id: string;
                }>;
            };
        };
    };
};

export type GeTanSlAbyIdResponseSuccessversionsall = {
    data: {
        type: string;
        id: string;
        attributes: {
            currentVersion: number;
            createdAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            versions: {
                data: Array<{
                    type: string;
                    id: string;
                }>;
            };
        };
    };
    included: Array<{
        type: string;
        id: string;
        attributes: {
            name: string;
            description: string;
            version: number;
            hours: string;
            metrics: {
                firstResponse: {
                    enabled: boolean;
                    times: {
                        1: number;
                        2: number;
                        3: number;
                        4: number;
                        5: number;
                    };
                };
                longestUnrespondedMessage: {
                    enabled: boolean;
                    times: {
                        1: number;
                        2: number;
                        3: number;
                        4: number;
                        5: number;
                    };
                };
                totalConversationOpenTime: {
                    enabled: boolean;
                    times: {
                        [key: string]: unknown;
                    };
                };
                totalCustomerWaitTime: {
                    enabled: boolean;
                    times: {
                        [key: string]: unknown;
                    };
                };
            };
            criteria: {
                and: Array<{
                    conversation_channel: {
                        operator: string;
                        value: string;
                    };
                }>;
            };
            createdAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            sla: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
        };
    }>;
};

export type GeTanSlAbyIdResponseSuccessversionsactive = {
    data: {
        type: string;
        id: string;
        attributes: {
            currentVersion: number;
            createdAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            versions: {
                data: Array<{
                    type: string;
                    id: string;
                }>;
            };
        };
    };
    included: {
        type: string;
        id: string;
        attributes: {
            name: string;
            description: string;
            version: number;
            hours: string;
            metrics: {
                firstResponse: {
                    enabled: boolean;
                    times: {
                        1: number;
                        2: number;
                        3: number;
                        4: number;
                        5: number;
                    };
                };
                longestUnrespondedMessage: {
                    enabled: boolean;
                    times: {
                        1: number;
                        2: number;
                        3: number;
                        4: number;
                        5: number;
                    };
                };
                totalConversationOpenTime: {
                    enabled: boolean;
                    times: {
                        [key: string]: unknown;
                    };
                };
                totalCustomerWaitTime: {
                    enabled: boolean;
                    times: {
                        [key: string]: unknown;
                    };
                };
            };
            criteria: {
                and: Array<{
                    conversation_channel: {
                        operator: string;
                        value: string;
                    };
                }>;
            };
            createdAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            sla: {
                data: {
                    type: string;
                    id: string;
                };
                links: {
                    self: string;
                };
            };
        };
    };
};

export type GeTspamsendersResponseGeTspamsenders = {
    meta: {
        pageSize: number;
        page: number;
    };
    links: {
        self: string;
        first: string;
        prev: string | null;
        next: string | null;
    };
    data: Array<{
        type: string;
        id: string;
        attributes: {
            sender: string;
            channel: string;
            list: string;
            createdAt: string;
            modifiedAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
    }>;
};

export type UpsertaspamsenderResponseUpsertaspamsender = {
    data: {
        type: string;
        id: string;
        attributes: {
            sender: string;
            channel: string;
            list: string;
            createdAt: string;
            modifiedAt: string;
            updatedAt: string;
        };
        relationships: {
            org: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            createdBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
            modifiedBy: {
                links: {
                    self: string;
                };
                data: {
                    type: string;
                    id: string;
                };
            };
        };
    };
};

/**
 * Number of pages to return for results. Default value: 1.
 */
export type Page = number;

/**
 * Number of results to return per page. Default value: 100.
 */
export type PageSize = number;

/**
 * `date-time` string in Internet Date/Time format ([ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6)).
 */
export type FromDate = string;

/**
 * List of resources to include in this response. Use a comma to separate resources. Supports the `attachments` resource.
 */
export type Include = string;

/**
 * Set to `true` to update the document. Otherwise, performs the same update as a PATCH request. Default value: `false`.
 */
export type Replace = boolean;

export type GetAuditLogsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Limits the number audit-log documents to be returned. Default 100, maximum 1000.
         */
        count?: string;
        /**
         * Paginates by the ID of the audit-log which marks the end of the pagination range. Requires "before".
         */
        after?: string;
        /**
         * Paginates by the ID of the audit-log which marks the beginning of the pagination range. Requires "after".
         */
        before?: string;
        /**
         * Filters by the type of database object the event relates to.
         */
        'filter[objectType]'?: 'bill_subscription' | 'business_rule' | 'company' | 'conversation' | 'customer' | 'message' | 'search' | 'shortcut' | 'user' | 'work_item' | 'ip_rule' | 'work_session' | 'shopify_rest';
        /**
         * Filters by the id of database object the event relates to. Requires `filter[objectType]`.
         */
        'filter[objectId]'?: string;
        /**
         * Filters by the ID of the user the event relates to.
         */
        'filter[userId]'?: string;
        /**
         * Adds additional OR query logic to include results for additional objectTypes. For available objectTypes to use in this query param, see the enum in the `filter[objectType]` field.
         */
        'filter[include]'?: string;
        /**
         * Filter by the date range start.
         */
        'filter[start]'?: string;
        /**
         * Filter by the date range end.
         */
        'filter[end]'?: string;
    };
    url: '/audit-logs';
};

export type GetAuditLogsResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                eventName: string;
                eventVerb: string;
                org: string;
                userId?: string;
                userType?: string;
                objectId?: string;
                objectType?: string;
                client?: string;
                ip?: string;
                changes?: {
                    attributes?: {
                        [key: string]: unknown;
                    };
                    relationships?: {
                        [key: string]: unknown;
                    };
                };
                createdAt?: string;
                publishedAt?: string;
                expiresAt?: string;
            };
            relationships: {
                user: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
                first: string;
                previous: string;
                next: string;
            };
        };
    };
};

export type GetAuditLogsResponse = GetAuditLogsResponses[keyof GetAuditLogsResponses];

export type CreateAttachmentData = {
    /**
     * Schema for attachment creation operations
     */
    body?: {
        name: string;
        contentType: string;
        contentLength: number;
        ''?: string;
    };
    path?: never;
    query?: never;
    url: '/attachments';
};

export type CreateAttachmentResponses = {
    /**
     * Created
     */
    201: {
        data: {
            id: string;
            type: string;
            attributes: {
                name: string;
                contentType: string;
                contentLength: number;
                uploaded: boolean;
                redacted: boolean;
            };
            relationships: {
                org: {
                    data: {
                        id: string;
                        type: string;
                    };
                    links: {
                        self: string;
                    };
                };
            };
            links: {
                self: string;
                related: string;
            };
        };
        meta: {
            upload: {
                url: string;
                fields: {
                    key: string;
                    acl: string;
                    'Content-Type': string;
                    'X-Amz-Meta-Attachment-Id': string;
                    bucket: string;
                    'X-Amz-Algorithm': string;
                    'X-Amz-Credential': string;
                    'X-Amz-Date': string;
                    Policy: string;
                    'X-Amz-Signature': string;
                };
            };
        };
    };
};

export type CreateAttachmentResponse = CreateAttachmentResponses[keyof CreateAttachmentResponses];

export type GetAttachmentsByIdData = {
    body?: never;
    path: {
        /**
         * ID of attachment to retrieve.
         * #### NOTE
         * >You can provide a comma-delimited list of IDs to receive an array of attchments matching those IDs.
         */
        id: string;
    };
    query?: never;
    url: '/attachments/{id}';
};

export type GetAttachmentsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            id: string;
            type: string;
            attributes: {
                name: string;
                contentType: string;
                contentLength: number;
                uploaded: boolean;
                redacted: boolean;
            };
            relationships: {
                org: {
                    data: {
                        id: string;
                        type: string;
                    };
                    links: {
                        self: string;
                    };
                };
            };
            links: {
                self: string;
                related: string;
            };
        };
        meta: {
            upload: {
                url: string;
                fields: {
                    key: string;
                    acl: string;
                    'Content-Type': string;
                    'X-Amz-Meta-Attachment-Id': string;
                    bucket: string;
                    'X-Amz-Algorithm': string;
                    'X-Amz-Credential': string;
                    'X-Amz-Date': string;
                    Policy: string;
                    'X-Amz-Signature': string;
                };
            };
        };
    };
};

export type GetAttachmentsByIdResponse = GetAttachmentsByIdResponses[keyof GetAttachmentsByIdResponses];

export type UpsertAttachmentData = {
    /**
     * Schema for attachment update operations
     */
    body?: {
        name?: string;
        redacted?: boolean;
        contentType?: string;
        contentLength?: number;
    };
    path: {
        /**
         * ID of attachment to update.
         */
        id: string;
    };
    query?: never;
    url: '/attachments/{id}';
};

export type UpsertAttachmentResponses = {
    /**
     * OK
     */
    200: {
        data: {
            id: string;
            type: string;
            attributes: {
                name: string;
                contentType: string;
                contentLength: number;
                uploaded: boolean;
                redacted: boolean;
            };
            relationships: {
                org: {
                    data: {
                        id: string;
                        type: string;
                    };
                    links: {
                        self: string;
                    };
                };
            };
            links: {
                self: string;
                related: string;
            };
        };
        meta: {
            upload: {
                url: string;
                fields: {
                    key: string;
                    acl: string;
                    'Content-Type': string;
                    'X-Amz-Meta-Attachment-Id': string;
                    bucket: string;
                    'X-Amz-Algorithm': string;
                    'X-Amz-Credential': string;
                    'X-Amz-Date': string;
                    Policy: string;
                    'X-Amz-Signature': string;
                };
            };
        };
    };
};

export type UpsertAttachmentResponse = UpsertAttachmentResponses[keyof UpsertAttachmentResponses];

export type GetAttachmentByMessageAndAttachmentIdData = {
    body?: never;
    path: {
        /**
         * ID of message with attachment
         */
        message_id: string;
        /**
         * ID of attachment to retrieve
         */
        id: string;
    };
    query?: never;
    url: '/messages/{message_id}/attachments/{id}';
};

export type GetAttachmentByMessageAndAttachmentIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            id: string;
            type: string;
            attributes: {
                name: string;
                contentType: string;
                contentLength: number;
                redacted: boolean;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                message: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
                related: string;
            };
        };
    };
};

export type GetAttachmentByMessageAndAttachmentIdResponse = GetAttachmentByMessageAndAttachmentIdResponses[keyof GetAttachmentByMessageAndAttachmentIdResponses];

export type GetBrandsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
    };
    url: '/brands';
};

export type GetBrandsResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                name: string;
                default: boolean;
                createdAt: string;
                updatedAt: string;
                modifiedAt?: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy?: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy?: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
    };
};

export type GetBrandsResponse = GetBrandsResponses[keyof GetBrandsResponses];

export type CreateBrandData = {
    body?: {
        /**
         * Brand name
         */
        name: string;
        /**
         * Brand icon URL
         */
        iconUrl: string;
    };
    path?: never;
    query?: never;
    url: '/brands';
};

export type CreateBrandResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                iconUrl: string;
                default: boolean;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateBrandResponse = CreateBrandResponses[keyof CreateBrandResponses];

export type GetDefaultBrandData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/brands/default';
};

export type GetDefaultBrandResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                default: boolean;
                createdAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetDefaultBrandResponse = GetDefaultBrandResponses[keyof GetDefaultBrandResponses];

export type GetBrandByIdData = {
    body?: never;
    path: {
        /**
         * Brand ID
         */
        id: string;
    };
    query?: never;
    url: '/brands/{id}';
};

export type GetBrandByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                default: boolean;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetBrandByIdResponse = GetBrandByIdResponses[keyof GetBrandByIdResponses];

export type PatchBrandData = {
    body?: {
        /**
         * Brand name
         */
        name: string;
        /**
         * Brand icon URL
         */
        iconUrl: string;
    };
    path: {
        /**
         * Brand ID
         */
        id: string;
    };
    query?: never;
    url: '/brands/{id}';
};

export type PatchBrandResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                iconUrl: string;
                default: boolean;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type PatchBrandResponse = PatchBrandResponses[keyof PatchBrandResponses];

export type GetAllSchedulesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
    };
    url: '/schedules';
};

export type GetAllSchedulesResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                name: string;
                hours: {
                    0: string | null;
                    1: Array<Array<number>>;
                    2: Array<Array<number>>;
                    3: Array<Array<number>>;
                    4: Array<Array<number>>;
                    5: Array<Array<number>>;
                    6: string | null;
                };
                timezone: string;
                default: boolean;
                createdAt: string;
                modifiedAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
    };
};

export type GetAllSchedulesResponse = GetAllSchedulesResponses[keyof GetAllSchedulesResponses];

export type CreateScheduleData = {
    /**
     * ### Hours
     *
     * `hours` is an object where the key is the day index and the value is an hour tuple.
     *
     * #### Day index
     *
     * * `0` is Sunday
     * * `1` is Monday
     * * `2` is Tuesday
     * * `3` is Wednesday
     * * `4` is Thursday
     * * `5` is Friday
     * * `6` is Saturday
     *
     * #### Hour tuple
     *
     * Each hour tuple is an array with 2 values that represent the time of day in minutes:
     *
     * * The first value is the start time (for example, `480` for 8:00 AM)
     * * The second value is the end time (for example, `1020` for 5:00 PM)
     *
     * For example, the hour tuple `[480, 1020]` represents 8:00 AM - 5:00 PM.
     */
    body?: {
        name: string;
        hours: {
            0: Array<[
                number,
                number
            ]> | null;
            1: Array<[
                number,
                number
            ]> | null;
            2: Array<[
                number,
                number
            ]> | null;
            3: Array<[
                number,
                number
            ]> | null;
            4: Array<[
                number,
                number
            ]> | null;
            5: Array<[
                number,
                number
            ]> | null;
            6: Array<[
                number,
                number
            ]> | null;
        };
        timezone: string;
        default: boolean;
    };
    path?: never;
    query?: never;
    url: '/schedules';
};

export type CreateScheduleResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                hours: {
                    0: string | null;
                    1: Array<Array<number>>;
                    2: Array<Array<number>>;
                    3: Array<Array<number>>;
                    4: Array<Array<number>>;
                    5: Array<Array<number>>;
                    6: string | null;
                };
                timezone: string;
                default: boolean;
                createdAt: string;
                modifiedAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateScheduleResponse = CreateScheduleResponses[keyof CreateScheduleResponses];

export type GetDefaultScheduleData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Option to include holidays. Accepted values: `holidays`.
         */
        include?: string;
    };
    url: '/schedules/default';
};

export type GetDefaultScheduleResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                hours: {
                    0: string | null;
                    1: Array<Array<number>>;
                    2: Array<Array<number>>;
                    3: Array<Array<number>>;
                    4: Array<Array<number>>;
                    5: Array<Array<number>>;
                    6: string | null;
                };
                timezone: string;
                default: boolean;
                createdAt: string;
                modifiedAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
        included: Array<{
            type: string;
            id: string;
            attributes: {
                name: string;
                startDate: string;
                endDate: string;
                description: string;
                enabled: boolean;
                createdAt: string;
                modifiedAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                schedule: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
    };
};

export type GetDefaultScheduleResponse = GetDefaultScheduleResponses[keyof GetDefaultScheduleResponses];

export type DeleteScheduleByIdData = {
    body?: never;
    path: {
        /**
         * Business Schedule ID
         */
        id: string;
    };
    query?: never;
    url: '/schedules/{id}';
};

export type DeleteScheduleByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                hours: {
                    0: string | null;
                    1: Array<Array<number>>;
                    2: Array<Array<number>>;
                    3: Array<Array<number>>;
                    4: Array<Array<number>>;
                    5: Array<Array<number>>;
                    6: string | null;
                };
                timezone: string;
                default: boolean;
                deleted: boolean;
                deletedAt: string;
                createdAt: string;
                modifiedAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                deletedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type DeleteScheduleByIdResponse = DeleteScheduleByIdResponses[keyof DeleteScheduleByIdResponses];

export type GetScheduleByIdData = {
    body?: never;
    path: {
        /**
         * Business Schedule ID
         */
        id: string;
    };
    query?: {
        /**
         * Option to include holidays. Accepted values: `holidays`.
         */
        include?: string;
    };
    url: '/schedules/{id}';
};

export type GetScheduleByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                hours: {
                    0: string | null;
                    1: Array<Array<number>>;
                    2: Array<Array<number>>;
                    3: Array<Array<number>>;
                    4: Array<Array<number>>;
                    5: Array<Array<number>>;
                    6: string | null;
                };
                timezone: string;
                default: boolean;
                createdAt: string;
                modifiedAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
        included: Array<{
            type: string;
            id: string;
            attributes: {
                name: string;
                startDate: string;
                endDate: string;
                description: string;
                enabled: boolean;
                createdAt: string;
                modifiedAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                schedule: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
    };
};

export type GetScheduleByIdResponse = GetScheduleByIdResponses[keyof GetScheduleByIdResponses];

export type UpdateScheduleByIdData = {
    /**
     * ### Hours
     *
     * `hours` is an object where the key is the day index and the value is an hour tuple.
     *
     * #### Day index
     *
     * * `0` is Sunday
     * * `1` is Monday
     * * `2` is Tuesday
     * * `3` is Wednesday
     * * `4` is Thursday
     * * `5` is Friday
     * * `6` is Saturday
     *
     * #### Hour tuple
     *
     * Each hour tuple is an array with 2 values that represent the time of day in minutes:
     *
     * * The first value is the start time (for example, `480` for 8:00 AM)
     * * The second value is the end time (for example, `1020` for 5:00 PM)
     *
     * For example, the hour tuple `[480, 1020]` represents 8:00 AM - 5:00 PM.
     */
    body?: {
        name: string;
        hours: {
            0: Array<[
                number,
                number
            ]> | null;
            1: Array<[
                number,
                number
            ]> | null;
            2: Array<[
                number,
                number
            ]> | null;
            3: Array<[
                number,
                number
            ]> | null;
            4: Array<[
                number,
                number
            ]> | null;
            5: Array<[
                number,
                number
            ]> | null;
            6: Array<[
                number,
                number
            ]> | null;
        };
        timezone: string;
        default: boolean;
    };
    path: {
        /**
         * Business Schedule ID
         */
        id: string;
    };
    query?: never;
    url: '/schedules/{id}';
};

export type UpdateScheduleByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                hours: {
                    0: string | null;
                    1: Array<Array<number>>;
                    2: Array<Array<number>>;
                    3: Array<Array<number>>;
                    4: Array<Array<number>>;
                    5: Array<Array<number>>;
                    6: string | null;
                };
                timezone: string;
                default: boolean;
                createdAt: string;
                modifiedAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type UpdateScheduleByIdResponse = UpdateScheduleByIdResponses[keyof UpdateScheduleByIdResponses];

export type GetCompaniesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Unique external ID of the company
         */
        externalId?: string;
        /**
         * Company name to use as a filter
         */
        filter?: string;
    };
    url: '/companies';
};

export type GetCompaniesResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                name: string;
                extenalId: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                tags: Array<string>;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetCompaniesResponse = GetCompaniesResponses[keyof GetCompaniesResponses];

export type CreateCompanyData = {
    body?: {
        /**
         * The name of the company. The minimum length is 3 and the maximum is 255.
         */
        name: string;
        /**
         * The third party application ID for this company, if applicable. The maximum length is 256.
         */
        externalId?: string;
        /**
         * The URL for the avatar image of this company.
         */
        avatarUrl?: string | null;
        /**
         * The email addresses associated with this company. The maximum amount is 10.
         */
        emails?: Array<{
            type?: 'home' | 'work' | 'other';
            email: string;
            verified?: boolean;
        }>;
        /**
         * The phone numbers associated with this company. The maximum amount is 10.
         */
        phones?: Array<{
            type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
            phone: string;
            verified?: boolean;
        }>;
        /**
         * The WhatsApp phone numbers associated with this company. The maximum amount is 10.
         */
        whatsapps?: Array<{
            type?: 'mobile';
            phone: string;
            verified?: boolean;
        }>;
        /**
         * The social media handles associated with this company. The maximum amount of items is 10.
         */
        socials?: Array<{
            type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
            userid?: string;
            username: string;
            url?: string;
            verified?: boolean;
        }>;
        /**
         * The websites associated with this company. The maximum amount is 10.
         */
        urls?: Array<{
            type?: 'website' | 'blog' | 'other';
            url: string;
        }>;
        domains?: Array<{
            domain: string;
        }>;
        /**
         * The primary address associated with this company.
         * The maximum amount is 10.
         */
        locations?: Array<{
            type?: 'home' | 'work' | 'other';
            name?: string | null;
            address?: string | null;
            address2?: string | null;
            address3?: string | null;
            latitude?: number | null;
            longitude?: number | null;
            countryCode?: string | null;
            countryName?: string | null;
            regionCode?: string | null;
            regionName?: string | null;
            cityName?: string | null;
            zipCode?: string | null;
            areaCode?: string | null;
        }>;
        /**
         * The number of customers associated with this company.
         */
        employeeCount?: number;
        tags?: Array<string>;
        /**
         * The date and time the company object was created in Kustomer.
         */
        createdAt?: string;
        /**
         * The date and time the company was imported from an external system.
         */
        importedAt?: string;
        rev?: number;
        custom?: {
            [key: string]: never;
        };
        defaultLang?: string | null;
    };
    path?: never;
    query?: never;
    url: '/companies';
};

export type CreateCompanyResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                tags: Array<unknown>;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateCompanyResponse = CreateCompanyResponses[keyof CreateCompanyResponses];

export type GetCompanyByIdData = {
    body?: never;
    path: {
        /**
         * Unique ID of the company.
         */
        id: string;
    };
    query?: never;
    url: '/companies/{id}';
};

export type GetCompanyByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                tags: Array<string>;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetCompanyByIdResponse = GetCompanyByIdResponses[keyof GetCompanyByIdResponses];

export type UpdateCompanyAttributesData = {
    body?: {
        name?: string;
        externalId?: string | null;
        avatarUrl?: string | null;
        emails?: Array<{
            type?: 'home' | 'work' | 'other';
            email: string;
            verified?: boolean;
        }>;
        phones?: Array<{
            type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
            phone: string;
            verified?: boolean;
        }>;
        whatsapps?: Array<{
            type?: 'mobile';
            phone: string;
            verified?: boolean;
        }>;
        socials?: Array<{
            type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
            userid?: string;
            username: string;
            url?: string;
            verified?: boolean;
        }>;
        urls?: Array<{
            type?: 'website' | 'blog' | 'other';
            url: string;
        }>;
        domains?: Array<{
            domain: string;
        }>;
        locations?: Array<{
            type?: 'home' | 'work' | 'other';
            name?: string | null;
            address?: string | null;
            address2?: string | null;
            address3?: string | null;
            latitude?: number | null;
            longitude?: number | null;
            countryCode?: string | null;
            countryName?: string | null;
            regionCode?: string | null;
            regionName?: string | null;
            cityName?: string | null;
            zipCode?: string | null;
            areaCode?: string | null;
        }>;
        employeeCount?: number;
        tags?: Array<string>;
        custom?: {
            [key: string]: never;
        };
        defaultLang?: string | null;
        rev?: number;
        deleted?: boolean | null;
    };
    path: {
        /**
         * Unique ID of the company.
         */
        id: string;
    };
    query?: never;
    url: '/companies/{id}';
};

export type UpdateCompanyAttributesResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                tags: Array<string>;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type UpdateCompanyAttributesResponse = UpdateCompanyAttributesResponses[keyof UpdateCompanyAttributesResponses];

export type FindCompanyKObjectsData = {
    body?: never;
    path: {
        /**
         * Unique ID of the company.
         */
        id: string;
        /**
         * Unique Klass name.
         */
        name: string;
    };
    query?: never;
    url: '/companies/{id}/klasses/{name}';
};

export type FindCompanyKObjectsResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                title: string;
                icon: string;
                images: Array<string>;
                s3DataUrl?: string;
                custom: {
                    [key: string]: unknown;
                };
                tags: Array<unknown>;
                updatedAt: string;
                createdAt: string;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                klass: {
                    link: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                company: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type FindCompanyKObjectsResponse = FindCompanyKObjectsResponses[keyof FindCompanyKObjectsResponses];

export type BulkCreateCompaniesData = {
    body?: Array<{
        name: string;
        externalId?: string;
        avatarUrl?: string | null;
        emails?: Array<{
            type?: 'home' | 'work' | 'other';
            email: string;
            verified?: boolean;
        }>;
        phones?: Array<{
            type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
            phone: string;
            verified?: boolean;
        }>;
        whatsapps?: Array<{
            type?: 'mobile';
            phone: string;
            verified?: boolean;
        }>;
        socials?: Array<{
            type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
            userid?: string;
            username: string;
            url?: string;
            verified?: boolean;
        }>;
        urls?: Array<{
            type?: 'website' | 'blog' | 'other';
            url: string;
        }>;
        domains?: Array<{
            domain: string;
        }>;
        locations?: Array<{
            type?: 'home' | 'work' | 'other';
            name?: string | null;
            address?: string | null;
            address2?: string | null;
            address3?: string | null;
            latitude?: number | null;
            longitude?: number | null;
            countryCode?: string | null;
            countryName?: string | null;
            regionCode?: string | null;
            regionName?: string | null;
            cityName?: string | null;
            zipCode?: string | null;
            areaCode?: string | null;
        }>;
        employeeCount?: number;
        tags?: Array<string>;
        createdAt?: string;
        importedAt?: string;
        rev?: number;
        custom?: {
            [key: string]: never;
        };
        defaultLang?: string | null;
    }>;
    path?: never;
    query?: never;
    url: '/companies/bulk';
};

export type BulkCreateCompaniesResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                ids: Array<unknown>;
                context: string;
                status: string;
                v2: boolean;
                payload: {
                    api: {
                        data: Array<{
                            name: string;
                        }>;
                        path: string;
                        user: {
                            id: string;
                            userType: string;
                            roles: Array<string>;
                            orgName: string;
                            subject: string;
                            org: string;
                        };
                        requestId: string;
                        service: string;
                        method: string;
                    };
                };
                createdAt: string;
                updatedAt: string;
                completed: boolean;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type BulkCreateCompaniesResponse = BulkCreateCompaniesResponses[keyof BulkCreateCompaniesResponses];

export type BulkBatchUpdateCompaniesData = {
    body?: Array<{
        id: string;
        name?: string;
        externalId?: string | null;
        avatarUrl?: string | null;
        emails?: Array<{
            type?: 'home' | 'work' | 'other';
            email: string;
            verified?: boolean;
        }>;
        phones?: Array<{
            type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
            phone: string;
            verified?: boolean;
        }>;
        socials?: Array<{
            type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
            userid?: string;
            username: string;
            url?: string;
            verified?: boolean;
        }>;
        urls?: Array<{
            type?: 'website' | 'blog' | 'other';
            url: string;
        }>;
        domains?: Array<{
            domain: string;
        }>;
        locations?: Array<{
            type?: 'home' | 'work' | 'other';
            name?: string | null;
            address?: string | null;
            address2?: string | null;
            address3?: string | null;
            latitude?: number | null;
            longitude?: number | null;
            countryCode?: string | null;
            countryName?: string | null;
            regionCode?: string | null;
            regionName?: string | null;
            cityName?: string | null;
            zipCode?: string | null;
            areaCode?: string | null;
        }>;
        employeeCount?: number;
        tags?: Array<string>;
        custom?: {
            [key: string]: never;
        };
        defaultLang?: string | null;
        deleted?: boolean | null;
    }>;
    path?: never;
    query?: never;
    url: '/companies/bulk';
};

export type BulkBatchUpdateCompaniesResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                ids: Array<unknown>;
                context: string;
                status: string;
                v2: boolean;
                payload: {
                    api: {
                        data: Array<{
                            id: string;
                            name: string;
                        }>;
                        path: string;
                        user: {
                            id: string;
                            userType: string;
                            roles: Array<string>;
                            orgName: string;
                            subject: string;
                            org: string;
                        };
                        requestId: string;
                        service: string;
                        method: string;
                    };
                };
                createdAt: string;
                updatedAt: string;
                completed: boolean;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type BulkBatchUpdateCompaniesResponse = BulkBatchUpdateCompaniesResponses[keyof BulkBatchUpdateCompaniesResponses];

export type GetConversationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
        /**
         * Option to sort the results in descending order.
         */
        sort?: 'desc';
    };
    url: '/conversations';
};

export type GetConversationsResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                name: string;
                channels: Array<string>;
                status: string;
                messageCount: number;
                noteCount: number;
                satisfaction: number;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                tags: Array<unknown>;
                suggestedTags: Array<unknown>;
                sentiment: {
                    [key: string]: unknown;
                };
                lastMessageIn: {
                    [key: string]: unknown;
                };
                assignedUsers: Array<unknown>;
                assignedTeams: Array<unknown>;
                firstResponse: {
                    [key: string]: unknown;
                };
                direction: string;
                outboundMessageCount: number;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetConversationsResponse = GetConversationsResponses[keyof GetConversationsResponses];

export type CreateConversationData = {
    body?: {
        id?: string;
        customer: string;
        externalId?: string;
        name?: string;
        status?: 'open' | 'done';
        priority?: number;
        createdAt?: string;
        importedAt?: string;
        direction?: 'in' | 'out';
        replyChannel?: string | null;
        tags?: Array<string>;
        assignedUsers?: Array<string>;
        assignedTeams?: Array<string>;
        custom?: {
            [key: string]: never;
        };
        defaultLang?: string | null;
        queue?: unknown & {
            id?: string | null;
            external?: 'amazon-connect';
        };
    };
    path?: never;
    query?: never;
    url: '/conversations';
};

export type CreateConversationResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                channels: Array<unknown>;
                status: string;
                messageCount: number;
                noteCount: number;
                satisfaction: number;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                tags: Array<unknown>;
                suggestedTags: Array<unknown>;
                sentiment: {
                    [key: string]: unknown;
                };
                lastMessageIn: {
                    [key: string]: unknown;
                };
                assignedUsers: Array<unknown>;
                assignedTeams: Array<unknown>;
                firstResponse: {
                    [key: string]: unknown;
                };
                direction: string;
                outboundMessageCount: number;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateConversationResponse = CreateConversationResponses[keyof CreateConversationResponses];

export type DeleteConversationData = {
    body?: never;
    path: {
        /**
         * Unique ID of the conversation.
         */
        id: string;
    };
    query?: never;
    url: '/conversations/{id}';
};

export type DeleteConversationResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetConversationData = {
    body?: never;
    path: {
        /**
         * Unique ID of the conversation.
         */
        id: string;
    };
    query?: never;
    url: '/conversations/{id}';
};

export type GetConversationErrors = {
    /**
     * Bad Request
     */
    400: {
        errors: Array<{
            status: string;
            code: string;
            title: string;
            source: {
                parameters: string;
            };
        }>;
    };
    /**
     * Unauthorized
     */
    401: {
        errors: Array<{
            status: string;
            code: string;
            title: string;
            source: {
                parameters: string;
            };
        }>;
    };
    /**
     * Not Found
     */
    404: {
        errors: Array<{
            status: string;
            code: string;
            title: string;
            source: {
                parameters: string;
            };
        }>;
    };
};

export type GetConversationError = GetConversationErrors[keyof GetConversationErrors];

export type GetConversationResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                channels: Array<unknown>;
                status: string;
                messageCount: number;
                noteCount: number;
                satisfaction: number;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                tags: Array<unknown>;
                suggestedTags: Array<unknown>;
                sentiment: {
                    [key: string]: unknown;
                };
                lastMessageIn: {
                    [key: string]: unknown;
                };
                assignedUsers: Array<unknown>;
                assignedTeams: Array<unknown>;
                firstResponse: {
                    [key: string]: unknown;
                };
                direction: string;
                outboundMessageCount: number;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetConversationResponse = GetConversationResponses[keyof GetConversationResponses];

export type UpdateConversationAttributesData = {
    body?: {
        externalId?: string | null;
        name?: string | null;
        direction?: 'in' | 'out';
        priority?: number;
        satisfaction?: number | null;
        satisfactionLevel?: {
            form?: string;
            formResponse?: string;
            createdAt: string;
            updatedAt?: string;
            status: 'scheduled' | 'offered' | 'rated' | 'commented' | 'canceled' | 'unresponded';
            scheduledFor?: string;
            firstAnswer?: string;
            sentAt?: string;
            score?: 0 | 1;
            rating?: number;
            channel?: 'email' | 'sms' | 'chat' | 'facebook' | 'twitter-dm' | 'twitter-tweet' | 'voice' | 'instagram' | 'instagram-comment' | 'whatsapp' | 'form';
            sentBy?: string;
            sentByTeams?: Array<string>;
        };
        suggestedShortcuts?: Array<{
            shortcutId: string;
            confidence: number;
        }>;
        status?: 'open' | 'snoozed' | 'done';
        replyChannel?: string | null;
        subStatus?: string;
        snooze?: {
            time?: string;
            status: 'scheduled' | 'canceled' | 'elapsed';
        };
        tags?: Array<string>;
        suggestedTags?: Array<{
            tag: string;
            confidence: number;
        }>;
        sentiment?: {
            polarity: -1 | 0 | 1;
            confidence: number;
        };
        assignedUsers?: Array<string>;
        assignedTeams?: Array<string>;
        custom?: {
            [key: string]: never;
        };
        deleted?: boolean | null;
        ended?: boolean;
        endedAt?: string;
        endedReason?: string;
        endedBy?: string;
        endedByType?: 'user' | 'customer';
        locked?: boolean;
        rev?: number;
        defaultLang?: string | null;
        queue?: (unknown & {
            id?: string;
            external?: 'amazon-connect';
        }) | (unknown & {
            id?: string | null;
            external?: 'amazon-connect';
        });
    } | {
        customer?: string;
    };
    path: {
        /**
         * Unique ID of the conversation.
         */
        id: string;
    };
    query?: never;
    url: '/conversations/{id}';
};

export type UpdateConversationAttributesResponses = {
    /**
     * Success
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                channels: Array<unknown>;
                status: string;
                messageCount: number;
                noteCount: number;
                satisfaction: number;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                tags: Array<unknown>;
                suggestedTags: Array<unknown>;
                sentiment: {
                    [key: string]: unknown;
                };
                lastMessageIn: {
                    [key: string]: unknown;
                };
                assignedUsers: Array<unknown>;
                assignedTeams: Array<unknown>;
                firstResponse: {
                    [key: string]: unknown;
                };
                direction: string;
                outboundMessageCount: number;
                externalQueue: string;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type UpdateConversationAttributesResponse = UpdateConversationAttributesResponses[keyof UpdateConversationAttributesResponses];

export type UpdateConversationData = {
    body?: {
        externalId?: string | null;
        name?: string | null;
        direction?: 'in' | 'out';
        priority?: number;
        satisfaction?: number | null;
        satisfactionLevel?: {
            form?: string;
            formResponse?: string;
            createdAt: string;
            updatedAt?: string;
            status: 'scheduled' | 'offered' | 'rated' | 'commented' | 'canceled' | 'unresponded';
            scheduledFor?: string;
            firstAnswer?: string;
            sentAt?: string;
            score?: 0 | 1;
            rating?: number;
            channel?: 'email' | 'sms' | 'chat' | 'facebook' | 'twitter-dm' | 'twitter-tweet' | 'voice' | 'instagram' | 'instagram-comment' | 'whatsapp' | 'form';
            sentBy?: string;
            sentByTeams?: Array<string>;
        };
        suggestedShortcuts?: Array<{
            shortcutId: string;
            confidence: number;
        }>;
        status?: 'open' | 'snoozed' | 'done';
        replyChannel?: string | null;
        subStatus?: string;
        snooze?: {
            time?: string;
            status: 'scheduled' | 'canceled' | 'elapsed';
        };
        tags?: Array<string>;
        suggestedTags?: Array<{
            tag: string;
            confidence: number;
        }>;
        sentiment?: {
            polarity: -1 | 0 | 1;
            confidence: number;
        };
        assignedUsers?: Array<string>;
        assignedTeams?: Array<string>;
        custom?: {
            [key: string]: never;
        };
        deleted?: boolean | null;
        ended?: boolean;
        endedAt?: string;
        endedReason?: string;
        endedBy?: string;
        endedByType?: 'user' | 'customer';
        locked?: boolean;
        rev?: number;
        defaultLang?: string | null;
        queue?: (unknown & {
            id?: string;
            external?: 'amazon-connect';
        }) | (unknown & {
            id?: string | null;
            external?: 'amazon-connect';
        });
    } | {
        customer?: string;
    };
    path: {
        /**
         * Unique ID of the conversation.
         */
        id: string;
    };
    query?: {
        /**
         * Set to `true` to update the document. Otherwise, performs the same update as a PATCH request. Default value: `false`.
         */
        replace?: boolean;
    };
    url: '/conversations/{id}';
};

export type UpdateConversationResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                channels: Array<unknown>;
                status: string;
                messageCount: number;
                noteCount: number;
                satisfaction: number;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                tags: Array<unknown>;
                suggestedTags: Array<unknown>;
                sentiment: {
                    [key: string]: unknown;
                };
                lastMessageIn: {
                    [key: string]: unknown;
                };
                assignedUsers: Array<unknown>;
                assignedTeams: Array<unknown>;
                firstResponse: {
                    [key: string]: unknown;
                };
                direction: string;
                outboundMessageCount: number;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type UpdateConversationResponse = UpdateConversationResponses[keyof UpdateConversationResponses];

export type GetConversationByExternalIdData = {
    body?: never;
    path: {
        /**
         * Unique external ID of the conversation
         */
        externalId: string;
    };
    query?: never;
    url: '/conversations/externalId={externalId}';
};

export type GetConversationByExternalIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                externalId: string;
                name: string;
                channels: Array<unknown>;
                status: string;
                messageCount: number;
                noteCount: number;
                satisfaction: number;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                tags: Array<unknown>;
                suggestedTags: Array<unknown>;
                sentiment: {
                    [key: string]: unknown;
                };
                lastMessageIn: {
                    [key: string]: unknown;
                };
                assignedUsers: Array<unknown>;
                assignedTeams: Array<unknown>;
                firstResponse: {
                    [key: string]: unknown;
                };
                direction: string;
                outboundMessageCount: number;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetConversationByExternalIdResponse = GetConversationByExternalIdResponses[keyof GetConversationByExternalIdResponses];

export type GetConversationAttachmentsData = {
    body?: never;
    path: {
        /**
         * Unique ID of the conversation.
         */
        id: string;
    };
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
    };
    url: '/conversations/{id}/attachments';
};

export type GetConversationAttachmentsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<{
            id?: string;
            type?: string;
            attributes?: {
                name: string;
                contentType: string;
                contentLength: number;
                redacted: boolean;
            };
            relationships?: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                message: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links?: {
                self: string;
                related: string;
            };
        }>;
    };
};

export type GetConversationAttachmentsResponse = GetConversationAttachmentsResponses[keyof GetConversationAttachmentsResponses];

export type GetConversationEventsData = {
    body?: never;
    path: {
        /**
         * Unique ID of the conversation.
         */
        id: string;
    };
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
        /**
         * Option to sort results in ascending or descending order.
         */
        sort?: string;
    };
    url: '/conversations/{id}/events';
};

export type GetConversationEventsResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            [key: string]: unknown;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                name: string;
                type: string;
                publishedAt: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                changes?: {
                    attributes: {
                        updatedAt?: {
                            op: string;
                            before: string;
                            after: string;
                        };
                        modifiedAt?: {
                            op: string;
                            before: string;
                            after: string;
                        };
                    };
                    relationships: {
                        customer?: {
                            op: string;
                            before: {
                                links: {
                                    self: string;
                                };
                                data: {
                                    type: string;
                                    id: string;
                                };
                            };
                            after: {
                                links: {
                                    self: string;
                                };
                                data: {
                                    type: string;
                                    id: string;
                                };
                            };
                        };
                    };
                };
                location: string | null;
                meta: string | null;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetConversationEventsResponse = GetConversationEventsResponses[keyof GetConversationEventsResponses];

export type BulkCreateConversationsData = {
    body?: Array<{
        id?: string;
        customer: string;
        externalId?: string;
        name?: string;
        status?: 'open' | 'done';
        priority?: number;
        createdAt?: string;
        importedAt?: string;
        direction?: 'in' | 'out';
        replyChannel?: string | null;
        tags?: Array<string>;
        assignedUsers?: Array<string>;
        assignedTeams?: Array<string>;
        custom?: {
            [key: string]: never;
        };
        defaultLang?: string | null;
        queue?: unknown & {
            id?: string | null;
            external?: 'amazon-connect';
        };
    }>;
    path?: never;
    query?: never;
    url: '/conversations/bulk';
};

export type BulkCreateConversationsResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                ids: Array<unknown>;
                context: string;
                status: string;
                v2: boolean;
                payload: {
                    api: {
                        data: Array<{
                            externalId: string;
                            name: string;
                        }>;
                        path: string;
                        user: {
                            id: string;
                            userType: string;
                            roles: Array<string>;
                            orgName: string;
                            subject: string;
                            org: string;
                        };
                        requestId: string;
                        service: string;
                        method: string;
                    };
                };
                createdAt: string;
                updatedAt: string;
                completed: boolean;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type BulkCreateConversationsResponse = BulkCreateConversationsResponses[keyof BulkCreateConversationsResponses];

export type BulkBatchUpdateConversationsData = {
    body?: Array<{
        id: string;
        externalId?: string | null;
        name?: string | null;
        direction?: 'in' | 'out';
        priority?: number;
        satisfaction?: number | null;
        status?: 'open' | 'snoozed' | 'done';
        replyChannel?: string | null;
        subStatus?: string;
        snooze?: {
            time?: string;
            status: 'scheduled' | 'canceled' | 'elapsed';
        };
        tags?: Array<string>;
        suggestedTags?: Array<{
            tag: string;
            confidence: number;
        }>;
        sentiment?: {
            polarity: -1 | 0 | 1;
            confidence: number;
        };
        assignedUsers?: Array<string>;
        assignedTeams?: Array<string>;
        custom?: {
            [key: string]: never;
        };
        deleted?: boolean | null;
        ended?: boolean;
        endedAt?: string;
        endedReason?: string;
        endedBy?: string;
        endedByType?: 'user' | 'customer';
        locked?: boolean;
        rev?: number;
        defaultLang?: string | null;
        queue?: unknown & {
            id?: string | null;
            external?: 'amazon-connect';
        };
    } | {
        id: string;
        customer?: string;
    }>;
    path?: never;
    query?: {
        /**
         * Comma-separated list of unique conversation IDs.
         */
        ids?: string;
    };
    url: '/conversations/bulk';
};

export type BulkBatchUpdateConversationsResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                ids: Array<unknown>;
                context: string;
                status: string;
                v2: boolean;
                payload: {
                    api: {
                        data: Array<{
                            id: string;
                            status?: string;
                            name?: string;
                        }>;
                        path: string;
                        user: {
                            id: string;
                            userType: string;
                            roles: Array<string>;
                            orgName: string;
                            subject: string;
                            org: string;
                        };
                        requestId: string;
                        service: string;
                        method: string;
                    };
                };
                createdAt: string;
                updatedAt: string;
                completed: boolean;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type BulkBatchUpdateConversationsResponse = BulkBatchUpdateConversationsResponses[keyof BulkBatchUpdateConversationsResponses];

export type GetMessagesByConversationData = {
    body?: never;
    path: {
        /**
         * Unique ID of the conversation.
         */
        id: string;
    };
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
        /**
         * List of resources to include in this response. Use a comma to separate resources. Supports the `attachments` resource.
         */
        include?: string;
    };
    url: '/conversations/{id}/messages';
};

export type GetMessagesByConversationResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                externalId: string;
                channel: string;
                app: string;
                size: number;
                direction: string;
                preview: string;
                sentiment: {
                    [key: string]: unknown;
                };
                meta: {
                    inReplyTo: string;
                    recipient: {
                        mailboxHash: string;
                        email: string;
                    };
                    cc: Array<unknown>;
                    to: Array<{
                        email: string;
                    }>;
                    from: string;
                    subject: string;
                };
                status: string;
                sentAt: string;
                createdAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
                related: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetMessagesByConversationResponse = GetMessagesByConversationResponses[keyof GetMessagesByConversationResponses];

export type CreateMessagefromConversationData = {
    body?: {
        id?: string;
        externalId?: string;
        customer?: string;
        conversation?: string;
        reference?: {
            message: string;
            type: 'reply' | 'replyAll' | 'forward';
        };
        channel: 'email' | 'sms' | 'chat' | 'facebook' | 'twitter-dm' | 'twitter-tweet' | 'voice' | 'instagram' | 'whatsapp';
        preview?: string;
        subject?: string;
        direction?: 'in' | 'out';
        app: string;
        size?: number;
        related?: string;
        status?: 'sent' | 'received' | 'error';
        error?: {
            status?: number;
            code?: string;
            title?: string;
            detail?: string;
            source?: {
                [key: string]: unknown;
            };
            meta?: {
                [key: string]: unknown;
            };
            links?: {
                [key: string]: unknown;
            };
        };
        errorAt?: string;
        auto?: boolean;
        sentAt?: string;
        source?: 'bulk' | 'satisfaction';
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        attachments?: Array<{
            _id: string;
            name: string;
            contentType: string;
            contentLength: number;
            sourceId?: string;
        }> | Array<string>;
        location?: {
            name?: string;
            address?: string;
            address2?: string;
            address3?: string;
            latitude?: number;
            longitude?: number;
            countryCode?: string;
            countryName?: string;
            regionCode?: string;
            regionName?: string;
            cityName?: string;
            zipCode?: string;
            areaCode?: string;
        };
        meta?: {
            [key: string]: unknown;
        };
        custom?: {
            [key: string]: never;
        };
        sentiment?: {
            polarity: -1 | 0 | 1;
            confidence: number;
        };
        createdAt?: string;
        modifiedAt?: string;
        createdBy?: string;
        modifiedBy?: string;
        importedAt?: string;
        lang?: string | null;
        queue?: unknown & {
            id?: string;
            external?: 'amazon-connect';
        };
    };
    path: {
        /**
         * Unique ID of the conversation.
         */
        id: string;
    };
    query?: never;
    url: '/conversations/{id}/messages';
};

export type CreateMessagefromConversationResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                channel: string;
                app: string;
                size: number;
                direction: string;
                meta: {
                    [key: string]: unknown;
                };
                status: string;
                sentAt: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateMessagefromConversationResponse = CreateMessagefromConversationResponses[keyof CreateMessagefromConversationResponses];

export type RemoveTagsfromConversationData = {
    body?: Array<string>;
    path: {
        /**
         * Unique ID of the conversation.
         */
        id: string;
    };
    query?: never;
    url: '/conversations/{id}/tags';
};

export type RemoveTagsfromConversationResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                channels: Array<unknown>;
                status: string;
                messageCount: number;
                noteCount: number;
                satisfaction: number;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                tags: Array<unknown>;
                suggestedTags: Array<unknown>;
                sentiment: {
                    [key: string]: unknown;
                };
                lastMessageIn: {
                    [key: string]: unknown;
                };
                assignedUsers: Array<unknown>;
                assignedTeams: Array<unknown>;
                firstResponse: {
                    [key: string]: unknown;
                };
                direction: string;
                outboundMessageCount: number;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type RemoveTagsfromConversationResponse = RemoveTagsfromConversationResponses[keyof RemoveTagsfromConversationResponses];

export type AppendTagsToConversationData = {
    body?: Array<string>;
    path: {
        /**
         * Unique ID of the conversation.
         */
        id: string;
    };
    query?: never;
    url: '/conversations/{id}/tags';
};

export type AppendTagsToConversationResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                channels: Array<unknown>;
                status: string;
                messageCount: number;
                noteCount: number;
                satisfaction: number;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                tags: Array<string>;
                suggestedTags: Array<unknown>;
                sentiment: {
                    [key: string]: unknown;
                };
                lastMessageIn: {
                    [key: string]: unknown;
                };
                assignedUsers: Array<unknown>;
                assignedTeams: Array<unknown>;
                firstResponse: {
                    [key: string]: unknown;
                };
                direction: string;
                outboundMessageCount: number;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type AppendTagsToConversationResponse = AppendTagsToConversationResponses[keyof AppendTagsToConversationResponses];

export type GetAllForwardsByConversationData = {
    body?: never;
    path: {
        /**
         * Unique ID of the conversation.
         */
        id: string;
    };
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
    };
    url: '/conversations/{id}/forwards';
};

export type GetAllForwardsByConversationResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            id: string;
            type: string;
            attributes: {
                app: string;
                channel: string;
                from: {
                    name: string;
                    email: string;
                };
                to: Array<{
                    name: string;
                    email: string;
                }>;
                body: string;
                payload?: {
                    draftJs: {
                        blocks: Array<{
                            data: {
                                [key: string]: unknown;
                            };
                            entityRanges: Array<unknown>;
                            inlineStyleRanges: Array<unknown>;
                            depth: number;
                            type: string;
                            text: string;
                            key: string;
                        }>;
                        entityMap: {
                            [key: string]: unknown;
                        };
                    };
                };
                status: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
            };
            relationships: {
                org: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                customer: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                modifiedBy: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                conversation?: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetAllForwardsByConversationResponse = GetAllForwardsByConversationResponses[keyof GetAllForwardsByConversationResponses];

export type CreateaForwardByConversationData = {
    body?: {
        channel: 'email';
        app?: 'gmail' | 'postmark';
        customer?: string;
        status?: 'draft' | 'sent' | 'failed';
        sendAt?: string;
        to?: Array<{
            email: string;
            name?: string;
        }>;
        from?: {
            email: string;
            name?: string;
        };
        body?: string;
        subject?: string;
        replyTo?: string;
        template?: string | null;
        payload?: {
            [key: string]: unknown;
        };
        attachments?: Array<{
            id: string;
            name: string;
            contentType: string;
            contentLength: number;
        }>;
    };
    path: {
        /**
         * Unique ID of the conversation.
         */
        id: string;
    };
    query?: never;
    url: '/conversations/{id}/forwards';
};

export type CreateaForwardByConversationResponses = {
    /**
     * OK
     */
    200: {
        data: {
            id: string;
            type: string;
            attributes: {
                app: string;
                channel: string;
                status: string;
                from: {
                    name: string;
                    email: string;
                };
                to: Array<{
                    name: string;
                    email: string;
                }>;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
            };
            relationships: {
                org: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                customer: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                conversation: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                modifiedBy: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                attachments?: Array<{
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                }>;
            };
        };
    };
};

export type CreateaForwardByConversationResponse = CreateaForwardByConversationResponses[keyof CreateaForwardByConversationResponses];

export type GetConversationTimesByConversationIdData = {
    body?: never;
    path: {
        /**
         * Unique ID of the conversation.
         */
        id: string;
    };
    query?: never;
    url: '/conversations/{id}/times';
};

export type GetConversationTimesByConversationIdResponses = {
    /**
     * Success
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                createdAt: string;
                createdByTeams: Array<string>;
                assignedUsers: Array<string>;
                assignedTeams: Array<unknown>;
                handleAt: string;
                handleTime: number;
                channels: Array<string>;
                messageAt?: string;
                messageTime?: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
    };
};

export type GetConversationTimesByConversationIdResponse = GetConversationTimesByConversationIdResponses[keyof GetConversationTimesByConversationIdResponses];

export type GetConversationTimeByIdsData = {
    body?: never;
    path: {
        /**
         * Unique ID of the `conversation_time`.
         */
        ids: string;
    };
    query?: never;
    url: '/conversations/times/{ids}';
};

export type GetConversationTimeByIdsResponses = {
    /**
     * Success
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                createdAt: string;
                createdByTeams: Array<string>;
                assignedUsers: Array<string>;
                assignedTeams: Array<unknown>;
                handleAt: string;
                handleTime: number;
                channels: Array<string>;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetConversationTimeByIdsResponse = GetConversationTimeByIdsResponses[keyof GetConversationTimeByIdsResponses];

export type GetNotesbyConversationData = {
    body?: never;
    path: {
        /**
         * Unique ID of the conversation.
         */
        id: string;
    };
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
    };
    url: '/conversations/{id}/notes';
};

export type GetNotesbyConversationResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                body: string;
                createdAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                userMentions: {
                    data: Array<{
                        type: string;
                        id: string;
                    }>;
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetNotesbyConversationResponse = GetNotesbyConversationResponses[keyof GetNotesbyConversationResponses];

export type CreateaNoteWithinConversationData = {
    body?: {
        id?: string;
        conversation?: string;
        externalId?: string;
        body: string;
        userMentions?: Array<{
            user?: string;
            team?: string;
        }>;
        attachments?: Array<{
            _id: string;
            name: string;
            contentType: string;
            contentLength: number;
            sourceId?: string;
        }>;
        createdAt?: string;
        modifiedAt?: string;
        createdBy?: string;
        modifiedBy?: string;
        importedAt?: string;
        lang?: string | null;
    };
    path: {
        /**
         * Unique ID of the Conversation
         */
        id: string;
    };
    query?: never;
    url: '/conversations/{id}/notes';
};

export type CreateaNoteWithinConversationResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                body: string;
                createdAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                userMentions: {
                    data: Array<{
                        type: string;
                        id: string;
                    }>;
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateaNoteWithinConversationResponse = CreateaNoteWithinConversationResponses[keyof CreateaNoteWithinConversationResponses];

export type BulkDeleteCustomersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Comma-separated list of unique customer IDs.
         */
        ids?: string;
    };
    url: '/customers/bulk';
};

export type BulkDeleteCustomersResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                ids: Array<string>;
                context: string;
                status: string;
                v2: boolean;
                payload: {
                    api: {
                        data: {
                            [key: string]: unknown;
                        };
                        path: string;
                        user: {
                            id: string;
                            userType: string;
                            roles: Array<string>;
                            orgName: string;
                            subject: string;
                            org: string;
                        };
                        requestId: string;
                        service: string;
                        method: string;
                    };
                };
                createdAt: string;
                updatedAt: string;
                completed: boolean;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type BulkDeleteCustomersResponse = BulkDeleteCustomersResponses[keyof BulkDeleteCustomersResponses];

export type BulkCreateCustomersData = {
    body?: Array<{
        name?: string | null;
        company?: string | null;
        externalId?: string | null;
        username?: string | null;
        signedUpAt?: string | null;
        lastActivityAt?: string | null;
        lastCustomerActivityAt?: string | null;
        lastSeenAt?: string | null;
        avatarUrl?: string | null;
        externalIds?: Array<{
            externalId: string;
            verified?: boolean;
        }>;
        sharedExternalIds?: Array<{
            externalId: string;
            verified?: boolean;
        }>;
        emails?: Array<{
            type?: 'home' | 'work' | 'other';
            email: string;
            verified?: boolean;
        }>;
        sharedEmails?: Array<{
            type?: 'home' | 'work' | 'other';
            email: string;
            verified?: boolean;
        }>;
        phones?: Array<{
            type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
            phone: string;
            verified?: boolean;
        }>;
        sharedPhones?: Array<{
            type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
            phone: string;
            verified?: boolean;
        }>;
        whatsapps?: Array<{
            type?: 'mobile';
            phone: string;
            verified?: boolean;
        }>;
        facebookIds?: Array<{
            pageId: string;
            userId: string;
            name?: string;
        }>;
        instagramIds?: Array<{
            pageId: string;
            threadId: string;
            username: string;
            instagramId?: string;
        }>;
        socials?: Array<{
            type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
            userid?: string;
            username: string;
            url?: string;
            verified?: boolean;
        }>;
        sharedSocials?: Array<{
            type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
            userid?: string;
            username: string;
            url?: string;
            verified?: boolean;
        }>;
        urls?: Array<{
            type?: 'website' | 'blog' | 'other';
            url: string;
        }>;
        locations?: Array<{
            type?: 'home' | 'work' | 'other';
            name?: string | null;
            address?: string | null;
            address2?: string | null;
            address3?: string | null;
            latitude?: number | null;
            longitude?: number | null;
            countryCode?: string | null;
            countryName?: string | null;
            regionCode?: string | null;
            regionName?: string | null;
            cityName?: string | null;
            zipCode?: string | null;
            areaCode?: string | null;
        }>;
        locale?: string | null;
        timeZone?: string | null;
        tags?: Array<string>;
        sentiment?: {
            polarity: -1 | 0 | 1;
            confidence: number;
        };
        custom?: {
            [key: string]: never;
        };
        birthdayAt?: string | null;
        gender?: 'm' | 'f';
        createdAt?: string;
        importedAt?: string;
        rev?: number;
        defaultLang?: string | null;
    }>;
    path?: never;
    query?: never;
    url: '/customers/bulk';
};

export type BulkCreateCustomersResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                ids: Array<unknown>;
                context: string;
                status: string;
                v2: boolean;
                payload: {
                    api: {
                        data: Array<{
                            name: string;
                        }>;
                        path: string;
                        user: {
                            id: string;
                            userType: string;
                            roles: Array<string>;
                            orgName: string;
                            subject: string;
                            org: string;
                        };
                        requestId: string;
                        service: string;
                        method: string;
                    };
                };
                createdAt: string;
                updatedAt: string;
                completed: boolean;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type BulkCreateCustomersResponse = BulkCreateCustomersResponses[keyof BulkCreateCustomersResponses];

export type BulkBatchUpdateCustomersData = {
    body?: Array<{
        id: string;
        name?: string | null;
        company?: string | null;
        externalId?: string | null;
        username?: string | null;
        signedUpAt?: string | null;
        lastActivityAt?: string | null;
        lastCustomerActivityAt?: string | null;
        lastSeenAt?: string | null;
        avatarUrl?: string | null;
        externalIds?: Array<{
            externalId: string;
            verified?: boolean;
        }>;
        sharedExternalIds?: Array<{
            externalId: string;
            verified?: boolean;
        }>;
        emails?: Array<{
            type?: 'home' | 'work' | 'other';
            email: string;
            verified?: boolean;
        }>;
        sharedEmails?: Array<{
            type?: 'home' | 'work' | 'other';
            email: string;
            verified?: boolean;
        }>;
        phones?: Array<{
            type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
            phone: string;
            verified?: boolean;
        }>;
        sharedPhones?: Array<{
            type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
            phone: string;
            verified?: boolean;
        }>;
        facebookIds?: Array<{
            pageId: string;
            userId: string;
            name?: string;
        }>;
        socials?: Array<{
            type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
            userid?: string;
            username: string;
            url?: string;
            verified?: boolean;
        }>;
        sharedSocials?: Array<{
            type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
            userid?: string;
            username: string;
            url?: string;
            verified?: boolean;
        }>;
        urls?: Array<{
            type?: 'website' | 'blog' | 'other';
            url: string;
        }>;
        locations?: Array<{
            type?: 'home' | 'work' | 'other';
            name?: string | null;
            address?: string | null;
            address2?: string | null;
            address3?: string | null;
            latitude?: number | null;
            longitude?: number | null;
            countryCode?: string | null;
            countryName?: string | null;
            regionCode?: string | null;
            regionName?: string | null;
            cityName?: string | null;
            zipCode?: string | null;
            areaCode?: string | null;
        }>;
        locale?: string | null;
        timeZone?: string | null;
        tags?: Array<string>;
        sentiment?: {
            polarity: -1 | 0 | 1;
            confidence: number;
        };
        custom?: {
            [key: string]: never;
        };
        birthdayAt?: string | null;
        gender?: 'm' | 'f';
        createdAt?: string;
        importedAt?: string;
        rev?: number;
        defaultLang?: string | null;
    }>;
    path?: never;
    query?: {
        /**
         * Comma-separated list of unique customer IDs.
         */
        ids?: string;
    };
    url: '/customers/bulk';
};

export type BulkBatchUpdateCustomersResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                ids: Array<unknown>;
                context: string;
                status: string;
                v2: boolean;
                payload: {
                    api: {
                        data: Array<{
                            id: string;
                            name: string;
                        }>;
                        path: string;
                        user: {
                            id: string;
                            userType: string;
                            roles: Array<string>;
                            orgName: string;
                            subject: string;
                            org: string;
                        };
                        requestId: string;
                        service: string;
                        method: string;
                    };
                };
                createdAt: string;
                updatedAt: string;
                completed: boolean;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type BulkBatchUpdateCustomersResponse = BulkBatchUpdateCustomersResponses[keyof BulkBatchUpdateCustomersResponses];

export type GetConversationsByCustomerData = {
    body?: never;
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
    };
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
        /**
         * `date-time` string in Internet Date/Time format ([ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6)).
         */
        fromDate?: string;
    };
    url: '/customers/{id}/conversations';
};

export type GetConversationsByCustomerResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                name: string;
                channels: Array<string>;
                status: string;
                messageCount: number;
                noteCount: number;
                satisfaction: number;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                tags: Array<unknown>;
                suggestedTags: Array<unknown>;
                sentiment: {
                    [key: string]: unknown;
                };
                lastMessageIn: {
                    [key: string]: unknown;
                };
                assignedUsers: Array<unknown>;
                assignedTeams: Array<unknown>;
                firstResponse: {
                    [key: string]: unknown;
                };
                direction: string;
                outboundMessageCount: number;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetConversationsByCustomerResponse = GetConversationsByCustomerResponses[keyof GetConversationsByCustomerResponses];

export type CreateConversationForCustomerData = {
    body?: {
        id?: string;
        externalId?: string;
        campaign?: string;
        name?: string;
        status?: 'open' | 'done';
        priority?: number;
        createdAt?: string;
        importedAt?: string;
        direction?: 'in' | 'out';
        replyChannel?: string | null;
        tags?: Array<string>;
        assignedUsers?: Array<string>;
        assignedTeams?: Array<string>;
        custom?: {
            [key: string]: never;
        };
        defaultLang?: string | null;
        queue?: unknown & {
            id?: string | null;
            external?: 'amazon-connect';
        };
    };
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
    };
    query?: never;
    url: '/customers/{id}/conversations';
};

export type CreateConversationForCustomerResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                channels: Array<unknown>;
                status: string;
                messageCount: number;
                noteCount: number;
                satisfaction: number;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                tags: Array<unknown>;
                suggestedTags: Array<unknown>;
                sentiment: {
                    [key: string]: unknown;
                };
                lastMessageIn: {
                    [key: string]: unknown;
                };
                assignedUsers: Array<unknown>;
                assignedTeams: Array<unknown>;
                firstResponse: {
                    [key: string]: unknown;
                };
                direction: string;
                outboundMessageCount: number;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateConversationForCustomerResponse = CreateConversationForCustomerResponses[keyof CreateConversationForCustomerResponses];

export type GetAllDraftsByCustomerData = {
    body?: never;
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
    };
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
        /**
         * List of resources to include in this response. Use a comma to separate resources. Supports the `attachments` resource.
         */
        include?: string;
    };
    url: '/customers/{id}/drafts';
};

export type GetAllDraftsByCustomerResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            id: string;
            type: string;
            attributes: {
                channel: string;
                body: string;
                payload?: {
                    draftJs: {
                        blocks: Array<{
                            data: {
                                [key: string]: unknown;
                            };
                            entityRanges: Array<unknown>;
                            inlineStyleRanges: Array<unknown>;
                            depth: number;
                            type: string;
                            text: string;
                            key: string;
                        }>;
                        entityMap: {
                            [key: string]: unknown;
                        };
                    };
                };
                status: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
            };
            relationships: {
                org: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                customer: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                modifiedBy: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                conversation?: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
        included: Array<unknown>;
    };
};

export type GetAllDraftsByCustomerResponse = GetAllDraftsByCustomerResponses[keyof GetAllDraftsByCustomerResponses];

export type CreateDraftByCustomerData = {
    body?: {
        /**
         * The communication channel for the message.
         */
        channel: 'email';
        conversation?: string;
        app?: 'gmail' | 'postmark';
        customer?: string;
        /**
         * If true, message was automatically generated from a Kustomer workflow or auto-response feature. If set to true, this message will be excluded from reporting metrics. If false, message was created by a manual method.
         */
        auto?: boolean;
        /**
         * A timestamp for a future date/time the drafted message to be sent at.
         */
        sendAt?: string | null;
        source?: 'bulk' | 'satisfaction';
        /**
         * The language the message is in.
         */
        lang?: string | null;
        /**
         * The ID string associated with a shortcut. Shortcuts are pre-defined blocks of text defined in Kustomer. See [Get All Shortcuts](https://developer.kustomer.com/kustomer-api-docs/reference/getallshortcuts) endpoint view currently available shortcuts or create a shortcut with the [Create Shortcut](https://developer.kustomer.com/kustomer-api-docs/reference/createashortcut) endpoint. to Learn more about shortcuts in the [Use workspace shortcuts](https://help.kustomer.com/en_us/use-shortcuts-BymTcNSU) article.
         */
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: Array<{
            email: string;
            name?: string;
        }> | {
            email: string;
            name?: string;
        };
        from?: {
            email: string;
            name?: string;
        };
        body?: string;
        cc?: Array<{
            email: string;
            name?: string;
        }>;
        bcc?: Array<{
            email: string;
            name?: string;
        }>;
        subject?: string;
        replyTo?: string;
        headers?: Array<{
            name: string;
            value?: string;
        }>;
        template?: string | null;
        payload?: {
            [key: string]: unknown;
        };
    } | {
        channel: 'sms';
        app?: 'twilio' | 'zipwhip';
        conversation?: string;
        customer?: string;
        auto?: boolean;
        /**
         * A timestamp for a future date/time the drafted message to be sent at.
         */
        sendAt?: string | null;
        source?: 'bulk' | 'satisfaction';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: string;
        from?: string;
        body?: string;
        payload?: {
            [key: string]: unknown;
        };
    } | ({
        channel: 'whatsapp';
        conversation?: string;
        customer?: string;
        /**
         * If true, message was automatically generated from a Kustomer workflow or auto-response feature. If set to true, this message will be excluded from reporting metrics. If false, message was created by a manual method.
         */
        auto?: boolean;
        sendAt?: string | null;
        source?: 'bulk' | 'satisfaction' | 'biz-rules';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: string;
        from?: string;
        payload?: {
            [key: string]: unknown;
        };
    } & {
        app: 'twilio_whatsapp' | 'messagebird' | 'whatsapp';
        /**
         * Required if the message doesn't have any attachments. If the message has an image or video attachment, this field is optional and will be used as the caption for the attached media. If the attachment is any other type, this field is ignored.
         */
        body: string;
    }) | ({
        channel: 'whatsapp';
        conversation?: string;
        customer?: string;
        /**
         * If true, message was automatically generated from a Kustomer workflow or auto-response feature. If set to true, this message will be excluded from reporting metrics. If false, message was created by a manual method.
         */
        auto?: boolean;
        sendAt?: string | null;
        source?: 'bulk' | 'satisfaction' | 'biz-rules';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: string;
        from?: string;
        payload?: {
            [key: string]: unknown;
        };
    } & {
        /**
         * WhatsApp interactive messages are only officially supported for Kustomer native WhatsApp for now.
         */
        app: 'whatsapp';
        meta: {
            interactive: {
                type: 'list';
                header?: {
                    type: 'text';
                    text: string;
                };
                body: {
                    text: string;
                };
                footer?: {
                    text: string;
                };
                action: {
                    button: string;
                    sections: Array<{
                        title?: string;
                        rows: Array<{
                            id: string;
                            title: string;
                            description?: string;
                        }>;
                    }>;
                };
            } | {
                type: 'button';
                header?: {
                    type: 'text';
                    text: string;
                };
                body: {
                    text: string;
                };
                footer?: {
                    text: string;
                };
                action: {
                    buttons: Array<{
                        type: 'reply';
                        reply: {
                            id: string;
                            title: string;
                        };
                    }>;
                };
            };
        };
    }) | ({
        channel: 'whatsapp';
        conversation?: string;
        customer?: string;
        /**
         * If true, message was automatically generated from a Kustomer workflow or auto-response feature. If set to true, this message will be excluded from reporting metrics. If false, message was created by a manual method.
         */
        auto?: boolean;
        sendAt?: string | null;
        source?: 'bulk' | 'satisfaction' | 'biz-rules';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: string;
        from?: string;
        payload?: {
            [key: string]: unknown;
        };
    } & {
        /**
         * WhatsApp templates are only officially supported for Kustomer native WhatsApp for now.
         */
        app: 'whatsapp';
        meta: {
            /**
             * Template IDs can be found at /v1/whatsapp/accounts/{accountId}/templates
             */
            template: string;
            components?: {
                header?: {
                    type: 'text';
                    /**
                     * A map of parameter indices to values. The keys of this map should be single digit, 1-indexed numbers (e.g. '{ 1: "{ "type": "text", "text": "YOUR_TEXT_GOES_HERE" }, 2: { ... } }')
                     */
                    text: {
                        [key: string]: {
                            type?: 'text';
                            text?: string;
                        };
                    };
                } | {
                    type: 'image' | 'video' | 'document';
                    attachment: string;
                };
                body?: {
                    [key: string]: {
                        type?: 'text';
                        text?: string;
                    };
                };
                /**
                 * We currently only support parameterizing one button. The `index` and `sub_type` fields should be the same for all entries in this array, and the numbered parameters provided will only be applied to the button indexed by the `index` value provided.
                 */
                buttons?: Array<{
                    index: number;
                    sub_type: 'url';
                    [key: string]: {
                        type?: 'text';
                        text?: string;
                    } | number | 'url';
                }>;
            };
        };
    }) | {
        channel: 'chat';
        conversation?: string;
        customer?: string;
        auto?: boolean;
        /**
         * A timestamp for a future date/time the drafted message to be sent at.
         */
        sendAt?: string | null;
        source?: 'bulk' | 'satisfaction';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: string;
        from?: string;
        body?: string;
        payload?: {
            [key: string]: unknown;
        };
        attachments?: Array<string>;
    } | {
        channel: 'facebook';
        conversation?: string;
        customer?: string;
        auto?: boolean;
        /**
         * A timestamp for a future date/time the drafted message to be sent at.
         */
        sendAt?: string | null;
        source?: 'bulk' | 'satisfaction';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: string;
        from?: string;
        body?: string;
        payload?: {
            [key: string]: unknown;
        };
    } | {
        channel: 'twitter-tweet';
        conversation?: string;
        customer?: string;
        auto?: boolean;
        /**
         * A timestamp for a future date/time the drafted message to be sent at.
         */
        sendAt?: string;
        source?: 'bulk' | 'satisfaction';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: string;
        from?: string;
        body?: string;
        payload?: {
            [key: string]: unknown;
        };
    } | {
        channel: 'twitter-dm';
        conversation?: string;
        customer?: string;
        auto?: boolean;
        /**
         * A timestamp for a future date/time the drafted message to be sent at.
         */
        sendAt?: string;
        source?: 'bulk' | 'satisfaction';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: string;
        from?: string;
        body?: string;
        payload?: {
            [key: string]: unknown;
        };
    } | {
        channel: 'note';
        conversation?: string;
        customer?: string;
        /**
         * A timestamp for a future date/time the drafted message to be sent at.
         */
        sendAt?: string | null;
        source?: 'bulk';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        body?: string;
        payload?: {
            [key: string]: unknown;
        };
        userMentions?: Array<{
            user?: string;
            team?: string;
        }>;
    } | {
        channel: 'instagram';
        conversation?: string;
        customer?: string;
        auto?: boolean;
        /**
         * A timestamp for a future date/time the drafted message to be sent at.
         */
        sendAt?: string | null;
        source?: 'bulk' | 'satisfaction';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: string;
        from?: string;
        body?: string;
        payload?: {
            [key: string]: unknown;
        };
    };
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
    };
    query?: never;
    url: '/customers/{id}/drafts';
};

export type CreateDraftByCustomerResponses = {
    /**
     * OK
     */
    200: {
        data: {
            id: string;
            type: string;
            attributes: {
                channel: string;
                status: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
            };
            relationships: {
                org: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                customer: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                modifiedBy: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
            };
        };
    };
};

export type CreateDraftByCustomerResponse = CreateDraftByCustomerResponses[keyof CreateDraftByCustomerResponses];

export type GetaCustomerEventData = {
    body?: never;
    path: {
        /**
         * Unique ID of the customer.
         */
        customerId: string;
        /**
         * Unique ID of the event.
         */
        id: string;
    };
    query?: never;
    url: '/customers/{customerId}/events/{id}';
};

export type GetaCustomerEventResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                type: string;
                publishedAt: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string | null;
                changes: {
                    attributes: {
                        conversationCounts: {
                            op: string;
                            before: {
                                all: number;
                                snoozed: number;
                                open: number;
                                done: number;
                            };
                            after: {
                                all: number;
                                snoozed: number;
                                open: number;
                                done: number;
                            };
                        };
                        progressiveStatus: {
                            op: string;
                            before: string | null;
                            after: string;
                        };
                        rev: {
                            op: string;
                            before: number;
                            after: number;
                        };
                    };
                    relationships: {
                        [key: string]: unknown;
                    };
                };
                location: string | null;
                meta: string | null;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: string | null;
                modifiedBy: string | null;
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetaCustomerEventResponse = GetaCustomerEventResponses[keyof GetaCustomerEventResponses];

export type GetAllEventsbyCustomerForSessionData = {
    body?: never;
    path: {
        /**
         * Unique ID of the customer.
         */
        customerId: string;
        /**
         * Unique ID of the session.
         */
        sessionId: string;
    };
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
    };
    url: '/customers/{customerId}/sessions/{sessionId}/events';
};

export type GetAllEventsbyCustomerForSessionResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            [key: string]: unknown;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                name: string;
                trackingEvent: string;
                app: string | null;
                publishedAt: string;
                createdAt: string;
                location: {
                    countryCode: string;
                    countryName: string;
                    regionCode: string;
                    cityName: string;
                    zipCode: string;
                    latitude: number;
                    longitude: number;
                    areaCode: string;
                    regionName: string;
                };
                meta: {
                    statusStr: string;
                };
                sessionId: string;
                realIp: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: string | null;
                modifiedBy: string | null;
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetAllEventsbyCustomerForSessionResponse = GetAllEventsbyCustomerForSessionResponses[keyof GetAllEventsbyCustomerForSessionResponses];

export type GetAllCustomerEventsData = {
    body?: never;
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
    };
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
        /**
         * Comma-separated list of event names to filter results.
         */
        name?: string;
    };
    url: '/customers/{id}/events';
};

export type GetAllCustomerEventsResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            [key: string]: unknown;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                name: string;
                type: string;
                publishedAt: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string | null;
                location: string | null;
                meta: string | null;
                changes?: {
                    attributes: {
                        conversationCounts?: {
                            op: string;
                            before: {
                                all: number;
                                snoozed: number;
                                open: number;
                                done: number;
                            };
                            after: {
                                all: number;
                                snoozed: number;
                                open: number;
                                done: number;
                            };
                        };
                        progressiveStatus?: {
                            op: string;
                            before: string | null;
                            after: string;
                        };
                        rev: {
                            op: string;
                            before: number;
                            after: number;
                        };
                        presence?: {
                            op: string;
                            before: string | null;
                            after: string;
                        };
                        updatedAt?: {
                            op: string;
                            before: string;
                            after: string;
                        };
                        lastSeenAt?: {
                            op: string;
                            before: string | null;
                            after: string;
                        };
                        lastActivityAt?: {
                            op: string;
                            before: string;
                            after: string;
                        };
                        lastCustomerActivityAt?: {
                            op: string;
                            before: string | null;
                            after: string;
                        };
                    };
                    relationships: {
                        [key: string]: unknown;
                    };
                };
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: string | null;
                modifiedBy: string | null;
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation?: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                message?: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetAllCustomerEventsResponse = GetAllCustomerEventsResponses[keyof GetAllCustomerEventsResponses];

export type GetCustomerSessionsData = {
    body?: never;
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
    };
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
    };
    url: '/customers/{id}/sessions';
};

export type GetCustomerSessionsResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            [key: string]: unknown;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                sessionId: string;
                firstEventAt: string;
                lastEventAt: string;
                count: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetCustomerSessionsResponse = GetCustomerSessionsResponses[keyof GetCustomerSessionsResponses];

export type FindCustomerKObjectsData = {
    body?: never;
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
        /**
         * Name of the Klass.
         */
        name: string;
    };
    query?: never;
    url: '/customers/{id}/klasses/{name}';
};

export type FindCustomerKObjectsResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                title: string;
                description?: string;
                icon: string;
                images: Array<string>;
                s3DataUrl?: string;
                custom: {
                    orderStatusStr: string;
                    shippingStatusStr: string;
                    billingStatusStr: string;
                    specialInstructionsStr: string;
                    orderNumberNum: number;
                    orderDescriptionStr: string;
                    totalPriceNum: number;
                    orderUpdatedAt: string;
                };
                tags: Array<unknown>;
                updatedAt: string;
                createdAt: string;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                klass: {
                    link: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type FindCustomerKObjectsResponse = FindCustomerKObjectsResponses[keyof FindCustomerKObjectsResponses];

export type CreateCustomerKObjectData = {
    body?: {
        customer?: string;
        company?: string;
        externalId?: string;
        title: string;
        description?: string;
        images?: Array<string>;
        icon?: string;
        data?: {
            [key: string]: unknown;
        };
        custom?: {
            [key: string]: never;
        };
        tags?: Array<string>;
        createdAt?: string;
        importedAt?: string;
    };
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
        /**
         * Name of the Klass.
         */
        name: string;
    };
    query?: never;
    url: '/customers/{id}/klasses/{name}';
};

export type CreateCustomerKObjectResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                title: string;
                icon: string;
                images: Array<string>;
                custom: {
                    orderStatusStr: string;
                    shippingStatusStr: string;
                    billingStatusStr: string;
                    specialInstructionsStr: string;
                    orderNumberNum: number;
                    orderDescriptionStr: string;
                    totalPriceNum: number;
                    orderUpdatedAt: string;
                };
                tags: Array<unknown>;
                updatedAt: string;
                createdAt: string;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                klass: {
                    link: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateCustomerKObjectResponse = CreateCustomerKObjectResponses[keyof CreateCustomerKObjectResponses];

export type CreateCustomerMergeData = {
    body?: {
        source: string;
        target: string;
    };
    path?: never;
    query?: never;
    url: '/customers/merges';
};

export type CreateCustomerMergeResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                status: string;
                createdAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                source: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                target: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateCustomerMergeResponse = CreateCustomerMergeResponses[keyof CreateCustomerMergeResponses];

export type GetCustomerMergeData = {
    body?: never;
    path: {
        /**
         * Unique ID of the customer merge.
         */
        id: string;
    };
    query?: never;
    url: '/customers/merges/{id}';
};

export type GetCustomerMergeResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                status: string;
                createdAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                source: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                target: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetCustomerMergeResponse = GetCustomerMergeResponses[keyof GetCustomerMergeResponses];

export type GetCustomerMergesByCustomerData = {
    body?: never;
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
    };
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
    };
    url: '/customers/{id}/merges';
};

export type GetCustomerMergesByCustomerResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                status: string;
                createdAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                source: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                target: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetCustomerMergesByCustomerResponse = GetCustomerMergesByCustomerResponses[keyof GetCustomerMergesByCustomerResponses];

export type GetMessagesByCustomerData = {
    body?: never;
    path: {
        /**
         * Unique ID of the customer
         */
        id: string;
    };
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
        /**
         * List of resources to include in this response. Use a comma to separate resources. Supports the `attachments` resource.
         */
        include?: string;
    };
    url: '/customers/{id}/messages';
};

export type GetMessagesByCustomerResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                externalId: string;
                channel: string;
                app: string;
                size: number;
                direction: string;
                preview: string;
                sentiment: {
                    [key: string]: unknown;
                };
                meta: {
                    inReplyTo: string;
                    recipient: {
                        mailboxHash: string;
                        email: string;
                    };
                    cc: Array<unknown>;
                    to: Array<{
                        email: string;
                    }>;
                    from: string;
                    subject: string;
                };
                status: string;
                sentAt: string;
                createdAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
                related: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetMessagesByCustomerResponse = GetMessagesByCustomerResponses[keyof GetMessagesByCustomerResponses];

export type CreateMessageByCustomerData = {
    /**
     * Creates a new message.
     *
     * Any one of the following roles is required for this endpoint:
     *
     * |Legacy Role|Equivalent Permission Set Role|
     * |-----|--------|
     * |org.user.message.write|org.permission.message.create|
     *
     * ### Note
     * > If a conversation is specified, the message will be linked to the existing conversation.  Otherwise, a new
     * conversation will be created and associated with the message.
     *
     * ### Authorization
     * The `org.admin` role is required for setting createdAt, createdBy, modifiedAt, and modifiedBy.  Otherwise, these attributes are automatically set by the token.
     *
     * ### Rate Limit
     * Messages are subject to a rate limit. A single client can create up to 120 messages per minute per customer.
     * Messages with `importedAt` in their body will not be subject to the rate limit.
     *
     * A `429 Too Many Requests` response will be returned if the rate limit has been reached for a customer.
     */
    body?: {
        id?: string;
        externalId?: string;
        conversation?: string;
        reference?: {
            message: string;
            type: 'reply' | 'replyAll' | 'forward';
        };
        channel: 'email' | 'sms' | 'chat' | 'facebook' | 'twitter-dm' | 'twitter-tweet' | 'voice' | 'instagram' | 'whatsapp';
        preview?: string;
        subject?: string;
        direction?: 'in' | 'out';
        app: string;
        size?: number;
        related?: string;
        status?: 'sent' | 'received' | 'error';
        error?: {
            status?: number;
            code?: string;
            title?: string;
            detail?: string;
            source?: {
                [key: string]: unknown;
            };
            meta?: {
                [key: string]: unknown;
            };
            links?: {
                [key: string]: unknown;
            };
        };
        errorAt?: string;
        auto?: boolean;
        sentAt?: string;
        source?: 'bulk' | 'satisfaction';
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        attachments?: Array<{
            _id: string;
            name: string;
            contentType: string;
            contentLength: number;
            sourceId?: string;
        }> | Array<string>;
        location?: {
            name?: string;
            address?: string;
            address2?: string;
            address3?: string;
            latitude?: number;
            longitude?: number;
            countryCode?: string;
            countryName?: string;
            regionCode?: string;
            regionName?: string;
            cityName?: string;
            zipCode?: string;
            areaCode?: string;
        };
        meta?: {
            [key: string]: unknown;
        };
        custom?: {
            [key: string]: never;
        };
        sentiment?: {
            polarity: -1 | 0 | 1;
            confidence: number;
        };
        createdAt?: string;
        modifiedAt?: string;
        createdBy?: string;
        modifiedBy?: string;
        importedAt?: string;
        lang?: string | null;
        queue?: unknown & {
            id?: string;
            external?: 'amazon-connect';
        };
    };
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
    };
    query?: never;
    url: '/customers/{id}/messages';
};

export type CreateMessageByCustomerResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                channel: string;
                app: string;
                size: number;
                direction: string;
                meta: {
                    [key: string]: unknown;
                };
                status: string;
                sentAt: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateMessageByCustomerResponse = CreateMessageByCustomerResponses[keyof CreateMessageByCustomerResponses];

export type GetNotesByCustomerData = {
    body?: never;
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
    };
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
    };
    url: '/customers/{id}/notes';
};

export type GetNotesByCustomerResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                body: string;
                createdAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                userMentions: {
                    data: Array<{
                        type: string;
                        id: string;
                    }>;
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetNotesByCustomerResponse = GetNotesByCustomerResponses[keyof GetNotesByCustomerResponses];

export type DeleteUnmaskingWindowByCustomerData = {
    /**
     * Deletes an existing unmasking window for a customer.
     *
     * Any one of the following roles is required for this endpoint:
     *
     * |Legacy Role|Equivalent Permission Set Role|
     * |-----|--------|
     * |org.user.customer.write|org.permission.unmasking_window.delete|
     *
     * ### Note
     * > If an unmasking window is deleted for a customer, any sensitive attributes for the customer and for the customer's conversations, messages, and custom objects will be returned masked.
     */
    body?: unknown;
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
    };
    query?: never;
    url: '/customers/{id}/unmasking-windows';
};

export type DeleteUnmaskingWindowByCustomerResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type CreateUnmaskingWindowByCustomerData = {
    /**
     * Creates a new or replaces an existing unmasking window for a customer.
     *
     * Any one of the following roles is required for this endpoint:
     *
     * |Legacy Role|Equivalent Permission Set Role|
     * |-----|--------|
     * |org.user.customer.write|org.permission.unmasking_window.create|
     *
     * ### Note
     * > If an unmasking window is created for a customer, any sensitive attributes for the customer and for the customer's conversations, messages, and custom objects will be returned unmasked during the unmasking window period.
     */
    body?: unknown;
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
    };
    query?: never;
    url: '/customers/{id}/unmasking-windows';
};

export type CreateUnmaskingWindowByCustomerResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type GetCustomersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/customers';
};

export type GetCustomersResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
            total: number;
            totalPages: number;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                name: string;
                displayName: string;
                displayColor: string;
                displayIcon: string;
                externalIds: Array<unknown>;
                sharedExternalIds: Array<unknown>;
                emails: Array<{
                    email: string;
                    verified: boolean;
                    type: string;
                }>;
                sharedEmails: Array<unknown>;
                phones: Array<{
                    phone: string;
                    verified: boolean;
                    type: string;
                }>;
                sharedPhones: Array<unknown>;
                socials: Array<{
                    type: string;
                    userid: string;
                    username: string;
                    url: string;
                    verified: boolean;
                }>;
                sharedSocials: Array<unknown>;
                urls: Array<{
                    url: string;
                    type: string;
                }>;
                locations: Array<{
                    type: string;
                    address: string;
                }>;
                activeUsers: Array<unknown>;
                watchers: Array<unknown>;
                recentLocation: {
                    updatedAt: string;
                };
                locale: string;
                gender: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                lastActivityAt: string;
                lastMessageIn: {
                    sentiment: {
                        [key: string]: unknown;
                    };
                };
                lastConversation: {
                    tags: Array<unknown>;
                    sentiment: {
                        [key: string]: unknown;
                    };
                };
                conversationCounts: {
                    done: number;
                    open: number;
                    snoozed: number;
                    all: number;
                };
                preview: {
                    [key: string]: unknown;
                };
                tags: Array<string>;
                progressiveStatus: string | null;
                verified: boolean;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
            last: string;
        };
    };
};

export type GetCustomersResponse = GetCustomersResponses[keyof GetCustomersResponses];

export type CreateCustomerData = {
    body?: {
        name?: string | null;
        company?: string | null;
        externalId?: string | null;
        username?: string | null;
        signedUpAt?: string | null;
        lastActivityAt?: string | null;
        lastCustomerActivityAt?: string | null;
        lastSeenAt?: string | null;
        avatarUrl?: string | null;
        externalIds?: Array<{
            externalId: string;
            verified?: boolean;
        }>;
        sharedExternalIds?: Array<{
            externalId: string;
            verified?: boolean;
        }>;
        emails?: Array<{
            type?: 'home' | 'work' | 'other';
            email: string;
            verified?: boolean;
        }>;
        sharedEmails?: Array<{
            type?: 'home' | 'work' | 'other';
            email: string;
            verified?: boolean;
        }>;
        phones?: Array<{
            type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
            phone: string;
            verified?: boolean;
        }>;
        sharedPhones?: Array<{
            type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
            phone: string;
            verified?: boolean;
        }>;
        whatsapps?: Array<{
            type?: 'mobile';
            phone: string;
            verified?: boolean;
        }>;
        facebookIds?: Array<{
            pageId: string;
            userId: string;
            name?: string;
        }>;
        instagramIds?: Array<{
            pageId: string;
            threadId: string;
            username: string;
            instagramId?: string;
        }>;
        socials?: Array<{
            type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
            userid?: string;
            username: string;
            url?: string;
            verified?: boolean;
        }>;
        sharedSocials?: Array<{
            type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
            userid?: string;
            username: string;
            url?: string;
            verified?: boolean;
        }>;
        urls?: Array<{
            type?: 'website' | 'blog' | 'other';
            url: string;
        }>;
        locations?: Array<{
            type?: 'home' | 'work' | 'other';
            name?: string | null;
            address?: string | null;
            address2?: string | null;
            address3?: string | null;
            latitude?: number | null;
            longitude?: number | null;
            countryCode?: string | null;
            countryName?: string | null;
            regionCode?: string | null;
            regionName?: string | null;
            cityName?: string | null;
            zipCode?: string | null;
            areaCode?: string | null;
        }>;
        locale?: string | null;
        timeZone?: string | null;
        tags?: Array<string>;
        sentiment?: {
            polarity: -1 | 0 | 1;
            confidence: number;
        };
        custom?: {
            [key: string]: never;
        };
        birthdayAt?: string | null;
        gender?: 'm' | 'f';
        createdAt?: string;
        importedAt?: string;
        rev?: number;
        defaultLang?: string | null;
    };
    path?: never;
    query?: never;
    url: '/customers';
};

export type CreateCustomerResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                displayName: string;
                displayColor: string;
                displayIcon: string;
                externalIds: Array<unknown>;
                sharedExternalIds: Array<unknown>;
                emails: Array<{
                    email: string;
                    verified: boolean;
                    type: string;
                    id: string | null;
                }>;
                sharedEmails: Array<unknown>;
                phones: Array<{
                    phone: string;
                    verified: boolean;
                    type: string;
                    id: string | null;
                }>;
                sharedPhones: Array<unknown>;
                socials: Array<{
                    type: string;
                    userid: string;
                    username: string;
                    url: string;
                    verified: boolean;
                    id: string | null;
                }>;
                sharedSocials: Array<unknown>;
                urls: Array<{
                    url: string;
                    type: string;
                    id: string | null;
                }>;
                locations: Array<{
                    type: string;
                    address: string;
                    id: string | null;
                }>;
                activeUsers: Array<unknown>;
                watchers: Array<unknown>;
                recentLocation: {
                    updatedAt: string;
                };
                locale: string;
                defaultLang: string;
                gender: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                lastActivityAt: string;
                lastConversation: {
                    tags: Array<unknown>;
                };
                conversationCounts: {
                    all: number;
                    snoozed: number;
                    open: number;
                    done: number;
                };
                tags: Array<string>;
                progressiveStatus: string | null;
                verified: boolean;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateCustomerResponse = CreateCustomerResponses[keyof CreateCustomerResponses];

export type DeleteCustomerData = {
    body?: never;
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
    };
    query?: never;
    url: '/customers/{id}';
};

export type DeleteCustomerResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetCustomerByIdData = {
    body?: never;
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
    };
    query?: never;
    url: '/customers/{id}';
};

export type GetCustomerByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                displayName: string;
                displayColor: string;
                displayIcon: string;
                externalId: string;
                externalIds: Array<{
                    externalId: string;
                    verified: boolean;
                    id: string | null;
                }>;
                sharedExternalIds: Array<unknown>;
                signedUpAt: string | null;
                avatarUrl: string | null;
                username: string | null;
                emails: Array<{
                    email: string;
                    verified: boolean;
                    type: string;
                    id: string | null;
                }>;
                sharedEmails: Array<{
                    email: string;
                    verified: boolean;
                    type: string;
                    id: string | null;
                }>;
                phones: Array<unknown>;
                sharedPhones: Array<unknown>;
                socials: Array<unknown>;
                sharedSocials: Array<unknown>;
                urls: Array<unknown>;
                locations: Array<unknown>;
                activeUsers: Array<unknown>;
                watchers: Array<unknown>;
                recentLocation: {
                    updatedAt: string;
                };
                locale: string | null;
                timeZone: string | null;
                birthdayAt: string | null;
                gender: string | null;
                presence: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                lastSeenAt: string;
                lastActivityAt: string;
                lastCustomerActivityAt: string;
                lastMessageIn: {
                    sentAt: string;
                    sentiment: string | null;
                };
                lastConversation: {
                    id: string;
                    sentiment: {
                        confidence: number;
                        polarity: number;
                    };
                    tags: Array<unknown>;
                };
                conversationCounts: {
                    all: number;
                    snoozed: number;
                    open: number;
                    done: number;
                };
                preview: {
                    previewAt: string;
                    type: string;
                    text: string;
                    subject: string;
                };
                tags: Array<unknown>;
                sentiment: {
                    polarity: number;
                    confidence: number;
                };
                progressiveStatus: string;
                verified: boolean;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetCustomerByIdResponse = GetCustomerByIdResponses[keyof GetCustomerByIdResponses];

export type UpdateCustomerAttributesData = {
    body?: {
        name?: string | null;
        company?: string | null;
        externalId?: string | null;
        username?: string | null;
        signedUpAt?: string | null;
        lastActivityAt?: string | null;
        lastCustomerActivityAt?: string | null;
        lastSeenAt?: string | null;
        avatarUrl?: string | null;
        externalIds?: Array<{
            externalId: string;
            verified?: boolean;
        }>;
        sharedExternalIds?: Array<{
            externalId: string;
            verified?: boolean;
        }>;
        emails?: Array<{
            type?: 'home' | 'work' | 'other';
            email: string;
            verified?: boolean;
        }>;
        sharedEmails?: Array<{
            type?: 'home' | 'work' | 'other';
            email: string;
            verified?: boolean;
        }>;
        phones?: Array<{
            type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
            phone: string;
            verified?: boolean;
        }>;
        sharedPhones?: Array<{
            type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
            phone: string;
            verified?: boolean;
        }>;
        whatsapps?: Array<{
            type?: 'mobile';
            phone: string;
            verified?: boolean;
        }>;
        facebookIds?: Array<{
            pageId: string;
            userId: string;
            name?: string;
        }>;
        instagramIds?: Array<{
            pageId: string;
            threadId: string;
            username: string;
            instagramId?: string;
        }>;
        socials?: Array<{
            type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
            userid?: string;
            username: string;
            url?: string;
            verified?: boolean;
        }>;
        sharedSocials?: Array<{
            type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
            userid?: string;
            username: string;
            url?: string;
            verified?: boolean;
        }>;
        urls?: Array<{
            type?: 'website' | 'blog' | 'other';
            url: string;
        }>;
        locations?: Array<{
            type?: 'home' | 'work' | 'other';
            name?: string | null;
            address?: string | null;
            address2?: string | null;
            address3?: string | null;
            latitude?: number | null;
            longitude?: number | null;
            countryCode?: string | null;
            countryName?: string | null;
            regionCode?: string | null;
            regionName?: string | null;
            cityName?: string | null;
            zipCode?: string | null;
            areaCode?: string | null;
        }>;
        locale?: string | null;
        timeZone?: string | null;
        tags?: Array<string>;
        sentiment?: {
            polarity: -1 | 0 | 1;
            confidence: number;
        };
        custom?: {
            [key: string]: never;
        };
        birthdayAt?: string | null;
        gender?: 'm' | 'f';
        createdAt?: string;
        importedAt?: string;
        rev?: number;
        defaultLang?: string | null;
    };
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
    };
    query?: never;
    url: '/customers/{id}';
};

export type UpdateCustomerAttributesResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                displayName: string;
                displayColor: string;
                displayIcon: string;
                externalId: string;
                externalIds: Array<{
                    externalId: string;
                    verified: boolean;
                    id: string | null;
                }>;
                sharedExternalIds: Array<unknown>;
                signedUpAt: string | null;
                avatarUrl: string | null;
                username: string | null;
                emails: Array<{
                    type: string;
                    email: string;
                }>;
                sharedEmails: Array<unknown>;
                phones: Array<{
                    type: string;
                    phone: string;
                }>;
                sharedPhones: Array<unknown>;
                socials: Array<{
                    type: string;
                    userid: string;
                    username: string;
                    url: string;
                }>;
                sharedSocials: Array<unknown>;
                urls: Array<{
                    url: string;
                }>;
                locations: Array<{
                    type: string;
                    address: string;
                }>;
                activeUsers: Array<unknown>;
                watchers: Array<unknown>;
                recentLocation: {
                    updatedAt: string;
                };
                locale: string;
                gender: string;
                tags: Array<string>;
                timeZone: string | null;
                birthdayAt: string | null;
                presence: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                lastSeenAt: string;
                lastActivityAt: string;
                lastCustomerActivityAt: string;
                lastMessageIn: {
                    sentAt: string;
                    sentiment: string | null;
                };
                lastConversation: {
                    id: string;
                    sentiment: {
                        confidence: number;
                        polarity: number;
                    };
                    tags: Array<unknown>;
                };
                defaultLang: string;
                conversationCounts: {
                    all: number;
                    snoozed: number;
                    open: number;
                    done: number;
                };
                preview: {
                    previewAt: string;
                    type: string;
                    text: string;
                    subject: string;
                };
                sentiment: {
                    polarity: number;
                    confidence: number;
                };
                progressiveStatus: string;
                verified: boolean;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type UpdateCustomerAttributesResponse = UpdateCustomerAttributesResponses[keyof UpdateCustomerAttributesResponses];

export type UpdateCustomerData = {
    body?: {
        name?: string | null;
        company?: string | null;
        externalId?: string | null;
        username?: string | null;
        signedUpAt?: string | null;
        lastActivityAt?: string | null;
        lastCustomerActivityAt?: string | null;
        lastSeenAt?: string | null;
        avatarUrl?: string | null;
        externalIds?: Array<{
            externalId: string;
            verified?: boolean;
        }>;
        sharedExternalIds?: Array<{
            externalId: string;
            verified?: boolean;
        }>;
        emails?: Array<{
            type?: 'home' | 'work' | 'other';
            email: string;
            verified?: boolean;
        }>;
        sharedEmails?: Array<{
            type?: 'home' | 'work' | 'other';
            email: string;
            verified?: boolean;
        }>;
        phones?: Array<{
            type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
            phone: string;
            verified?: boolean;
        }>;
        sharedPhones?: Array<{
            type?: 'mobile' | 'home' | 'work' | 'fax' | 'other';
            phone: string;
            verified?: boolean;
        }>;
        whatsapps?: Array<{
            type?: 'mobile';
            phone: string;
            verified?: boolean;
        }>;
        facebookIds?: Array<{
            pageId: string;
            userId: string;
            name?: string;
        }>;
        instagramIds?: Array<{
            pageId: string;
            threadId: string;
            username: string;
            instagramId?: string;
        }>;
        socials?: Array<{
            type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
            userid?: string;
            username: string;
            url?: string;
            verified?: boolean;
        }>;
        sharedSocials?: Array<{
            type: 'twitter' | 'facebook' | 'instagram' | 'linkedin' | 'pinterest';
            userid?: string;
            username: string;
            url?: string;
            verified?: boolean;
        }>;
        urls?: Array<{
            type?: 'website' | 'blog' | 'other';
            url: string;
        }>;
        locations?: Array<{
            type?: 'home' | 'work' | 'other';
            name?: string | null;
            address?: string | null;
            address2?: string | null;
            address3?: string | null;
            latitude?: number | null;
            longitude?: number | null;
            countryCode?: string | null;
            countryName?: string | null;
            regionCode?: string | null;
            regionName?: string | null;
            cityName?: string | null;
            zipCode?: string | null;
            areaCode?: string | null;
        }>;
        locale?: string | null;
        timeZone?: string | null;
        tags?: Array<string>;
        sentiment?: {
            polarity: -1 | 0 | 1;
            confidence: number;
        };
        custom?: {
            [key: string]: never;
        };
        birthdayAt?: string | null;
        gender?: 'm' | 'f';
        createdAt?: string;
        importedAt?: string;
        rev?: number;
        defaultLang?: string | null;
    };
    path: {
        /**
         * Unique ID of the customer.
         */
        id: string;
    };
    query?: {
        /**
         * Set to `true` to update the document. Otherwise, performs the same update as a PATCH request. Default value: `false`.
         */
        replace?: boolean;
    };
    url: '/customers/{id}';
};

export type UpdateCustomerResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                displayName: string;
                displayColor: string;
                displayIcon: string;
                externalId: string;
                externalIds: Array<{
                    externalId: string;
                    verified: boolean;
                    id: string | null;
                }>;
                sharedExternalIds: Array<unknown>;
                signedUpAt: string | null;
                avatarUrl: string | null;
                username: string | null;
                emails: Array<{
                    type: string;
                    email: string;
                }>;
                sharedEmails: Array<unknown>;
                phones: Array<{
                    type: string;
                    phone: string;
                }>;
                sharedPhones: Array<unknown>;
                socials: Array<{
                    type: string;
                    userid: string;
                    username: string;
                    url: string;
                }>;
                sharedSocials: Array<unknown>;
                urls: Array<{
                    url: string;
                }>;
                locations: Array<{
                    type: string;
                    address: string;
                }>;
                activeUsers: Array<unknown>;
                watchers: Array<unknown>;
                recentLocation: {
                    updatedAt: string;
                };
                locale: string;
                gender: string;
                tags: Array<string>;
                timeZone: string | null;
                birthdayAt: string | null;
                presence: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                lastSeenAt: string;
                lastActivityAt: string;
                lastCustomerActivityAt: string;
                lastMessageIn: {
                    sentAt: string;
                    sentiment: string | null;
                };
                lastConversation: {
                    id: string;
                    sentiment: {
                        confidence: number;
                        polarity: number;
                    };
                    tags: Array<unknown>;
                };
                defaultLang: string;
                conversationCounts: {
                    all: number;
                    snoozed: number;
                    open: number;
                    done: number;
                };
                preview: {
                    previewAt: string;
                    type: string;
                    text: string;
                    subject: string;
                };
                sentiment: {
                    polarity: number;
                    confidence: number;
                };
                progressiveStatus: string;
                verified: boolean;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type UpdateCustomerResponse = UpdateCustomerResponses[keyof UpdateCustomerResponses];

export type GetCustomerByEmailData = {
    body?: never;
    path: {
        /**
         * Email address of the customer.
         */
        email: string;
    };
    query?: never;
    url: '/customers/email={email}';
};

export type GetCustomerByEmailResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                displayName: string;
                displayColor: string;
                displayIcon: string;
                externalId: string;
                externalIds: Array<{
                    externalId: string;
                    verified: boolean;
                    id: string | null;
                }>;
                sharedExternalIds: Array<unknown>;
                signedUpAt: string | null;
                avatarUrl: string | null;
                username: string | null;
                emails: Array<{
                    email: string;
                    verified: boolean;
                    type: string;
                    id: string | null;
                }>;
                sharedEmails: Array<{
                    email: string;
                    verified: boolean;
                    type: string;
                    id: string | null;
                }>;
                phones: Array<unknown>;
                sharedPhones: Array<unknown>;
                socials: Array<unknown>;
                sharedSocials: Array<unknown>;
                urls: Array<unknown>;
                locations: Array<unknown>;
                activeUsers: Array<unknown>;
                watchers: Array<unknown>;
                recentLocation: {
                    updatedAt: string;
                };
                locale: string | null;
                timeZone: string | null;
                birthdayAt: string | null;
                gender: string | null;
                presence: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                lastSeenAt: string;
                lastActivityAt: string;
                lastCustomerActivityAt: string;
                lastMessageIn: {
                    sentAt: string;
                    sentiment: string | null;
                };
                lastConversation: {
                    id: string;
                    sentiment: {
                        confidence: number;
                        polarity: number;
                    };
                    tags: Array<unknown>;
                };
                conversationCounts: {
                    all: number;
                    snoozed: number;
                    open: number;
                    done: number;
                };
                preview: {
                    previewAt: string;
                    type: string;
                    text: string;
                    subject: string;
                };
                tags: Array<unknown>;
                sentiment: {
                    polarity: number;
                    confidence: number;
                };
                progressiveStatus: string;
                verified: boolean;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetCustomerByEmailResponse = GetCustomerByEmailResponses[keyof GetCustomerByEmailResponses];

export type GetCustomerByExternalIdData = {
    body?: never;
    path: {
        /**
         * External ID of the customer.
         */
        externalId: string;
    };
    query?: never;
    url: '/customers/externalId={externalId}';
};

export type GetCustomerByExternalIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                displayName: string;
                displayColor: string;
                displayIcon: string;
                externalId: string;
                externalIds: Array<{
                    externalId: string;
                    verified: boolean;
                    id: string | null;
                }>;
                sharedExternalIds: Array<unknown>;
                signedUpAt: string | null;
                avatarUrl: string | null;
                username: string | null;
                emails: Array<{
                    email: string;
                    verified: boolean;
                    type: string;
                    id: string | null;
                }>;
                sharedEmails: Array<{
                    email: string;
                    verified: boolean;
                    type: string;
                    id: string | null;
                }>;
                phones: Array<unknown>;
                sharedPhones: Array<unknown>;
                socials: Array<unknown>;
                sharedSocials: Array<unknown>;
                urls: Array<unknown>;
                locations: Array<unknown>;
                activeUsers: Array<unknown>;
                watchers: Array<unknown>;
                recentLocation: {
                    updatedAt: string;
                };
                locale: string | null;
                timeZone: string | null;
                birthdayAt: string | null;
                gender: string | null;
                presence: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                lastSeenAt: string;
                lastActivityAt: string;
                lastCustomerActivityAt: string;
                lastMessageIn: {
                    sentAt: string;
                    sentiment: string | null;
                };
                lastConversation: {
                    id: string;
                    sentiment: {
                        confidence: number;
                        polarity: number;
                    };
                    tags: Array<unknown>;
                };
                conversationCounts: {
                    all: number;
                    snoozed: number;
                    open: number;
                    done: number;
                };
                preview: {
                    previewAt: string;
                    type: string;
                    text: string;
                    subject: string;
                };
                tags: Array<unknown>;
                sentiment: {
                    polarity: number;
                    confidence: number;
                };
                progressiveStatus: string;
                verified: boolean;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetCustomerByExternalIdResponse = GetCustomerByExternalIdResponses[keyof GetCustomerByExternalIdResponses];

export type GetCustomerByPhoneData = {
    body?: never;
    path: {
        /**
         * Phone number of the customer (E.164 format).
         */
        phone: string;
    };
    query?: never;
    url: '/customers/phone={phone}';
};

export type GetCustomerByPhoneResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                displayName: string;
                displayColor: string;
                displayIcon: string;
                externalId: string;
                externalIds: Array<{
                    externalId: string;
                    verified: boolean;
                    id: string | null;
                }>;
                sharedExternalIds: Array<unknown>;
                signedUpAt: string | null;
                avatarUrl: string | null;
                username: string | null;
                emails: Array<{
                    email: string;
                    verified: boolean;
                    type: string;
                    id: string | null;
                }>;
                sharedEmails: Array<{
                    email: string;
                    verified: boolean;
                    type: string;
                    id: string | null;
                }>;
                phones: Array<{
                    phone: string;
                    type: string;
                }>;
                sharedPhones: Array<unknown>;
                socials: Array<unknown>;
                sharedSocials: Array<unknown>;
                urls: Array<unknown>;
                locations: Array<unknown>;
                activeUsers: Array<unknown>;
                watchers: Array<unknown>;
                recentLocation: {
                    updatedAt: string;
                };
                locale: string | null;
                timeZone: string | null;
                birthdayAt: string | null;
                gender: string | null;
                presence: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                lastSeenAt: string;
                lastActivityAt: string;
                lastCustomerActivityAt: string;
                lastMessageIn: {
                    sentAt: string;
                    sentiment: string | null;
                };
                lastConversation: {
                    id: string;
                    sentiment: {
                        confidence: number;
                        polarity: number;
                    };
                    tags: Array<unknown>;
                };
                conversationCounts: {
                    all: number;
                    snoozed: number;
                    open: number;
                    done: number;
                };
                preview: {
                    previewAt: string;
                    type: string;
                    text: string;
                    subject: string;
                };
                tags: Array<unknown>;
                sentiment: {
                    polarity: number;
                    confidence: number;
                };
                progressiveStatus: string;
                verified: boolean;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                messages: {
                    links: {
                        self: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetCustomerByPhoneResponse = GetCustomerByPhoneResponses[keyof GetCustomerByPhoneResponses];

export type GetCustomAttributeMetadataData = {
    body?: never;
    path: {
        /**
         * Resource for custom attribute metadata retrieval. Valid values: `company`, `conversation`, `customer`, `message`, and `kobject.*`.
         */
        resource: string;
    };
    query?: never;
    url: '/metadata/{resource}';
};

export type GetCustomAttributeMetadataResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                properties: {
                    shopifyCustomerIdNum: {
                        type: string;
                        displayName: string;
                    };
                    myCustomStr: {
                        modifiedBy: string;
                        modifiedAt: string;
                        updatedAt: string;
                        type: string;
                        enumeration: Array<string>;
                        displayName: string;
                    };
                    ordersId: {
                        modifiedBy: string;
                        modifiedAt: string;
                        updatedAt: string;
                        type: string;
                        target: string;
                        multi: boolean;
                        displayName: string;
                    };
                };
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetCustomAttributeMetadataResponse = GetCustomAttributeMetadataResponses[keyof GetCustomAttributeMetadataResponses];

export type UpdateCustomAttributeMetadataData = {
    body?: {
        standardProperties?: {
            [key: string]: unknown;
        };
        relationships?: {
            [key: string]: never;
        };
        properties?: {
            [key: string]: never;
        };
        validations?: Array<string>;
    };
    path: {
        /**
         * Resource for custom attribute metadata retrieval. Valid values: `company`, `conversation`, `customer`, `message`, and `kobject.*`.
         */
        resource: string;
    };
    query?: never;
    url: '/metadata/{resource}';
};

export type UpdateCustomAttributeMetadataResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                properties: {
                    shopifyCustomerIdNum: {
                        type: string;
                        displayName: string;
                    };
                    myCustomStr: {
                        modifiedBy: string;
                        modifiedAt: string;
                        updatedAt: string;
                        type: string;
                        enumeration: Array<string>;
                        displayName: string;
                        sensitive?: {
                            enabled?: boolean;
                            maskType?: string;
                        };
                    };
                    ordersId: {
                        modifiedBy: string;
                        modifiedAt: string;
                        updatedAt: string;
                        type: string;
                        target: string;
                        multi: boolean;
                        displayName: string;
                    };
                };
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type UpdateCustomAttributeMetadataResponse = UpdateCustomAttributeMetadataResponses[keyof UpdateCustomAttributeMetadataResponses];

export type GetDraftAttachmentsData = {
    body?: never;
    path: {
        /**
         * Unique draft ID.
         */
        id: string;
    };
    query?: never;
    url: '/drafts/{id}/attachments';
};

export type GetDraftAttachmentsResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            id: string;
            type: string;
            attributes: {
                name: string;
                contentType: string;
                contentLength: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                draft: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetDraftAttachmentsResponse = GetDraftAttachmentsResponses[keyof GetDraftAttachmentsResponses];

export type CreateDraftAttachmentData = {
    body?: {
        name: string;
        contentType: string;
        contentLength: number;
    };
    path: {
        /**
         * Unique draft ID.
         */
        id: string;
    };
    query?: never;
    url: '/drafts/{id}/attachments';
};

export type CreateDraftAttachmentResponses = {
    /**
     * OK
     */
    200: {
        data: {
            id: string;
            type: string;
            attributes: {
                name: string;
                contentType: string;
                contentLength: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                draft: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
                related: string;
            };
        };
    };
};

export type CreateDraftAttachmentResponse = CreateDraftAttachmentResponses[keyof CreateDraftAttachmentResponses];

export type DeleteDraftAttachmentData = {
    body?: never;
    path: {
        /**
         * Unique draft ID.
         */
        id: string;
        /**
         * Unique attachment ID.
         */
        attachmentId: string;
    };
    query?: never;
    url: '/drafts/{id}/attachments/{attachmentId}';
};

export type DeleteDraftAttachmentResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetDraftAttachmentData = {
    body?: never;
    path: {
        /**
         * Unique draft ID.
         */
        id: string;
        /**
         * Unique attachment ID.
         */
        attachmentId: string;
    };
    query?: never;
    url: '/drafts/{id}/attachments/{attachmentId}';
};

export type GetDraftAttachmentResponses = {
    /**
     * OK
     */
    200: {
        data: {
            id: string;
            type: string;
            attributes: {
                name: string;
                contentType: string;
                contentLength: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                draft: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
                related: string;
            };
        };
    };
};

export type GetDraftAttachmentResponse = GetDraftAttachmentResponses[keyof GetDraftAttachmentResponses];

export type GetaDraftForwardByIdData = {
    body?: never;
    path: {
        /**
         * Unique draft forward ID.
         */
        id: string;
    };
    query?: never;
    url: '/forwards/{id}';
};

export type GetaDraftForwardByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            id: string;
            type: string;
            attributes: {
                app: string;
                channel: string;
                body: string;
                status: string;
                from: {
                    name: string;
                    email: string;
                };
                to: Array<{
                    name: string;
                    email: string;
                }>;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
            };
            relationships: {
                org: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                customer: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                modifiedBy: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                attachments?: Array<{
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                }>;
            };
        };
    };
};

export type GetaDraftForwardByIdResponse = GetaDraftForwardByIdResponses[keyof GetaDraftForwardByIdResponses];

export type UpdateDraftForwardData = {
    /**
     * ## Request body details
     *
     * |  Name  | Detail |
     * | ------------- | ------------- |
     * | `body`  | The message body included with the forwarded conversation. |
     * | `from`  | The email address sending the forward. |
     * | `lang`  | Describes the language of the object's contents |
     * | `sendAt`  | A date in ISO format. Including this property will schedule the forward to be delivered. |
     * | `status`  | The status of the forward. A draft status indicates the forward is not scheduled for delivery and still editable. A scheduled status indicates the forward is scheduled for delivery by an email app (postmark or gmail). A draft will be update to a failed or sent status after a delivery attempt.  |
     * | `subject`  | The subject of the forwarded conversation. |
     * | `template`  | The ID of a template that should be used for the forward. |
     * | `to`  | The destination email address of the forward. This an array that can accept more than one email recipient. |
     * | `attachments` | The attachments to be sent along the forward. They must exist in S3
     *
     * ### `sendAt` property options
     * * If you update the `sendAt` property to a valid timestamp, the forward will be scheduled to be sent and updated to a "scheduled" status.
     * * If you ommit the `sendAt` property, the draft status will remain unchanged.
     */
    body?: {
        status?: 'draft' | 'sent' | 'failed';
        /**
         * A timestamp for a future date/time the drafted message to be sent at.
         */
        sendAt?: string;
        lang?: string | null;
        to?: Array<{
            email: string;
            name?: string;
        }>;
        from?: {
            email: string;
            name?: string;
        };
        body?: string;
        subject?: string;
        replyTo?: string;
        template?: string | null;
        payload?: {
            [key: string]: unknown;
        };
        attachments?: Array<{
            id: string;
            name: string;
            contentType: string;
            contentLength: number;
        }>;
    };
    path: {
        /**
         * Unique draft forward ID.
         *
         */
        id: string;
    };
    query?: never;
    url: '/forwards/{id}';
};

export type UpdateDraftForwardResponses = {
    /**
     * OK
     */
    200: {
        data: {
            id: string;
            type: string;
            attributes: {
                app: string;
                channel: string;
                body: string;
                status: string;
                from: {
                    name: string;
                    email: string;
                };
                to: Array<{
                    name: string;
                    email: string;
                }>;
                /**
                 * A timestamp for a future date/time the drafted message to be sent at.
                 */
                sendAt: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
            };
            relationships: {
                org: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                customer: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                modifiedBy: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                attachments?: Array<{
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                }>;
            };
        };
    };
};

export type UpdateDraftForwardResponse = UpdateDraftForwardResponses[keyof UpdateDraftForwardResponses];

export type GetForwardAttachmentsData = {
    body?: never;
    path: {
        /**
         * Unique forward ID.
         */
        id: string;
    };
    query?: never;
    url: '/forwards/{id}/attachments';
};

export type GetForwardAttachmentsResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            id: string;
            type: string;
            attributes: {
                name: string;
                contentType: string;
                contentLength: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                forward: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetForwardAttachmentsResponse = GetForwardAttachmentsResponses[keyof GetForwardAttachmentsResponses];

export type CreateForwardAttachmentData = {
    body?: {
        name: string;
        contentType: string;
        contentLength: number;
    };
    path: {
        /**
         * Unique forward ID.
         */
        id: string;
    };
    query?: never;
    url: '/forwards/{id}/attachments';
};

export type CreateForwardAttachmentResponses = {
    /**
     * OK
     */
    200: {
        data: {
            id: string;
            type: string;
            attributes: {
                name: string;
                contentType: string;
                contentLength: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                forward: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
                related: string;
            };
        };
    };
};

export type CreateForwardAttachmentResponse = CreateForwardAttachmentResponses[keyof CreateForwardAttachmentResponses];

export type DeleteForwardAttachmentData = {
    body?: never;
    path: {
        /**
         * Unique attachment ID.
         */
        id: string;
        /**
         * Unique attachment ID.
         */
        attachmentId: string;
    };
    query?: never;
    url: '/forwards/{id}/attachments/{attachmentId}';
};

export type DeleteForwardAttachmentResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetForwardAttachmentData = {
    body?: never;
    path: {
        /**
         * Unique forward ID.
         */
        id: string;
        /**
         * Unique attachment ID.
         */
        attachmentId: string;
    };
    query?: never;
    url: '/forwards/{id}/attachments/{attachmentId}';
};

export type GetForwardAttachmentResponses = {
    /**
     * OK
     */
    200: {
        data: {
            id: string;
            type: string;
            attributes: {
                name: string;
                contentType: string;
                contentLength: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                forward: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
                related: string;
            };
        };
    };
};

export type GetForwardAttachmentResponse = GetForwardAttachmentResponses[keyof GetForwardAttachmentResponses];

export type GetOutboundAccountsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
    };
    url: '/outboundAccounts';
};

export type GetOutboundAccountsResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            [key: string]: unknown;
        };
        data: Array<{
            type: string;
            attributes: {
                channel: string;
                name: string;
                account: string;
            };
        }>;
        links: {
            self: string;
        };
    };
};

export type GetOutboundAccountsResponse = GetOutboundAccountsResponses[keyof GetOutboundAccountsResponses];

export type DeleteDraftData = {
    body?: never;
    path: {
        /**
         * Unique draft ID.
         */
        id: string;
    };
    query?: never;
    url: '/drafts/{id}';
};

export type DeleteDraftResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type UpdateDraftData = {
    body?: {
        channel: 'email';
        conversation?: string;
        app?: 'gmail' | 'postmark';
        customer?: string;
        auto?: boolean;
        scheduled?: boolean;
        sendAt?: string | null;
        source?: 'bulk' | 'satisfaction' | 'biz-rules';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: Array<{
            email: string;
            name?: string;
        }> | {
            email: string;
            name?: string;
        };
        from?: {
            email: string;
            name?: string;
        };
        body?: string;
        htmlBody?: string;
        cc?: Array<{
            email: string;
            name?: string;
        }>;
        bcc?: Array<{
            email: string;
            name?: string;
        }>;
        subject?: string;
        replyTo?: string;
        headers?: Array<{
            name: string;
            value?: string;
        }>;
        templateType?: 'email-reply' | 'email-autoresponse' | 'email-satisfaction';
        template?: string | null;
        payload?: {
            [key: string]: unknown;
        };
    } | {
        channel: 'sms';
        app?: 'twilio' | 'zipwhip' | 'messagebird';
        conversation?: string;
        customer?: string;
        auto?: boolean;
        scheduled?: boolean;
        sendAt?: string | null;
        source?: 'bulk' | 'satisfaction' | 'biz-rules';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: string;
        from?: string;
        body?: string;
        payload?: {
            [key: string]: unknown;
        };
    } | {
        channel: 'whatsapp';
        app: 'twilio_whatsapp' | 'messagebird' | 'whatsapp';
        conversation?: string;
        customer?: string;
        auto?: boolean;
        scheduled?: boolean;
        sendAt?: string | null;
        source?: 'bulk' | 'satisfaction' | 'biz-rules';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: string;
        from?: string;
        body?: string;
        payload?: {
            [key: string]: unknown;
        };
    } | {
        channel: 'chat';
        app?: 'chat' | 'smooch';
        conversation?: string;
        customer?: string;
        auto?: boolean;
        scheduled?: boolean;
        sendAt?: string | null;
        source?: 'bulk' | 'satisfaction' | 'biz-rules';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: string;
        from?: string;
        body?: string;
        payload?: {
            [key: string]: unknown;
        };
        responseButtons?: Array<{
            label: string;
            value: string;
        }>;
        messageTemplate?: {
            id?: string;
            templateType: 'text';
            body: string;
        } | {
            id?: string;
            templateType: 'quick_replies';
            body?: string;
            actions: Array<{
                displayText: string;
                valueType: 'url' | 'text';
                value: string;
            }>;
        } | {
            id?: string;
            templateType: 'deflection';
            body?: string;
            actions: Array<{
                displayText: string;
                valueType: 'url' | 'text';
                value: string;
            }>;
            articles: Array<{
                id: string;
                type?: string;
                attributes?: {
                    [key: string]: unknown;
                };
            }>;
            followupText?: string;
        } | {
            id?: string;
            templateType: 'mll';
            body?: string;
            actions: {
                tree: {
                    [key: string]: unknown;
                };
            };
        };
        attachments?: Array<string>;
    } | {
        channel: 'facebook';
        conversation?: string;
        customer?: string;
        auto?: boolean;
        scheduled?: boolean;
        sendAt?: string | null;
        source?: 'bulk' | 'satisfaction' | 'biz-rules';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: string;
        from?: string;
        body?: string;
        payload?: {
            [key: string]: unknown;
        };
    } | {
        channel: 'twitter-tweet';
        conversation?: string;
        customer?: string;
        auto?: boolean;
        scheduled?: boolean;
        sendAt?: string;
        source?: 'bulk' | 'satisfaction' | 'biz-rules';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: string;
        from?: string;
        body?: string;
        payload?: {
            [key: string]: unknown;
        };
    } | {
        channel: 'twitter-dm';
        conversation?: string;
        customer?: string;
        auto?: boolean;
        scheduled?: boolean;
        sendAt?: string;
        source?: 'bulk' | 'satisfaction' | 'biz-rules';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: string;
        from?: string;
        body?: string;
        payload?: {
            [key: string]: unknown;
        };
    } | {
        channel: 'note';
        conversation?: string;
        customer?: string;
        scheduled?: boolean;
        sendAt?: string | null;
        source?: 'bulk' | 'biz-rules';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        body?: string;
        payload?: {
            [key: string]: unknown;
        };
        userMentions?: Array<{
            user?: string;
            team?: string;
        }>;
    } | {
        channel: 'instagram';
        conversation?: string;
        customer?: string;
        auto?: boolean;
        scheduled?: boolean;
        sendAt?: string | null;
        source?: 'bulk' | 'satisfaction' | 'biz-rules';
        lang?: string | null;
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        to?: string;
        from?: string;
        body?: string;
        payload?: {
            [key: string]: unknown;
        };
    };
    path: {
        /**
         * Unique draft ID.
         */
        id: string;
    };
    query?: never;
    url: '/drafts/{id}';
};

export type UpdateDraftResponses = {
    /**
     * OK
     */
    200: {
        data: {
            id: string;
            type: string;
            attributes: {
                channel: string;
                body: string;
                status: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
            };
            relationships: {
                org: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                customer: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                createdBy: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
                modifiedBy: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
            };
        };
    };
};

export type UpdateDraftResponse = UpdateDraftResponses[keyof UpdateDraftResponses];

export type BulkDeleteKObjectsData = {
    body?: never;
    path: {
        /**
         * Klass name of KObjects (custom objects).
         */
        name: string;
    };
    query: {
        /**
         * Comma-separated list of unique KObject IDs.
         */
        ids: string;
    };
    url: '/klasses/{name}/bulk';
};

export type BulkDeleteKObjectsResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                ids: Array<string>;
                context: string;
                status: string;
                v2: boolean;
                payload: {
                    api: {
                        data: {
                            [key: string]: unknown;
                        };
                        path: string;
                        user: {
                            id: string;
                            userType: string;
                            roles: Array<string>;
                            orgName: string;
                            subject: string;
                            org: string;
                        };
                        requestId: string;
                        service: string;
                        method: string;
                    };
                };
                createdAt: string;
                updatedAt: string;
                completed: boolean;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type BulkDeleteKObjectsResponse = BulkDeleteKObjectsResponses[keyof BulkDeleteKObjectsResponses];

export type BulkCreateKObjectsData = {
    body?: Array<{
        customer?: string;
        company?: string;
        externalId?: string;
        title: string;
        description?: string;
        images?: Array<string>;
        icon?: string;
        data?: {
            [key: string]: unknown;
        };
        custom?: {
            [key: string]: never;
        };
        tags?: Array<string>;
        createdAt?: string;
        importedAt?: string;
    }>;
    path: {
        /**
         * Klass name of KObjects (custom objects).
         */
        name: string;
    };
    query?: never;
    url: '/klasses/{name}/bulk';
};

export type BulkCreateKObjectsResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                ids: Array<unknown>;
                context: string;
                status: string;
                v2: boolean;
                payload: {
                    api: {
                        data: Array<{
                            title: string;
                            customer: string;
                            externalId: string;
                            description: string;
                        }>;
                        path: string;
                        user: {
                            id: string;
                            userType: string;
                            roles: Array<string>;
                            orgName: string;
                            subject: string;
                            org: string;
                        };
                        requestId: string;
                        service: string;
                        method: string;
                    };
                };
                createdAt: string;
                updatedAt: string;
                completed: boolean;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type BulkCreateKObjectsResponse = BulkCreateKObjectsResponses[keyof BulkCreateKObjectsResponses];

export type BulkBatchUpdateKObjectsData = {
    body?: Array<{
        id: string;
        externalId?: string;
        title?: string;
        description?: string;
        images?: Array<string>;
        icon?: string;
        data?: {
            [key: string]: unknown;
        };
        custom?: {
            [key: string]: never;
        };
        tags?: Array<string>;
        createdAt?: string;
        importedAt?: string;
        rev?: number;
    }>;
    path: {
        /**
         * Klass name of KObjects (custom objects).
         */
        name: string;
    };
    query?: {
        /**
         * Comma-separated list of unique KObject IDs.
         */
        ids?: string;
    };
    url: '/klasses/{name}/bulk';
};

export type BulkBatchUpdateKObjectsResponses = {
    /**
     * Success
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                ids: Array<unknown>;
                context: string;
                status: string;
                v2: boolean;
                payload: {
                    api: {
                        data: Array<{
                            id: string;
                            custom: {
                                shippingStatusStr: string;
                            };
                        }>;
                        path: string;
                        user: {
                            id: string;
                            userType: string;
                            roles: Array<string>;
                            orgName: string;
                            subject: string;
                            org: string;
                        };
                        requestId: string;
                        service: string;
                        method: string;
                    };
                };
                createdAt: string;
                updatedAt: string;
                completed: boolean;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type BulkBatchUpdateKObjectsResponse = BulkBatchUpdateKObjectsResponses[keyof BulkBatchUpdateKObjectsResponses];

export type GetKObjectsData = {
    body?: never;
    path: {
        /**
         * Klass name of the KObjects (custom objects).
         */
        name: string;
    };
    query?: {
        /**
         * `date-time` string in Internet Date/Time format ([ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6)).
         */
        fromDate?: string;
    };
    url: '/klasses/{name}';
};

export type GetKObjectsResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                title: string;
                icon: string;
                images: Array<string>;
                s3DataUrl?: string;
                custom: {
                    [key: string]: unknown;
                };
                tags: Array<unknown>;
                updatedAt: string;
                createdAt: string;
                rev: number;
                klassDisplayName?: string;
                klassMixins?: Array<'assignable'>;
                firstDone?: {
                    time?: number;
                    businessTime?: number;
                    createdAt?: string;
                    createdBy?: string;
                    createdByTeam?: string;
                    assignedTeam?: string;
                    assignedUser?: string;
                    commentCount?: number;
                };
                lastDone?: {
                    time?: number;
                    businessTime?: number;
                    createdAt?: string;
                    createdBy?: string;
                    createdByTeam?: string;
                    assignedTeam?: string;
                    assignedUser?: string;
                    commentCount?: number;
                };
                doneCount?: number;
                reopenCount?: number;
                reopenFromDoneCount?: number;
                queue?: string;
                assignedUser?: string;
                status?: 'open' | 'done';
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                queue?: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                klass: {
                    link: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetKObjectsResponse = GetKObjectsResponses[keyof GetKObjectsResponses];

export type CreateKObjectData = {
    body?: {
        customer?: string;
        company?: string;
        externalId?: string;
        title: string;
        description?: string;
        images?: Array<string>;
        icon?: string;
        data?: {
            [key: string]: unknown;
        };
        custom?: {
            [key: string]: never;
        };
        tags?: Array<string>;
        createdAt?: string;
        importedAt?: string;
    };
    path: {
        /**
         * Klass name of the KObjects (custom objects).
         */
        name: string;
    };
    query?: never;
    url: '/klasses/{name}';
};

export type CreateKObjectResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                title: string;
                icon: string;
                images: Array<string>;
                custom: {
                    orderStatusStr: string;
                    shippingStatusStr: string;
                    billingStatusStr: string;
                    specialInstructionsStr: string;
                    orderNumberNum: number;
                    orderDescriptionStr: string;
                    totalPriceNum: number;
                    orderUpdatedAt: string;
                };
                tags: Array<unknown>;
                updatedAt: string;
                createdAt: string;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                klass: {
                    link: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateKObjectResponse = CreateKObjectResponses[keyof CreateKObjectResponses];

export type DeleteKObjectData = {
    body?: never;
    path: {
        /**
         * Klass name of the KObject.
         */
        name: string;
        /**
         * Unique ID of the KObject.
         */
        id: string;
    };
    query?: never;
    url: '/klasses/{name}/{id}';
};

export type DeleteKObjectResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetKObjectData = {
    body?: never;
    path: {
        /**
         * Klass name of the KObject.
         */
        name: string;
        /**
         * Unique ID of the KObject.
         */
        id: string;
    };
    query?: never;
    url: '/klasses/{name}/{id}';
};

export type GetKObjectResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                title: string;
                icon: string;
                images: Array<string>;
                custom: {
                    orderStatusStr: string;
                    shippingStatusStr: string;
                    billingStatusStr: string;
                    specialInstructionsStr: string;
                    orderNumberNum: number;
                    orderDescriptionStr: string;
                    totalPriceNum: number;
                    orderUpdatedAt: string;
                };
                tags: Array<unknown>;
                updatedAt: string;
                createdAt: string;
                rev: number;
                firstDone?: {
                    time?: number;
                    businessTime?: number;
                    createdAt?: string;
                    createdBy?: string;
                    createdByTeam?: string;
                    assignedTeam?: string;
                    assignedUser?: string;
                    commentCount?: number;
                };
                lastDone?: {
                    time?: number;
                    businessTime?: number;
                    createdAt?: string;
                    createdBy?: string;
                    createdByTeam?: string;
                    assignedTeam?: string;
                    assignedUser?: string;
                    commentCount?: number;
                };
                doneCount?: number;
                reopenCount?: number;
                reopenFromDoneCount?: number;
                queue?: string;
                assignedUser?: string;
                status?: 'open' | 'done';
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                klass: {
                    link: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetKObjectResponse = GetKObjectResponses[keyof GetKObjectResponses];

export type UpdateKObjectData = {
    body?: {
        externalId?: string;
        title?: string;
        description?: string;
        images?: Array<string>;
        icon?: string;
        data?: {
            [key: string]: unknown;
        };
        custom?: {
            [key: string]: never;
        };
        tags?: Array<string>;
        createdAt?: string;
        importedAt?: string;
        rev?: number;
    };
    path: {
        /**
         * Klass name of the KObject.
         */
        name: string;
        /**
         * Unique ID of the KObject.
         */
        id: string;
    };
    query?: never;
    url: '/klasses/{name}/{id}';
};

export type UpdateKObjectResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                title: string;
                description: string | null;
                icon: string;
                images: Array<string>;
                custom: {
                    orderUpdatedAt: string;
                    totalPriceNum: number;
                    orderDescriptionStr: string;
                    orderNumberNum: number;
                    specialInstructionsStr: string;
                    billingStatusStr: string;
                    shippingStatusStr: string;
                    orderStatusStr: string;
                    refundedBool: boolean;
                };
                tags: Array<unknown>;
                updatedAt: string;
                createdAt: string;
                rev: number;
                firstDone?: {
                    time?: number;
                    businessTime?: number;
                    createdAt?: string;
                    createdBy?: string;
                    createdByTeam?: string;
                    assignedTeam?: string;
                    assignedUser?: string;
                    commentCount?: number;
                };
                lastDone?: {
                    time?: number;
                    businessTime?: number;
                    createdAt?: string;
                    createdBy?: string;
                    createdByTeam?: string;
                    assignedTeam?: string;
                    assignedUser?: string;
                    commentCount?: number;
                };
                doneCount?: number;
                reopenCount?: number;
                reopenFromDoneCount?: number;
                queue?: string;
                assignedUser?: string;
                status?: 'open' | 'done';
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                klass: {
                    link: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type UpdateKObjectResponse = UpdateKObjectResponses[keyof UpdateKObjectResponses];

export type GetKlassesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Option to filter Klass based on the status. Default value: `enabled`.
         */
        status?: 'enabled' | 'disabled' | 'existing_only';
    };
    url: '/klasses';
};

export type GetKlassesResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                name: string;
                displayName: string;
                icon?: string;
                color?: string;
                klassSchema?: string;
                appVersion?: string;
                appDisabled?: boolean;
                status: string;
                mixins?: Array<'commentable' | 'assignable' | 'editable' | 'creatable'>;
                updatedAt: string;
                createdAt: string;
                s3DataUrl?: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                kobjects: {
                    links: {
                        self: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetKlassesResponse = GetKlassesResponses[keyof GetKlassesResponses];

export type CreateaKlassData = {
    body?: {
        name: string;
        displayName?: string;
        icon?: string;
        color?: string;
        jsonSchema?: unknown;
        klassSchema?: 'task';
        mixins?: Array<'commentable' | 'assignable' | 'editable' | 'creatable'>;
        status?: 'enabled' | 'disabled';
    };
    path?: never;
    query?: never;
    url: '/klasses';
};

export type CreateaKlassResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                status: string;
                updatedAt: string;
                createdAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                kobjects: {
                    links: {
                        self: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateaKlassResponse = CreateaKlassResponses[keyof CreateaKlassResponses];

export type DeleteKlassData = {
    body?: never;
    path: {
        /**
         * Unique Klass ID.
         */
        id: string;
    };
    query?: never;
    url: '/klasses/{id}';
};

export type DeleteKlassResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetKlassData = {
    body?: never;
    path: {
        /**
         * Unique Klass ID.
         */
        id: string;
    };
    query?: never;
    url: '/klasses/{id}';
};

export type GetKlassResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                displayName?: string;
                icon: string;
                color?: string;
                appDisabled?: boolean;
                status: string;
                mixins?: Array<'commentable' | 'assignable' | 'editable' | 'creatable'>;
                updatedAt: string;
                createdAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                kobjects: {
                    links: {
                        self: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetKlassResponse = GetKlassResponses[keyof GetKlassResponses];

export type UpdateKlassData = {
    body?: {
        displayName?: string;
        icon?: string;
        color?: string;
        jsonSchema?: unknown;
        klassSchema?: 'task';
        mixins?: Array<'commentable' | 'assignable' | 'editable' | 'creatable'>;
        status?: 'enabled' | 'disabled';
    };
    path: {
        /**
         * Unique Klass ID.
         */
        id: string;
    };
    query?: never;
    url: '/klasses/{id}';
};

export type UpdateKlassResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                name: string;
                displayName?: string;
                appDisabled?: boolean;
                mixins?: Array<'commentable' | 'assignable' | 'editable' | 'creatable'>;
                icon: string;
                status: string;
                updatedAt: string;
                createdAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                kobjects: {
                    links: {
                        self: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type UpdateKlassResponse = UpdateKlassResponses[keyof UpdateKlassResponses];

export type CreateMediaData = {
    /**
     * Schema for media create operations
     */
    body?: {
        name: string;
        contentType: string;
        contentLength: number;
    };
    path?: never;
    query?: never;
    url: '/media';
};

export type CreateMediaResponses = {
    /**
     * Created
     */
    201: {
        data: {
            id: string;
            type: string;
            attributes: {
                name: string;
                contentType: string;
                contentLength: number;
                redacted: boolean;
                uploaded: boolean;
                createdAt: string;
                updatedAt: string;
                context: string;
            };
            relationships: {
                org: {
                    data: {
                        id: string;
                        type: string;
                    };
                    links: {
                        self: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
        meta: {
            provider: string;
            upload: {
                url: string;
                fields: {
                    key: string;
                    acl: string;
                    'Content-Type': string;
                    'X-Amz-Meta-Attachment-Id': string;
                    bucket: string;
                    'X-Amz-Algorithm': string;
                    'X-Amz-Credential': string;
                    'X-Amz-Date': string;
                    Policy: string;
                    'X-Amz-Signature': string;
                };
            };
        };
    };
};

export type CreateMediaResponse = CreateMediaResponses[keyof CreateMediaResponses];

export type GetMediabyIdData = {
    body?: never;
    path: {
        /**
         * Unique media object ID. Provide a comma-separated list of `id`s to retrieve an array of media objects instead.
         */
        id: string;
    };
    query?: never;
    url: '/media/{id}';
};

export type GetMediabyIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            id: string;
            type: string;
            attributes: {
                name: string;
                contentType: string;
                contentLength: number;
                redacted: boolean;
                uploaded: boolean;
                createdAt: string;
                updatedAt: string;
                context: string;
            };
            relationships: {
                org: {
                    data: {
                        id: string;
                        type: string;
                    };
                    links: {
                        self: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
        meta: {
            provider: string;
            upload: {
                url: string;
                fields: {
                    key: string;
                    acl: string;
                    'Content-Type': string;
                    'X-Amz-Meta-Attachment-Id': string;
                    bucket: string;
                    'X-Amz-Algorithm': string;
                    'X-Amz-Credential': string;
                    'X-Amz-Date': string;
                    Policy: string;
                    'X-Amz-Signature': string;
                };
            };
        };
    };
};

export type GetMediabyIdResponse = GetMediabyIdResponses[keyof GetMediabyIdResponses];

export type UpdateMediaData = {
    /**
     * Schema for media update operations
     */
    body?: {
        name?: string;
        redacted?: boolean;
    };
    path: {
        /**
         * Unique media object ID.
         */
        id: string;
    };
    query?: never;
    url: '/media/{id}';
};

export type UpdateMediaResponses = {
    /**
     * OK
     */
    200: {
        data: {
            id: string;
            type: string;
            attributes: {
                name: string;
                contentType: string;
                contentLength: number;
                redacted: boolean;
                uploaded: boolean;
                createdAt: string;
                updatedAt: string;
                context: string;
            };
            relationships: {
                org: {
                    data: {
                        id: string;
                        type: string;
                    };
                    links: {
                        self: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
        meta: {
            provider: string;
            upload: {
                url: string;
                fields: {
                    key: string;
                    acl: string;
                    'Content-Type': string;
                    'X-Amz-Meta-Attachment-Id': string;
                    bucket: string;
                    'X-Amz-Algorithm': string;
                    'X-Amz-Credential': string;
                    'X-Amz-Date': string;
                    Policy: string;
                    'X-Amz-Signature': string;
                };
            };
        };
    };
};

export type UpdateMediaResponse = UpdateMediaResponses[keyof UpdateMediaResponses];

export type BulkCreateMessagesData = {
    body?: Array<{
        id?: string;
        externalId?: string;
        customer?: string;
        conversation?: string;
        reference?: {
            message: string;
            type: 'reply' | 'replyAll' | 'forward';
        };
        channel: 'email' | 'sms' | 'chat' | 'facebook' | 'twitter-dm' | 'twitter-tweet' | 'voice' | 'instagram' | 'whatsapp';
        preview?: string;
        subject?: string;
        direction?: 'in' | 'out';
        app: string;
        size?: number;
        related?: string;
        status?: 'sent' | 'received' | 'error';
        error?: {
            status?: number;
            code?: string;
            title?: string;
            detail?: string;
            source?: {
                [key: string]: unknown;
            };
            meta?: {
                [key: string]: unknown;
            };
            links?: {
                [key: string]: unknown;
            };
        };
        errorAt?: string;
        /**
         * If true, message was automatically generated from a Kustomer workflow or auto-response feature. If set to true, this message will be excluded from reporting metrics. If false, message was created by a manual method.
         */
        auto?: boolean;
        sentAt?: string;
        source?: 'bulk' | 'satisfaction';
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        attachments?: Array<{
            _id: string;
            name: string;
            contentType: string;
            contentLength: number;
            sourceId?: string;
        }> | Array<string>;
        location?: {
            name?: string;
            address?: string;
            address2?: string;
            address3?: string;
            latitude?: number;
            longitude?: number;
            countryCode?: string;
            countryName?: string;
            regionCode?: string;
            regionName?: string;
            cityName?: string;
            zipCode?: string;
            areaCode?: string;
        };
        meta?: {
            [key: string]: unknown;
        };
        custom?: {
            [key: string]: never;
        };
        sentiment?: {
            polarity: -1 | 0 | 1;
            confidence: number;
        };
        createdAt?: string;
        modifiedAt?: string;
        createdBy?: string;
        modifiedBy?: string;
        importedAt?: string;
        lang?: string | null;
        queue?: unknown & {
            id?: string;
            external?: 'amazon-connect';
        };
    }>;
    path?: never;
    query?: never;
    url: '/messages/bulk';
};

export type BulkCreateMessagesResponses = {
    /**
     * Success
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                ids: Array<unknown>;
                context: string;
                status: string;
                v2: boolean;
                payload: {
                    api: {
                        data: Array<{
                            id: string;
                            app: string;
                            channel: string;
                            preview: string;
                            subject: string;
                            size: number;
                            createdAt: string;
                        }>;
                        path: string;
                        user: {
                            id: string;
                            userType: string;
                            roles: Array<string>;
                            orgName: string;
                            subject: string;
                            org: string;
                        };
                        requestId: string;
                        service: string;
                        method: string;
                    };
                };
                createdAt: string;
                updatedAt: string;
                completed: boolean;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type BulkCreateMessagesResponse = BulkCreateMessagesResponses[keyof BulkCreateMessagesResponses];

export type BulkBatchUpdateMessagesData = {
    body?: Array<{
        id: string;
        conversation?: string;
        externalId?: string | null;
        preview?: string | null;
        subject?: string | null;
        status?: 'sent' | 'received' | 'error';
        error?: {
            status?: number;
            code?: string;
            title?: string;
            detail?: string;
            source?: {
                [key: string]: unknown;
            };
            meta?: {
                [key: string]: unknown;
            };
            links?: {
                [key: string]: unknown;
            };
        };
        errorAt?: string;
        sentAt?: string | null;
        size?: number;
        attachments?: Array<{
            _id: string;
            name: string;
            contentType: string;
            contentLength: number;
            sourceId?: string;
        }>;
        meta?: {
            [key: string]: unknown;
        };
        custom?: {
            [key: string]: never;
        };
        related?: string;
        sentiment?: {
            polarity: -1 | 0 | 1;
            confidence: number;
        };
        createdAt?: string;
        modifiedAt?: string;
        updatedAt?: string;
        createdBy?: string;
        modifiedBy?: string | null;
        lang?: string | null;
    }>;
    path?: never;
    query?: {
        /**
         * Comma-separated list of unique message IDs.
         */
        ids?: string;
    };
    url: '/messages/bulk';
};

export type BulkBatchUpdateMessagesResponses = {
    /**
     * Success
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                ids: Array<unknown>;
                context: string;
                status: string;
                v2: boolean;
                payload: {
                    api: {
                        data: Array<{
                            id: string;
                            custom: {
                                foobar: boolean;
                            };
                        }>;
                        path: string;
                        user: {
                            id: string;
                            userType: string;
                            roles: Array<string>;
                            orgName: string;
                            subject: string;
                            org: string;
                        };
                        requestId: string;
                        service: string;
                        method: string;
                    };
                };
                createdAt: string;
                updatedAt: string;
                completed: boolean;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type BulkBatchUpdateMessagesResponse = BulkBatchUpdateMessagesResponses[keyof BulkBatchUpdateMessagesResponses];

export type RedactMessageData = {
    body?: {
        preview?: string;
    } | {
        attachments?: Array<string>;
    } | {
        meta?: {
            [key: string]: unknown;
        };
    };
    path: {
        /**
         * Unique message object ID.
         */
        id: string;
    };
    query?: never;
    url: '/messages/{id}/redactions';
};

export type RedactMessageResponses = {
    /**
     * Created
     */
    201: {
        data: {
            id: string;
            type: string;
            attributes: {
                preview: string;
                meta?: string;
            };
            relationships: {
                org: {
                    data: {
                        id: string;
                        type: string;
                    };
                    links: {
                        self: string;
                    };
                };
                createdBy?: {
                    data: {
                        id: string;
                        type: string;
                    };
                    links: {
                        self: string;
                    };
                };
                message?: {
                    data: {
                        id: string;
                        type: string;
                    };
                    links: {
                        self: string;
                    };
                };
                conversation?: {
                    data: {
                        id: string;
                        type: string;
                    };
                    links: {
                        self: string;
                    };
                };
                customer?: {
                    data: {
                        id: string;
                        type: string;
                    };
                    links: {
                        self: string;
                    };
                };
                attachments?: Array<{
                    data?: {
                        id: string;
                        type: string;
                    };
                    links?: {
                        self: string;
                    };
                }>;
            };
        };
    };
};

export type RedactMessageResponse = RedactMessageResponses[keyof RedactMessageResponses];

export type GetMessagesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
        /**
         * List of resources to include in this response. Use a comma to separate resources. Supports the `attachments` resource.
         */
        include?: string;
        /**
         * Option to sort results in descending order.
         */
        sort?: string;
    };
    url: '/messages';
};

export type GetMessagesErrors = {
    /**
     * Unauthorized
     */
    401: {
        errors: Array<{
            status: string;
            code: string;
            title: string;
            source: {
                parameters: string;
            };
        }>;
    };
};

export type GetMessagesError = GetMessagesErrors[keyof GetMessagesErrors];

export type GetMessagesResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                externalId: string;
                channel: string;
                app: string;
                size: number;
                direction: string;
                preview: string;
                sentiment: {
                    [key: string]: unknown;
                };
                meta: {
                    inReplyTo: string;
                    recipient: {
                        mailboxHash: string;
                        email: string;
                    };
                    cc: Array<unknown>;
                    to: Array<{
                        email: string;
                    }>;
                    from: string;
                    subject: string;
                };
                status: string;
                sentAt: string;
                createdAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
                related: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetMessagesResponse = GetMessagesResponses[keyof GetMessagesResponses];

export type CreateMessageData = {
    body?: {
        id?: string;
        /**
         * The unique identifier from the channel the message. For example, a message ID from Instagram for a specific DM.
         */
        externalId?: string;
        /**
         * The customer's name
         */
        customer?: string;
        /**
         * The conversation ID of the conversation message is to be added to.
         */
        conversation?: string;
        reference?: {
            /**
             * For email channel only. The unique message ID for an email that is a reply, reply-all, or forward.
             */
            message: string;
            /**
             * Indicate if the message is a reply, reply-all, or forward.
             */
            type: 'reply' | 'replyAll' | 'forward';
        };
        /**
         * The communication channel of the message: email, SMS, chat, facebook, twitter-dm, twitter-tweet, voice, instagram, whatsapp
         */
        channel: 'email' | 'sms' | 'chat' | 'facebook' | 'twitter-dm' | 'twitter-tweet' | 'voice' | 'instagram' | 'whatsapp';
        preview?: string;
        subject?: string;
        /**
         * Indicates if the message is coming in from a customer or sent out by an agent.
         */
        direction: 'in' | 'out';
        app: string;
        size?: number;
        related?: string;
        status?: 'sent' | 'received' | 'error';
        error?: {
            status?: number;
            code?: string;
            title?: string;
            detail?: string;
            source?: {
                [key: string]: unknown;
            };
            meta?: {
                [key: string]: unknown;
            };
            links?: {
                [key: string]: unknown;
            };
        };
        /**
         * The timestamp for when the message errored out.
         */
        errorAt?: string;
        /**
         * If true, message was automatically generated from a Kustomer workflow or auto-response feature. If set to true, this message will be excluded from reporting metrics. If false, message was created by a manual method.
         */
        auto?: boolean;
        /**
         * The timestamp for when the message was sent.
         */
        sentAt?: string;
        /**
         * Indicate if the message is part of a bulk message (bulk) or CSAT (Customer Satisfaction Survey) (satisfaction) message.
         */
        source?: 'bulk' | 'satisfaction';
        shortcuts?: Array<string>;
        kbArticles?: Array<string>;
        attachments?: Array<{
            _id: string;
            name: string;
            contentType: string;
            contentLength: number;
            sourceId?: string;
        }> | Array<string>;
        location?: {
            name?: string;
            address?: string;
            address2?: string;
            address3?: string;
            latitude?: number;
            longitude?: number;
            countryCode?: string;
            countryName?: string;
            regionCode?: string;
            regionName?: string;
            cityName?: string;
            zipCode?: string;
            areaCode?: string;
        };
        meta?: {
            [key: string]: unknown;
        };
        custom?: {
            [key: string]: never;
        };
        sentiment?: {
            polarity: -1 | 0 | 1;
            confidence: number;
        };
        createdAt?: string;
        modifiedAt?: string;
        createdBy?: string;
        modifiedBy?: string;
        importedAt?: string;
        /**
         * The language the message is in.
         */
        lang?: string | null;
        queue?: unknown & {
            id?: string;
            external?: 'amazon-connect';
        };
    };
    path?: never;
    query?: never;
    url: '/messages';
};

export type CreateMessageResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                channel: string;
                app: string;
                size: string;
                direction: string;
                preview: string;
                subject: string;
                meta: string;
                status: string;
                sentAt: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
                lang: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateMessageResponse = CreateMessageResponses[keyof CreateMessageResponses];

export type GetMessageData = {
    body?: never;
    path: {
        /**
         * Unique message ID.
         */
        id: string;
    };
    query?: never;
    url: '/messages/{id}';
};

export type GetMessageResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                externalId: string;
                channel: string;
                app: string;
                size: number;
                direction: string;
                preview: string;
                sentiment: {
                    confidence: number;
                    polarity: number;
                };
                meta: {
                    subject: string;
                    from: string;
                    to: Array<{
                        email: string;
                    }>;
                    cc: Array<unknown>;
                    recipient: {
                        email: string;
                        mailboxHash: string;
                    };
                    inReplyTo: string;
                };
                status: string;
                lang: string;
                sentAt: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
                related: string;
            };
        };
    };
};

export type GetMessageResponse = GetMessageResponses[keyof GetMessageResponses];

export type UpdateMessageAttributesData = {
    body?: {
        conversation?: string;
        externalId?: string | null;
        preview?: string | null;
        subject?: string | null;
        status?: 'sent' | 'received' | 'error';
        error?: {
            status?: number;
            code?: string;
            title?: string;
            detail?: string;
            source?: {
                [key: string]: unknown;
            };
            meta?: {
                [key: string]: unknown;
            };
            links?: {
                [key: string]: unknown;
            };
        };
        errorAt?: string;
        sentAt?: string | null;
        size?: number;
        attachments?: Array<{
            _id: string;
            name: string;
            contentType: string;
            contentLength: number;
            sourceId?: string;
        }>;
        meta?: {
            [key: string]: unknown;
        };
        custom?: {
            [key: string]: never;
        };
        related?: string;
        sentiment?: {
            polarity: -1 | 0 | 1;
            confidence: number;
        };
        createdAt?: string;
        modifiedAt?: string;
        updatedAt?: string;
        createdBy?: string;
        modifiedBy?: string | null;
        lang?: string | null;
    };
    path: {
        /**
         * Unique message ID.
         */
        id: string;
    };
    query?: never;
    url: '/messages/{id}';
};

export type UpdateMessageAttributesResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                externalId: string;
                channel: string;
                app: string;
                size: number;
                direction: string;
                preview: string;
                sentiment: {
                    confidence: number;
                    polarity: number;
                };
                meta: {
                    subject: string;
                    from: string;
                    to: Array<{
                        email: string;
                    }>;
                    cc: Array<unknown>;
                    recipient: {
                        email: string;
                        mailboxHash: string;
                    };
                    inReplyTo: string;
                };
                status: string;
                lang: string | null;
                sentAt: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
                related: string;
            };
        };
    };
};

export type UpdateMessageAttributesResponse = UpdateMessageAttributesResponses[keyof UpdateMessageAttributesResponses];

export type UpdateMessageData = {
    body?: {
        conversation?: string;
        externalId?: string | null;
        preview?: string | null;
        subject?: string | null;
        status?: 'sent' | 'received' | 'error';
        error?: {
            status?: number;
            code?: string;
            title?: string;
            detail?: string;
            source?: {
                [key: string]: unknown;
            };
            meta?: {
                [key: string]: unknown;
            };
            links?: {
                [key: string]: unknown;
            };
        };
        errorAt?: string;
        sentAt?: string | null;
        size?: number;
        attachments?: Array<{
            _id: string;
            name: string;
            contentType: string;
            contentLength: number;
            sourceId?: string;
        }>;
        meta?: {
            [key: string]: unknown;
        };
        custom?: {
            [key: string]: never;
        };
        related?: string;
        sentiment?: {
            polarity: -1 | 0 | 1;
            confidence: number;
        };
        createdAt?: string;
        modifiedAt?: string;
        updatedAt?: string;
        createdBy?: string;
        spam?: boolean;
        modifiedBy?: string | null;
        lang?: string | null;
        reactions?: Array<{
            subjectId: string;
            subjectType: 'customer' | 'user';
            name: 'love';
            createdAt?: string;
        }>;
    };
    path: {
        /**
         * Unique message ID.
         */
        id: string;
    };
    query?: {
        /**
         * Set to `true` to update the document. Otherwise, performs the same update as a PATCH request. Default value: `false`.
         */
        replace?: boolean;
    };
    url: '/messages/{id}';
};

export type UpdateMessageResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                externalId: string;
                channel: string;
                app: string;
                size: number;
                direction: string;
                preview: string;
                sentiment: {
                    confidence: number;
                    polarity: number;
                };
                meta: {
                    subject: string;
                    from: string;
                    to: Array<{
                        email: string;
                    }>;
                    cc: Array<unknown>;
                    recipient: {
                        email: string;
                        mailboxHash: string;
                    };
                    inReplyTo: string;
                };
                status: string;
                lang: string;
                sentAt: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
                related: string;
            };
        };
    };
};

export type UpdateMessageResponse = UpdateMessageResponses[keyof UpdateMessageResponses];

export type GetMessagebyExternalIdData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/messages/externalid=:externalId';
};

export type GetMessagebyExternalIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                externalId: string;
                channel: string;
                app: string;
                size: number;
                direction: string;
                preview: string;
                sentiment: {
                    confidence: number;
                    polarity: number;
                };
                meta: {
                    subject: string;
                    from: string;
                    to: Array<{
                        email: string;
                    }>;
                    cc: Array<unknown>;
                    recipient: {
                        email: string;
                        mailboxHash: string;
                    };
                    inReplyTo: string;
                };
                status: string;
                sentAt: string;
                createdAt: string;
                updatedAt: string;
                modifiedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
                related: string;
            };
        };
    };
};

export type GetMessagebyExternalIdResponse = GetMessagebyExternalIdResponses[keyof GetMessagebyExternalIdResponses];

export type BulkCreateNotesData = {
    body?: Array<{
        id?: string;
        conversation: string;
        externalId?: string;
        body: string;
        userMentions?: Array<{
            user?: string;
            team?: string;
        }>;
        attachments?: Array<{
            _id: string;
            name: string;
            contentType: string;
            contentLength: number;
            sourceId?: string;
        }>;
        createdAt?: string;
        modifiedAt?: string;
        createdBy?: string;
        modifiedBy?: string;
        importedAt?: string;
        lang?: string | null;
    }>;
    path?: never;
    query?: never;
    url: '/notes/bulk';
};

export type BulkCreateNotesResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                ids: Array<unknown>;
                context: string;
                status: string;
                v2: boolean;
                payload: {
                    api: {
                        data: Array<{
                            conversation: string;
                            body: string;
                            userMentions: Array<{
                                user?: string;
                                team?: string;
                            }>;
                        }>;
                        path: string;
                        user: {
                            id: string;
                            userType: string;
                            roles: Array<string>;
                            orgName: string;
                            subject: string;
                            org: string;
                        };
                        requestId: string;
                        service: string;
                        method: string;
                    };
                };
                createdAt: string;
                updatedAt: string;
                completed: boolean;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type BulkCreateNotesResponse = BulkCreateNotesResponses[keyof BulkCreateNotesResponses];

export type BulkBatchUpdateNotesData = {
    body?: Array<{
        id: string;
        conversation?: string;
        externalId?: string | null;
        body?: string;
        userMentions?: Array<{
            user?: string;
            team?: string;
        }>;
        deleted?: boolean | null;
        attachments?: Array<{
            _id: string;
            name: string;
            contentType: string;
            contentLength: number;
            sourceId?: string;
        }>;
        createdAt?: string;
        modifiedAt?: string;
        updatedAt?: string;
        createdBy?: string;
        modifiedBy?: string | null;
        lang?: string | null;
    }>;
    path?: never;
    query?: {
        /**
         * Comma-separated list of unique note IDs.
         */
        ids?: string;
    };
    url: '/notes/bulk';
};

export type BulkBatchUpdateNotesResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                ids: Array<unknown>;
                context: string;
                status: string;
                v2: boolean;
                payload: {
                    api: {
                        data: Array<{
                            id: string;
                            tags: Array<string>;
                        }>;
                        path: string;
                        user: {
                            id: string;
                            userType: string;
                            roles: Array<string>;
                            orgName: string;
                            subject: string;
                            org: string;
                        };
                        requestId: string;
                        service: string;
                        method: string;
                    };
                };
                createdAt: string;
                updatedAt: string;
                completed: boolean;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type BulkBatchUpdateNotesResponse = BulkBatchUpdateNotesResponses[keyof BulkBatchUpdateNotesResponses];

export type GetNotesForOrgData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notes';
};

export type GetNotesForOrgResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                body: string;
                createdAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetNotesForOrgResponse = GetNotesForOrgResponses[keyof GetNotesForOrgResponses];

export type CreateNoteData = {
    body?: {
        id?: string;
        externalId?: string;
        body: string;
        userMentions?: Array<{
            user?: string;
            team?: string;
        }>;
        createdAt?: string;
        modifiedAt?: string;
        createdBy?: string;
        modifiedBy?: string;
        lang?: string | null;
    };
    path?: never;
    query?: never;
    url: '/notes';
};

export type CreateNoteResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                body: string;
                externalId: string;
                createdAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                userMentions: {
                    data: Array<{
                        type: string;
                        id: string;
                    }>;
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateNoteResponse = CreateNoteResponses[keyof CreateNoteResponses];

export type DeleteNoteByIdData = {
    body?: never;
    path: {
        /**
         * Unique note ID.
         */
        id: string;
    };
    query?: never;
    url: '/notes/{id}';
};

export type DeleteNoteByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetNotebyIdData = {
    body?: never;
    path: {
        /**
         * Unique note ID.
         */
        id: string;
    };
    query?: never;
    url: '/notes/{id}';
};

export type GetNotebyIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                body: string;
                createdAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetNotebyIdResponse = GetNotebyIdResponses[keyof GetNotebyIdResponses];

export type PatchNoteByIdData = {
    body?: {
        conversation?: string;
        externalId?: string | null;
        body?: string;
        userMentions?: Array<{
            user?: string;
            team?: string;
        }>;
        deleted?: boolean | null;
        attachments?: Array<{
            _id: string;
            name: string;
            contentType: string;
            contentLength: number;
            sourceId?: string;
        }>;
        createdAt?: string;
        modifiedAt?: string;
        updatedAt?: string;
        createdBy?: string;
        modifiedBy?: string | null;
        lang?: string | null;
    };
    path: {
        /**
         * Unique note ID.
         */
        id: string;
    };
    query?: never;
    url: '/notes/{id}';
};

export type PatchNoteByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                body: string;
                createdAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                userMentions: {
                    data: Array<{
                        type: string;
                        id: string;
                    }>;
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type PatchNoteByIdResponse = PatchNoteByIdResponses[keyof PatchNoteByIdResponses];

export type UpdateNoteByIdData = {
    body?: {
        conversation: string;
        externalId?: string | null;
        body: string;
        userMentions?: Array<{
            user?: string;
            team?: string;
        }>;
        deleted?: boolean | null;
        attachments?: Array<{
            _id: string;
            name: string;
            contentType: string;
            contentLength: number;
            sourceId?: string;
        }>;
        createdAt?: string;
        modifiedAt?: string;
        updatedAt?: string;
        createdBy?: string;
        modifiedBy?: string | null;
        lang?: string | null;
    };
    path: {
        /**
         * Unique note ID.
         */
        id: string;
    };
    query?: {
        /**
         * Set to `true` to update the document. Otherwise, performs the same update as a PATCH request. Default value: `false`.
         */
        replace?: boolean;
    };
    url: '/notes/{id}';
};

export type UpdateNoteByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                body: string;
                createdAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                conversation: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                userMentions: {
                    data: Array<{
                        type: string;
                        id: string;
                    }>;
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type UpdateNoteByIdResponse = UpdateNoteByIdResponses[keyof UpdateNoteByIdResponses];

export type CreateTrackingEventData = {
    body?: {
        trackingId?: string;
        sessionId?: string;
        name: string;
        meta?: {
            [key: string]: never;
        };
    };
    path?: never;
    query?: never;
    url: '/tracking/event';
};

export type CreateTrackingEventResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type CreateTrackingIdentityData = {
    body?: {
        remember?: boolean;
        trackingId?: string;
        sessionId?: string;
        name?: string;
        company?: string;
        externalId?: string;
        username?: string;
        signedUpAt?: string;
        birthdayAt?: string;
        gender?: 'm' | 'f';
        locale?: string;
        timeZone?: string;
        email?: string;
        phone?: string;
        location?: {
            type?: 'home' | 'work' | 'other';
            name?: string | null;
            address?: string | null;
            address2?: string | null;
            address3?: string | null;
            latitude?: number | null;
            longitude?: number | null;
            countryCode?: string | null;
            countryName?: string | null;
            regionCode?: string | null;
            regionName?: string | null;
            cityName?: string | null;
            zipCode?: string | null;
            areaCode?: string | null;
        };
        tags?: Array<string>;
        custom?: {
            [key: string]: never;
        };
    };
    path?: never;
    query?: never;
    url: '/tracking/identity';
};

export type CreateTrackingIdentityResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                trackingId: string;
                email: string;
                status: string;
                statusAt: string;
                createdAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateTrackingIdentityResponse = CreateTrackingIdentityResponses[keyof CreateTrackingIdentityResponses];

export type CreateTrackingIdentityEventData = {
    body?: {
        identity: {
            remember?: boolean;
            trackingId?: string;
            sessionId?: string;
            name?: string;
            company?: string;
            externalId?: string;
            username?: string;
            signedUpAt?: string;
            birthdayAt?: string;
            gender?: 'm' | 'f';
            locale?: string;
            timeZone?: string;
            email?: string;
            phone?: string;
            location?: {
                type?: 'home' | 'work' | 'other';
                name?: string | null;
                address?: string | null;
                address2?: string | null;
                address3?: string | null;
                latitude?: number | null;
                longitude?: number | null;
                countryCode?: string | null;
                countryName?: string | null;
                regionCode?: string | null;
                regionName?: string | null;
                cityName?: string | null;
                zipCode?: string | null;
                areaCode?: string | null;
            };
            tags?: Array<string>;
            custom?: {
                [key: string]: never;
            };
        };
        event: {
            trackingId?: string;
            sessionId?: string;
            name: string;
            meta?: {
                [key: string]: never;
            };
        };
    };
    path?: never;
    query?: never;
    url: '/tracking/identityEvent';
};

export type CreateTrackingIdentityEventResponses = {
    /**
     * Created
     */
    201: {
        data: {
            type: string;
            id: string;
            attributes: {
                trackingId: string;
                email: string;
                status: string;
                statusAt: string;
                createdAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                customer: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type CreateTrackingIdentityEventResponse = CreateTrackingIdentityEventResponses[keyof CreateTrackingIdentityEventResponses];

export type CustomerSearchData = {
    /**
     * ## Example request
     *
     * Creates a query to retrieve the last `updatedAt` attribute to use in a subsequent request.
     *
     * ```json
     * {
     * "and": [
     * { "customer_updated_at": { "gte": "2016-01-01" } }
     * ],
     * "sort" : [{"customer_updated_at": "asc"}],
     * "queryContext": "customer",
     * "or":[]
     * }
     * ```
     *
     * ## Example of next request
     *
     * Uses the returned `updatedAt` value from the previous request to page through all customer data and keep data up to date.
     *
     * ```json
     * {
     * "and": [
     * { "customer_updated_at": { "gte": "2016-07-27T22:30:48.939Z" } }
     * ],
     * "sort" : [{"customer_updated_at": "asc"}],
     * "queryContext": "customer",
     * "or":[]
     * }
     * ```
     *
     */
    body?: {
        searchHash?: string;
        queryContext?: string;
        includeDeleted?: boolean;
        timeZone?: string;
        and?: {
            [key: string]: unknown;
        } | Array<{
            [key: string]: unknown;
        }>;
        or?: {
            [key: string]: unknown;
        } | Array<{
            [key: string]: unknown;
        }>;
        not?: {
            [key: string]: unknown;
        } | Array<{
            [key: string]: unknown;
        }>;
        sort?: {
            [key: string]: unknown;
        } | Array<{
            [key: string]: unknown;
        }>;
        aggs?: {
            [key: string]: unknown;
        };
        fields?: Array<{
            [key: string]: unknown;
        }>;
    };
    path?: never;
    query?: never;
    url: '/customers/search';
};

export type CustomerSearchResponses = {
    /**
     * Success
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
            total: number;
            totalPages: number;
            aggregations: {
                [key: string]: unknown;
            };
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                name: string;
                displayName: string;
                createdAt: string;
                updatedAt: string;
                lastActivityAt: string;
                verified: boolean;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string;
            last: string;
        };
    };
};

export type CustomerSearchResponse = CustomerSearchResponses[keyof CustomerSearchResponses];

export type CustomerArchiveSearchData = {
    /**
     * ## Example request
     *
     * Creates a query to retrieve the last `updatedAt` attribute to use in a subsequent request.
     *
     * ```json
     * {
     * "and": [
     * { "customer_updated_at": { "gte": "2016-01-01" } }
     * ],
     * "sort" : [{"customer_updated_at": "asc"}],
     * "queryContext": "customer",
     * "or":[]
     * }
     * ```
     *
     * ## Example of next request
     *
     * Uses the returned `updatedAt` value from the previous request to page through all customer data and keep data up to date.
     *
     * ```json
     * {
     * "and": [
     * { "customer_updated_at": { "gte": "2016-07-27T22:30:48.939Z" } }
     * ],
     * "sort" : [{"customer_updated_at": "asc"}],
     * "queryContext": "customer",
     * "or":[]
     * }
     * ```
     *
     */
    body?: {
        queryContext?: string;
        includeDeleted?: boolean;
        timeZone?: string;
        and?: {
            [key: string]: unknown;
        } | Array<{
            conversation_id?: {
                [key: string]: unknown;
            };
            conversation_created_at?: {
                [key: string]: unknown;
            };
            conversation_updated_at?: {
                [key: string]: unknown;
            };
            conversation_customer_id?: {
                [key: string]: unknown;
            };
            conversation_any_text?: {
                [key: string]: unknown;
            };
            conversation_deleted?: {
                [key: string]: unknown;
            };
            customer_id?: {
                [key: string]: unknown;
            };
            customer_companyId?: {
                [key: string]: unknown;
            };
            customer_created_at?: {
                [key: string]: unknown;
            };
            customer_updated_at?: {
                [key: string]: unknown;
            };
            customer_deleted?: {
                [key: string]: unknown;
            };
            customer_any_text_new?: {
                [key: string]: unknown;
            };
            message_id?: {
                [key: string]: unknown;
            };
            message_created_at?: {
                [key: string]: unknown;
            };
            message_updated_at?: {
                [key: string]: unknown;
            };
            message_conversation_id?: {
                [key: string]: unknown;
            };
            message_any_text?: {
                [key: string]: unknown;
            };
            kobject_id?: {
                [key: string]: unknown;
            };
            kobject_created_at?: {
                [key: string]: unknown;
            };
            kobject_updated_at?: {
                [key: string]: unknown;
            };
            kobject_customer_id?: {
                [key: string]: unknown;
            };
            kobject_company_id?: {
                [key: string]: unknown;
            };
            kobject_any_text?: {
                [key: string]: unknown;
            };
            '^kobject_.*_id$'?: {
                [key: string]: unknown;
            };
            '^kobject_.*_created_at$'?: {
                [key: string]: unknown;
            };
            '^kobject_.*_updated_at$'?: {
                [key: string]: unknown;
            };
            '^kobject_.*_customer_id$'?: {
                [key: string]: unknown;
            };
            '^kobject_.*_company_id$'?: {
                [key: string]: unknown;
            };
            '^kobject_.*_any_text$'?: {
                [key: string]: unknown;
            };
            company_created_at?: {
                [key: string]: unknown;
            };
            company_updated_at?: {
                [key: string]: unknown;
            };
        }>;
        or?: {
            [key: string]: unknown;
        } | Array<{
            conversation_id?: {
                [key: string]: unknown;
            };
            conversation_created_at?: {
                [key: string]: unknown;
            };
            conversation_updated_at?: {
                [key: string]: unknown;
            };
            conversation_customer_id?: {
                [key: string]: unknown;
            };
            conversation_any_text?: {
                [key: string]: unknown;
            };
            conversation_deleted?: {
                [key: string]: unknown;
            };
            customer_id?: {
                [key: string]: unknown;
            };
            customer_companyId?: {
                [key: string]: unknown;
            };
            customer_created_at?: {
                [key: string]: unknown;
            };
            customer_updated_at?: {
                [key: string]: unknown;
            };
            customer_deleted?: {
                [key: string]: unknown;
            };
            customer_any_text_new?: {
                [key: string]: unknown;
            };
            message_id?: {
                [key: string]: unknown;
            };
            message_created_at?: {
                [key: string]: unknown;
            };
            message_updated_at?: {
                [key: string]: unknown;
            };
            message_conversation_id?: {
                [key: string]: unknown;
            };
            message_any_text?: {
                [key: string]: unknown;
            };
            kobject_id?: {
                [key: string]: unknown;
            };
            kobject_created_at?: {
                [key: string]: unknown;
            };
            kobject_updated_at?: {
                [key: string]: unknown;
            };
            kobject_customer_id?: {
                [key: string]: unknown;
            };
            kobject_company_id?: {
                [key: string]: unknown;
            };
            kobject_any_text?: {
                [key: string]: unknown;
            };
            '^kobject_.*_id$'?: {
                [key: string]: unknown;
            };
            '^kobject_.*_created_at$'?: {
                [key: string]: unknown;
            };
            '^kobject_.*_updated_at$'?: {
                [key: string]: unknown;
            };
            '^kobject_.*_customer_id$'?: {
                [key: string]: unknown;
            };
            '^kobject_.*_company_id$'?: {
                [key: string]: unknown;
            };
            '^kobject_.*_any_text$'?: {
                [key: string]: unknown;
            };
            company_created_at?: {
                [key: string]: unknown;
            };
            company_updated_at?: {
                [key: string]: unknown;
            };
        }>;
        not?: {
            [key: string]: unknown;
        } | Array<{
            conversation_id?: {
                [key: string]: unknown;
            };
            conversation_created_at?: {
                [key: string]: unknown;
            };
            conversation_updated_at?: {
                [key: string]: unknown;
            };
            conversation_customer_id?: {
                [key: string]: unknown;
            };
            conversation_any_text?: {
                [key: string]: unknown;
            };
            conversation_deleted?: {
                [key: string]: unknown;
            };
            customer_id?: {
                [key: string]: unknown;
            };
            customer_companyId?: {
                [key: string]: unknown;
            };
            customer_created_at?: {
                [key: string]: unknown;
            };
            customer_updated_at?: {
                [key: string]: unknown;
            };
            customer_deleted?: {
                [key: string]: unknown;
            };
            customer_any_text_new?: {
                [key: string]: unknown;
            };
            message_id?: {
                [key: string]: unknown;
            };
            message_created_at?: {
                [key: string]: unknown;
            };
            message_updated_at?: {
                [key: string]: unknown;
            };
            message_conversation_id?: {
                [key: string]: unknown;
            };
            message_any_text?: {
                [key: string]: unknown;
            };
            kobject_id?: {
                [key: string]: unknown;
            };
            kobject_created_at?: {
                [key: string]: unknown;
            };
            kobject_updated_at?: {
                [key: string]: unknown;
            };
            kobject_customer_id?: {
                [key: string]: unknown;
            };
            kobject_company_id?: {
                [key: string]: unknown;
            };
            kobject_any_text?: {
                [key: string]: unknown;
            };
            '^kobject_.*_id$'?: {
                [key: string]: unknown;
            };
            '^kobject_.*_created_at$'?: {
                [key: string]: unknown;
            };
            '^kobject_.*_updated_at$'?: {
                [key: string]: unknown;
            };
            '^kobject_.*_customer_id$'?: {
                [key: string]: unknown;
            };
            '^kobject_.*_company_id$'?: {
                [key: string]: unknown;
            };
            '^kobject_.*_any_text$'?: {
                [key: string]: unknown;
            };
            company_created_at?: {
                [key: string]: unknown;
            };
            company_updated_at?: {
                [key: string]: unknown;
            };
        }>;
        sort?: {
            [key: string]: unknown;
        } | Array<{
            [key: string]: unknown;
        }>;
    };
    path?: never;
    query?: never;
    url: '/customers/archive/search';
};

export type CustomerArchiveSearchResponses = {
    /**
     * Success
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
            total: number;
            totalPages: number;
            aggregations: {
                [key: string]: unknown;
            };
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                name: string;
                displayName: string;
                createdAt: string;
                updatedAt: string;
                lastActivityAt: string;
                verified: boolean;
                rev: number;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string;
            last: string;
        };
    };
};

export type CustomerArchiveSearchResponse = CustomerArchiveSearchResponses[keyof CustomerArchiveSearchResponses];

export type GetSatisfactionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of pages to return for results. Default value: 1.
         */
        page?: number;
        /**
         * Number of results to return per page. Default value: 100.
         */
        pageSize?: number;
    };
    url: '/satisfaction';
};

export type GetSatisfactionResponses = {
    /**
     * OK
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                name?: string;
                formType?: string;
                enabled?: boolean;
                channel?: string;
                description?: string;
                from?: {
                    account?: string;
                    app?: string;
                    channel?: string;
                };
                metaTitle?: string;
                metaDescription?: string;
                delayTime?: number;
                scale?: {
                    options?: number;
                    type?: string;
                    labelHigh?: string;
                    labelLow?: string;
                };
                introduction?: string;
                ratingPrompt?: string;
                questions?: Array<unknown>;
                positiveQuestions?: Array<unknown>;
                negativeQuestions?: Array<unknown>;
                allQuestions?: Array<unknown>;
                followUpType?: string;
                criteria?: {
                    and?: Array<unknown>;
                    or?: Array<unknown>;
                };
                createdAt?: string;
                updatedAt?: string;
                modifiedAt?: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy?: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                template?: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        }>;
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
    };
};

export type GetSatisfactionResponse = GetSatisfactionResponses[keyof GetSatisfactionResponses];

export type GetSlaByIdData = {
    body?: never;
    path: {
        /**
         * Unique SLA ID.
         */
        id: string;
    };
    query?: {
        /**
         * Option to include information about SLA versions. Use `all` to retrieve information about all versions. Use `active` to retrieve information about the active version only.
         */
        versions?: 'active' | 'all';
    };
    url: '/slas/{id}';
};

export type GetSlaByIdResponses = {
    /**
     * Success
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                currentVersion: number;
                createdAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                versions: {
                    data: Array<{
                        type: string;
                        id: string;
                    }>;
                };
            };
        };
        included: {
            type: string;
            id: string;
            attributes: {
                name: string;
                description: string;
                version: number;
                hours: string;
                metrics: {
                    firstResponse: {
                        enabled: boolean;
                        times: {
                            1: number;
                            2: number;
                            3: number;
                            4: number;
                            5: number;
                        };
                    };
                    longestUnrespondedMessage: {
                        enabled: boolean;
                        times: {
                            1: number;
                            2: number;
                            3: number;
                            4: number;
                            5: number;
                        };
                    };
                    totalConversationOpenTime: {
                        enabled: boolean;
                        times: {
                            [key: string]: unknown;
                        };
                    };
                    totalCustomerWaitTime: {
                        enabled: boolean;
                        times: {
                            [key: string]: unknown;
                        };
                    };
                };
                criteria: {
                    and: Array<{
                        conversation_channel: {
                            operator: string;
                            value: string;
                        };
                    }>;
                };
                createdAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                sla: {
                    data: {
                        type: string;
                        id: string;
                    };
                    links: {
                        self: string;
                    };
                };
            };
        };
    };
};

export type GetSlaByIdResponse = GetSlaByIdResponses[keyof GetSlaByIdResponses];

export type GetSpamSendersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/spam/senders';
};

export type GetSpamSendersResponses = {
    /**
     * Success
     */
    200: {
        meta: {
            pageSize: number;
            page: number;
        };
        links: {
            self: string;
            first: string;
            prev: string | null;
            next: string | null;
        };
        data: Array<{
            type: string;
            id: string;
            attributes: {
                sender: string;
                channel: string;
                list: string;
                createdAt: string;
                modifiedAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
        }>;
    };
};

export type GetSpamSendersResponse = GetSpamSendersResponses[keyof GetSpamSendersResponses];

export type UpsertSpamSenderData = {
    body?: unknown;
    path?: never;
    query?: never;
    url: '/spam/senders';
};

export type UpsertSpamSenderResponses = {
    /**
     * Success
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                sender: string;
                channel: string;
                list: string;
                createdAt: string;
                modifiedAt: string;
                updatedAt: string;
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                createdBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                modifiedBy: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
        };
    };
};

export type UpsertSpamSenderResponse = UpsertSpamSenderResponses[keyof UpsertSpamSenderResponses];

export type DeleteSpamSenderData = {
    body?: never;
    path: {
        /**
         * Unique sender ID.
         */
        id: string;
    };
    query?: never;
    url: '/spam/senders/{id}';
};

export type DeleteSpamSenderResponses = {
    /**
     * Success
     */
    204: unknown;
};

export type GetKlassesByNameAndExternalIdData = {
    body?: never;
    path: {
        /**
         * Name of KObject.
         */
        name: string;
        /**
         * External ID of KObject.
         */
        externalId: string;
    };
    query?: never;
    url: '/klasses/{name}/externalId={externalId}';
};

export type GetKlassesByNameAndExternalIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            type: string;
            id: string;
            attributes: {
                title: string;
                icon: string;
                images: Array<string>;
                custom: {
                    orderStatusStr: string;
                    shippingStatusStr: string;
                    billingStatusStr: string;
                    specialInstructionsStr: string;
                    orderNumberNum: number;
                    orderDescriptionStr: string;
                    totalPriceNum: number;
                    orderUpdatedAt: string;
                };
                tags: Array<unknown>;
                updatedAt: string;
                createdAt: string;
                rev: number;
                firstDone?: {
                    time?: number;
                    businessTime?: number;
                    createdAt?: string;
                    createdBy?: string;
                    createdByTeam?: string;
                    assignedTeam?: string;
                    assignedUser?: string;
                    commentCount?: number;
                };
                lastDone?: {
                    time?: number;
                    businessTime?: number;
                    createdAt?: string;
                    createdBy?: string;
                    createdByTeam?: string;
                    assignedTeam?: string;
                    assignedUser?: string;
                    commentCount?: number;
                };
                doneCount?: number;
                reopenCount?: number;
                reopenFromDoneCount?: number;
                queue?: string;
                assignedUser?: string;
                status?: 'open' | 'done';
            };
            relationships: {
                org: {
                    links: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
                klass: {
                    link: {
                        self: string;
                    };
                    data: {
                        type: string;
                        id: string;
                    };
                };
            };
            links: {
                self: string;
            };
        };
    };
};

export type GetKlassesByNameAndExternalIdResponse = GetKlassesByNameAndExternalIdResponses[keyof GetKlassesByNameAndExternalIdResponses];

export type ClientOptions = {
    baseUrl: 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | 'https://api.kustomerapp.com/v1' | (string & {});
};