// This file is auto-generated by @hey-api/openapi-ts

import type {
    Options as ClientOptions,
    TDataShape,
    Client,
} from '@hey-api/client-fetch'
import type {
    GetAuditLogsData,
    GetAuditLogsResponse,
    CreateAttachmentData,
    CreateAttachmentResponse,
    GetAttachmentsByIdData,
    GetAttachmentsByIdResponse,
    UpsertAttachmentData,
    UpsertAttachmentResponse,
    GetAttachmentByMessageAndAttachmentIdData,
    GetAttachmentByMessageAndAttachmentIdResponse,
    GetBrandsData,
    GetBrandsResponse,
    CreateBrandData,
    CreateBrandResponse,
    GetDefaultBrandData,
    GetDefaultBrandResponse,
    GetBrandByIdData,
    GetBrandByIdResponse,
    PatchBrandData,
    PatchBrandResponse,
    GetAllSchedulesData,
    GetAllSchedulesResponse,
    CreateScheduleData,
    CreateScheduleResponse,
    GetDefaultScheduleData,
    GetDefaultScheduleResponse,
    DeleteScheduleByIdData,
    DeleteScheduleByIdResponse,
    GetScheduleByIdData,
    GetScheduleByIdResponse,
    UpdateScheduleByIdData,
    UpdateScheduleByIdResponse,
    GetCompaniesData,
    GetCompaniesResponse,
    CreateCompanyData,
    CreateCompanyResponse,
    GetCompanyByIdData,
    GetCompanyByIdResponse,
    UpdateCompanyAttributesData,
    UpdateCompanyAttributesResponse,
    FindCompanyKObjectsData,
    FindCompanyKObjectsResponse,
    BulkCreateCompaniesData,
    BulkCreateCompaniesResponse,
    BulkBatchUpdateCompaniesData,
    BulkBatchUpdateCompaniesResponse,
    GetConversationsData,
    GetConversationsResponse,
    CreateConversationData,
    CreateConversationResponse,
    DeleteConversationData,
    GetConversationData,
    GetConversationResponse,
    GetConversationError,
    UpdateConversationAttributesData,
    UpdateConversationAttributesResponse,
    UpdateConversationData,
    UpdateConversationResponse,
    GetConversationByExternalIdData,
    GetConversationByExternalIdResponse,
    GetConversationAttachmentsData,
    GetConversationAttachmentsResponse,
    GetConversationEventsData,
    GetConversationEventsResponse,
    BulkCreateConversationsData,
    BulkCreateConversationsResponse,
    BulkBatchUpdateConversationsData,
    BulkBatchUpdateConversationsResponse,
    GetMessagesByConversationData,
    GetMessagesByConversationResponse,
    CreateMessageFromConversationData,
    CreateMessageFromConversationResponse,
    RemoveTagsFromConversationData,
    RemoveTagsFromConversationResponse,
    AppendTagsToConversationData,
    AppendTagsToConversationResponse,
    GetAllForwardsByConversationData,
    GetAllForwardsByConversationResponse,
    CreateForwardByConversationData,
    CreateForwardByConversationResponse,
    GetConversationTimesByConversationIdData,
    GetConversationTimesByConversationIdResponse,
    GetConversationTimeByIdsData,
    GetConversationTimeByIdsResponse,
    GetNotesByConversationData,
    GetNotesByConversationResponse,
    CreateNoteWithinConversationData,
    CreateNoteWithinConversationResponse,
    BulkDeleteCustomersData,
    BulkDeleteCustomersResponse,
    BulkCreateCustomersData,
    BulkCreateCustomersResponse,
    BulkBatchUpdateCustomersData,
    BulkBatchUpdateCustomersResponse,
    GetConversationsByCustomerData,
    GetConversationsByCustomerResponse,
    CreateConversationForCustomerData,
    CreateConversationForCustomerResponse,
    GetAllDraftsByCustomerData,
    GetAllDraftsByCustomerResponse,
    CreateDraftByCustomerData,
    CreateDraftByCustomerResponse,
    GetaCustomerEventData,
    GetaCustomerEventResponse,
    GetAllEventsByCustomerForSessionData,
    GetAllEventsByCustomerForSessionResponse,
    GetAllCustomerEventsData,
    GetAllCustomerEventsResponse,
    GetCustomerSessionsData,
    GetCustomerSessionsResponse,
    FindCustomerKObjectsData,
    FindCustomerKObjectsResponse,
    CreateCustomerKObjectData,
    CreateCustomerKObjectResponse,
    CreateCustomerMergeData,
    CreateCustomerMergeResponse,
    GetCustomerMergeData,
    GetCustomerMergeResponse,
    GetCustomerMergesByCustomerData,
    GetCustomerMergesByCustomerResponse,
    GetMessagesByCustomerData,
    GetMessagesByCustomerResponse,
    CreateMessageByCustomerData,
    CreateMessageByCustomerResponse,
    GetNotesByCustomerData,
    GetNotesByCustomerResponse,
    DeleteUnmaskingWindowByCustomerData,
    CreateUnmaskingWindowByCustomerData,
    GetCustomersData,
    GetCustomersResponse,
    CreateCustomerData,
    CreateCustomerResponse,
    DeleteCustomerData,
    GetCustomerByIdData,
    GetCustomerByIdResponse,
    UpdateCustomerAttributesData,
    UpdateCustomerAttributesResponse,
    UpdateCustomerData,
    UpdateCustomerResponse,
    GetCustomerByEmailData,
    GetCustomerByEmailResponse,
    GetCustomerByExternalIdData,
    GetCustomerByExternalIdResponse,
    GetCustomerByPhoneData,
    GetCustomerByPhoneResponse,
    GetCustomAttributeMetadataData,
    GetCustomAttributeMetadataResponse,
    UpdateCustomAttributeMetadataData,
    UpdateCustomAttributeMetadataResponse,
    GetDraftAttachmentsData,
    GetDraftAttachmentsResponse,
    CreateDraftAttachmentData,
    CreateDraftAttachmentResponse,
    DeleteDraftAttachmentData,
    GetDraftAttachmentData,
    GetDraftAttachmentResponse,
    GetaDraftForwardByIdData,
    GetaDraftForwardByIdResponse,
    UpdateDraftForwardData,
    UpdateDraftForwardResponse,
    GetForwardAttachmentsData,
    GetForwardAttachmentsResponse,
    CreateForwardAttachmentData,
    CreateForwardAttachmentResponse,
    DeleteForwardAttachmentData,
    GetForwardAttachmentData,
    GetForwardAttachmentResponse,
    GetOutboundAccountsData,
    GetOutboundAccountsResponse,
    DeleteDraftData,
    UpdateDraftData,
    UpdateDraftResponse,
    BulkDeleteKObjectsData,
    BulkDeleteKObjectsResponse,
    BulkCreateKObjectsData,
    BulkCreateKObjectsResponse,
    BulkBatchUpdateKObjectsData,
    BulkBatchUpdateKObjectsResponse,
    GetKObjectsData,
    GetKObjectsResponse,
    CreateKObjectData,
    CreateKObjectResponse,
    DeleteKObjectData,
    GetKObjectData,
    GetKObjectResponse,
    UpdateKObjectData,
    UpdateKObjectResponse,
    GetKlassesData,
    GetKlassesResponse,
    CreateKlassData,
    CreateKlassResponse,
    DeleteKlassData,
    GetKlassData,
    GetKlassResponse,
    UpdateKlassData,
    UpdateKlassResponse,
    CreateMediaData,
    CreateMediaResponse,
    GetMediabyIdData,
    GetMediabyIdResponse,
    UpdateMediaData,
    UpdateMediaResponse,
    BulkCreateMessagesData,
    BulkCreateMessagesResponse,
    BulkBatchUpdateMessagesData,
    BulkBatchUpdateMessagesResponse,
    RedactMessageData,
    RedactMessageResponse,
    GetMessagesData,
    GetMessagesResponse,
    GetMessagesError,
    CreateMessageData,
    CreateMessageResponse,
    GetMessageData,
    GetMessageResponse,
    UpdateMessageAttributesData,
    UpdateMessageAttributesResponse,
    UpdateMessageData,
    UpdateMessageResponse,
    GetMessageByExternalIdData,
    GetMessageByExternalIdResponse,
    BulkCreateNotesData,
    BulkCreateNotesResponse,
    BulkBatchUpdateNotesData,
    BulkBatchUpdateNotesResponse,
    GetNotesForOrgData,
    GetNotesForOrgResponse,
    CreateNoteData,
    CreateNoteResponse,
    DeleteNoteByIdData,
    GetNoteByIdData,
    GetNoteByIdResponse,
    PatchNoteByIdData,
    PatchNoteByIdResponse,
    UpdateNoteByIdData,
    UpdateNoteByIdResponse,
    CreateTrackingEventData,
    CreateTrackingIdentityData,
    CreateTrackingIdentityResponse,
    CreateTrackingIdentityEventData,
    CreateTrackingIdentityEventResponse,
    CustomerSearchData,
    CustomerSearchResponse,
    CustomerArchiveSearchData,
    CustomerArchiveSearchResponse,
    GetSatisfactionData,
    GetSatisfactionResponse,
    GetSlaByIdData,
    GetSlaByIdResponse,
    GetSpamSendersData,
    GetSpamSendersResponse,
    UpsertSpamSenderData,
    UpsertSpamSenderResponse,
    DeleteSpamSenderData,
    GetKlassesByNameAndExternalIdData,
    GetKlassesByNameAndExternalIdResponse,
    GetAuthSettingsData,
    GetAuthSettingsResponse,
    UpdateAuthSettingsData,
    UpdateAuthSettingsResponse,
    GetAuthCustomerSettingsData,
    GetAuthCustomerSettingsResponse,
    GetPublicAuthSettingsData,
    GetPublicAuthSettingsResponse,
    GetAuthTokensData,
    GetAuthTokensResponse,
    CreateTokenData,
    CreateTokenResponse,
    DeleteAuthTokenByIdData,
    GetAuthTokenByIdData,
    GetAuthTokenByIdResponse,
    DeleteCurrentAuthTokenData,
    GetCurrentAuthTokenData,
    GetCurrentAuthTokenResponse,
    GetAuthRolesData,
    GetAuthRolesResponse,
    GetAllRoleGroupsData,
    GetAllRoleGroupsResponse,
    CreateRoleGroupData,
    CreateRoleGroupResponse,
    DeleteRoleGroupData,
    GetRoleGroupByIdData,
    GetRoleGroupByIdResponse,
    UpdateRoleGroupData,
    UpdateRoleGroupResponse,
    GetTeamsData,
    GetTeamsResponse,
    CreateTeamData,
    CreateTeamResponse,
    GetUsersTeamsData,
    GetUsersTeamsResponse,
    DeleteTeamData,
    GetTeamByIdData,
    GetTeamByIdResponse,
    UpdateTeamAttributesData,
    UpdateTeamAttributesResponse,
    UpdateTeamByIdData,
    UpdateTeamByIdResponse,
    RemoveTeamMemberData,
    RemoveTeamMemberResponse,
    AddTeamMemberData,
    AddTeamMemberResponse,
    GetUsersData,
    GetUsersResponse,
    CreateInviteNewUserData,
    CreateInviteNewUserResponse,
    GetCurrentUserData,
    GetCurrentUserResponse,
    UpdateCurrentUserData,
    UpdateCurrentUserResponse,
    GetUserByIdData,
    GetUserByIdResponse,
    UpdateUserByIdData,
    UpdateUserByIdResponse,
    GetMultipleUsersByIdsData,
    GetMultipleUsersByIdsResponse,
    ResetUsersPasswordData,
} from './types.gen'

export type Options<
    TData extends TDataShape = TDataShape,
    ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client: Client
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>
}

/**
 * Query events associated with your organization
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.audit_logs.read|org.permission.audit_logs.read|
 * --------
 */
export const getAuditLogs = <ThrowOnError extends boolean = true>(
    options: Options<GetAuditLogsData, ThrowOnError>
) => {
    return options.client.get<GetAuditLogsResponse, unknown, ThrowOnError>({
        url: '/audit-logs',
        ...options,
    })
}

/**
 * Create attachment
 * Creates a new attachment document. Includes a temporary upload policy for uploading the file with a POST request.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.note.write|org.permission.note.create|
 * |org.user.message.write|org.permission.message.create|
 *
 * ### Uploading attachments
 * You can upload attachments by sending a multi-part POST request to the URL found in the response object's `meta.upload.url` property.
 *
 * The request must be accompanied by the key/value pairs found in `meta.upload.fields` as standard form keys. The file should be included as the last key under the name "file".
 */
export const createAttachment = <ThrowOnError extends boolean = true>(
    options: Options<CreateAttachmentData, ThrowOnError>
) => {
    return options.client.post<CreateAttachmentResponse, unknown, ThrowOnError>(
        {
            url: '/attachments',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers,
            },
        }
    )
}

/**
 * Get attachments by ID [Outbound Only]
 * Retrieves attachments using the unique ID of the attachment or an array of unique attachment IDs, if given.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.attachment.read|org.permission.attachment.read|
 */
export const getAttachmentsById = <ThrowOnError extends boolean = true>(
    options: Options<GetAttachmentsByIdData, ThrowOnError>
) => {
    return options.client.get<
        GetAttachmentsByIdResponse,
        unknown,
        ThrowOnError
    >({
        url: '/attachments/{id}',
        ...options,
    })
}

/**
 * Update or upsert attachment
 * Updates the requested attachment. Upserts the attachment if an attachment does not exist.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.message.write|org.permission.message.update|
 */
export const upsertAttachment = <ThrowOnError extends boolean = true>(
    options: Options<UpsertAttachmentData, ThrowOnError>
) => {
    return options.client.put<UpsertAttachmentResponse, unknown, ThrowOnError>({
        url: '/attachments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get attachment by message ID and attachment ID (inbound or outbound)
 * Retrieves attachments based on the unique ID of the attachment for a specific message ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.attachment.read|org.permission.attachment.read|
 */
export const getAttachmentByMessageAndAttachmentId = <
    ThrowOnError extends boolean = true
>(
    options: Options<GetAttachmentByMessageAndAttachmentIdData, ThrowOnError>
) => {
    return options.client.get<
        GetAttachmentByMessageAndAttachmentIdResponse,
        unknown,
        ThrowOnError
    >({
        url: '/messages/{message_id}/attachments/{id}',
        ...options,
    })
}

/**
 * Get brands
 * Retrieves a paginated list of all brands belonging to your organization.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.brand.read|org.permission.brand.read|
 * |org.user.brand.read|
 */
export const getBrands = <ThrowOnError extends boolean = true>(
    options: Options<GetBrandsData, ThrowOnError>
) => {
    return options.client.get<GetBrandsResponse, unknown, ThrowOnError>({
        url: '/brands',
        ...options,
    })
}

/**
 * Create brand
 * Creates a brand resource.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.brand.write|org.permission.brand.create|
 */
export const createBrand = <ThrowOnError extends boolean = true>(
    options: Options<CreateBrandData, ThrowOnError>
) => {
    return options.client.post<CreateBrandResponse, unknown, ThrowOnError>({
        url: '/brands',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get default brand
 * Retrieves the default brand that was created for your Kustomer organization during registration.
 *
 * Learn more about the default brand in the [Kustomer Help Center](https://help.kustomer.com/create-and-manage-multiple-brands-ryc8HBZnD#customize).
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.brand.read|org.permission.brand.read|
 * |org.user.brand.read|
 */
export const getDefaultBrand = <ThrowOnError extends boolean = true>(
    options: Options<GetDefaultBrandData, ThrowOnError>
) => {
    return options.client.get<GetDefaultBrandResponse, unknown, ThrowOnError>({
        url: '/brands/default',
        ...options,
    })
}

/**
 * Get brand by ID
 * Retrieves a brand by its unique ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.brand.read|org.permission.brand.read|
 * |org.user.brand.read|
 */
export const getBrandById = <ThrowOnError extends boolean = true>(
    options: Options<GetBrandByIdData, ThrowOnError>
) => {
    return options.client.get<GetBrandByIdResponse, unknown, ThrowOnError>({
        url: '/brands/{id}',
        ...options,
    })
}

/**
 * Update brand
 * Updates a brand resource.
 *
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.brand.write|org.permission.brand.update|
 */
export const patchBrand = <ThrowOnError extends boolean = true>(
    options: Options<PatchBrandData, ThrowOnError>
) => {
    return options.client.patch<PatchBrandResponse, unknown, ThrowOnError>({
        url: '/brands/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get all business schedules
 * Retrieves business schedules for a Kustomer organization.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.schedule.read|org.permission.schedule.read|
 * |org.admin.schedule.read|
 *
 * To learn more, see [Business Schedules](https://help.kustomer.com/business-schedules-SJj3ZxD1E) in the Kustomer Help Center.
 */
export const getAllSchedules = <ThrowOnError extends boolean = true>(
    options: Options<GetAllSchedulesData, ThrowOnError>
) => {
    return options.client.get<GetAllSchedulesResponse, unknown, ThrowOnError>({
        url: '/schedules',
        ...options,
    })
}

/**
 * Create a business schedule
 * Creates a new business schedule.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.schedule.write|org.permission.schedule.create|
 */
export const createSchedule = <ThrowOnError extends boolean = true>(
    options: Options<CreateScheduleData, ThrowOnError>
) => {
    return options.client.post<CreateScheduleResponse, unknown, ThrowOnError>({
        url: '/schedules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get default business schedule
 * Retrieves default business schedules for a Kustomer organization.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.schedule.read|org.permission.schedule.read|
 * |org.admin.schedule.read||
 */
export const getDefaultSchedule = <ThrowOnError extends boolean = true>(
    options: Options<GetDefaultScheduleData, ThrowOnError>
) => {
    return options.client.get<
        GetDefaultScheduleResponse,
        unknown,
        ThrowOnError
    >({
        url: '/schedules/default',
        ...options,
    })
}

/**
 * Delete a business schedule by ID
 * Deletes a business schedule based on the schedule ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.schedule.write|org.permission.schedule.delete|
 */
export const deleteScheduleById = <ThrowOnError extends boolean = true>(
    options: Options<DeleteScheduleByIdData, ThrowOnError>
) => {
    return options.client.delete<
        DeleteScheduleByIdResponse,
        unknown,
        ThrowOnError
    >({
        url: '/schedules/{id}',
        ...options,
    })
}

/**
 * Get business schedule by ID
 * Retrieves a business schedule by the schedule ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.schedule.read|org.permission.schedule.read|
 * |org.admin.schedule.read||
 */
export const getScheduleById = <ThrowOnError extends boolean = true>(
    options: Options<GetScheduleByIdData, ThrowOnError>
) => {
    return options.client.get<GetScheduleByIdResponse, unknown, ThrowOnError>({
        url: '/schedules/{id}',
        ...options,
    })
}

/**
 * Update business schedule by ID
 * Modifies a business schedule based on the schedule ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.schedule.write|org.permission.schedule.update|
 */
export const updateScheduleById = <ThrowOnError extends boolean = true>(
    options: Options<UpdateScheduleByIdData, ThrowOnError>
) => {
    return options.client.put<
        UpdateScheduleByIdResponse,
        unknown,
        ThrowOnError
    >({
        url: '/schedules/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get companies
 * Retrieves all companies. You can optionally filter this list by the company name or the unique external company ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.company.read|org.permission.company.read|
 *
 * ### Note
 * > If you use both the `externalId` and `filter` query params, the request ignores both query params.
 */
export const getCompanies = <ThrowOnError extends boolean = true>(
    options: Options<GetCompaniesData, ThrowOnError>
) => {
    return options.client.get<GetCompaniesResponse, unknown, ThrowOnError>({
        url: '/companies',
        ...options,
    })
}

/**
 * Create company
 * Creates a new company.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.company.write|org.permission.company.create|
 *
 * ### Custom Attributes
 * [Custom attributes](https://help.kustomer.com/define-attributes-Skr924HI) are optional and allow you to specify
 * custom key-value pairs.
 *
 * Kustomer uses a naming convention for custom attributes to specify the field data type with a name suffix:
 *
 * #### Naming Suffix
 *
 * * `Num` *number* or *null*
 * * `At` *date-time* or *null*
 * * `Str` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Txt` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Bool` *boolean* or *null*
 * * `Url` *string* or *null*, format: *uri*
 */
export const createCompany = <ThrowOnError extends boolean = true>(
    options: Options<CreateCompanyData, ThrowOnError>
) => {
    return options.client.post<CreateCompanyResponse, unknown, ThrowOnError>({
        url: '/companies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get company by ID
 * Retrieves a company by their unique company ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.company.read|org.permission.company.read|
 */
export const getCompanyById = <ThrowOnError extends boolean = true>(
    options: Options<GetCompanyByIdData, ThrowOnError>
) => {
    return options.client.get<GetCompanyByIdResponse, unknown, ThrowOnError>({
        url: '/companies/{id}',
        ...options,
    })
}

/**
 * Update company attributes
 * Updates the attributes of a company based on the company ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.company.write|org.permission.company.update|
 *
 * ### Note
 * >This endpoint is subject to Object Rate Limiting, which limits how many updates a single user can make to a single company attribute. To learn more, see [Rate limiting](https://developer.kustomer.com/kustomer-api-docs/reference/rate-limiting).
 *
 * ### Custom Attributes
 * [Custom attributes](https://help.kustomer.com/define-attributes-Skr924HI) are optional and allow you to specify
 * custom key-value pairs.
 *
 * Kustomer uses a naming convention for custom attributes to specify the field data type with a name suffix:
 *
 * #### Naming Suffix
 *
 * * `Num` *number* or *null*
 * * `At` *date-time* or *null*
 * * `Str` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Txt` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Bool` *boolean* or *null*
 * * `Url` *string* or *null*, format: *uri*
 */
export const updateCompanyAttributes = <ThrowOnError extends boolean = true>(
    options: Options<UpdateCompanyAttributesData, ThrowOnError>
) => {
    return options.client.put<
        UpdateCompanyAttributesResponse,
        unknown,
        ThrowOnError
    >({
        url: '/companies/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Find company KObjects (custom Objects)
 * Retrieves all [KObjects (custom Objects)](https://help.kustomer.com/en_us/define-attributes-Skr924HI) that are linked to a company based on the unique company ID and unique Klass name.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.company.read|org.permission.company.read|
 */
export const findCompanyKObjects = <ThrowOnError extends boolean = true>(
    options: Options<FindCompanyKObjectsData, ThrowOnError>
) => {
    return options.client.get<
        FindCompanyKObjectsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/companies/{id}/klasses/{name}',
        ...options,
    })
}

/**
 * Bulk create companies
 * Creates companies in bulk.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.company.write|org.permission.company.create|
 *
 * ### Custom Attributes
 * [Custom attributes](https://help.kustomer.com/define-attributes-Skr924HI) are optional and allow you to specify
 * custom key-value pairs.
 *
 * Kustomer uses a naming convention for custom attributes to specify the field data type with a name suffix:
 *
 * #### Naming Suffix
 *
 * * `Num` *number* or *null*
 * * `At` *date-time* or *null*
 * * `Str` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Txt` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Bool` *boolean* or *null*
 * * `Url` *string* or *null*, format: *uri*
 */
export const bulkCreateCompanies = <ThrowOnError extends boolean = true>(
    options: Options<BulkCreateCompaniesData, ThrowOnError>
) => {
    return options.client.post<
        BulkCreateCompaniesResponse,
        unknown,
        ThrowOnError
    >({
        url: '/companies/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Bulk batch update companies
 * Batch updates multiple companies.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.company.write|org.permission.company.update|
 *
 * ### Custom Attributes
 * [Custom attributes](https://help.kustomer.com/define-attributes-Skr924HI) are optional and allow you to specify
 * custom key-value pairs.
 *
 * Kustomer uses a naming convention for custom attributes to specify the field data type with a name suffix:
 *
 * #### Naming Suffix
 *
 * * `Num` *number* or *null*
 * * `At` *date-time* or *null*
 * * `Str` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Txt` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Bool` *boolean* or *null*
 * * `Url` *string* or *null*, format: *uri*
 */
export const bulkBatchUpdateCompanies = <ThrowOnError extends boolean = true>(
    options: Options<BulkBatchUpdateCompaniesData, ThrowOnError>
) => {
    return options.client.put<
        BulkBatchUpdateCompaniesResponse,
        unknown,
        ThrowOnError
    >({
        url: '/companies/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get conversations
 * Retrieves a paginated list of conversations for the organization.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.conversation.read|org.permission.conversation.read|
 */
export const getConversations = <ThrowOnError extends boolean = true>(
    options: Options<GetConversationsData, ThrowOnError>
) => {
    return options.client.get<GetConversationsResponse, unknown, ThrowOnError>({
        url: '/conversations',
        ...options,
    })
}

/**
 * Create conversation
 * Creates a new conversation.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.conversation.write|org.permission.conversation.create|
 *
 * ### Custom Attributes
 * [Custom attributes](https://help.kustomer.com/define-attributes-Skr924HI) are optional and allow you to specify custom key-value pairs.
 *
 * Kustomer uses a naming convention for custom attributes to specify the field data type with a name suffix:
 *
 * #### Naming Suffix
 *
 * * `Num` *number* or *null*
 * * `At` *date-time* or *null*
 * * `Str` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Txt` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Bool` *boolean* or *null*
 * * `Url` *string* or *null*, format: *uri*
 *
 * ### Rate Limit
 * Conversations are subject to a rate limit. A single client can create up to 120 conversations per minute per customer.
 *
 * Conversations with `importedAt` in their body will not be subject to the rate limit.
 *
 * A `429 Too Many Requests` response will be returned if the rate limit has been reached for a customer.
 */
export const createConversation = <ThrowOnError extends boolean = true>(
    options: Options<CreateConversationData, ThrowOnError>
) => {
    return options.client.post<
        CreateConversationResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Delete conversation
 * Delete a conversation based on the unique conversation ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.conversation.delete|org.permission.conversation.delete|
 */
export const deleteConversation = <ThrowOnError extends boolean = true>(
    options: Options<DeleteConversationData, ThrowOnError>
) => {
    return options.client.delete<unknown, unknown, ThrowOnError>({
        url: '/conversations/{id}',
        ...options,
    })
}

/**
 * Get conversation by ID
 * Retrieves a single conversation based on the unique conversation ID.
 *
 * You can also retrieve multiple conversations with a comma-separated list of IDs.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.conversation.read|org.permission.conversation.read|
 */
export const getConversation = <ThrowOnError extends boolean = true>(
    options: Options<GetConversationData, ThrowOnError>
) => {
    return options.client.get<
        GetConversationResponse,
        GetConversationError,
        ThrowOnError
    >({
        url: '/conversations/{id}',
        ...options,
    })
}

/**
 * Update conversation attributes
 * Updates the data attributes of a conversation based the unique conversation ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.conversation.write|org.permission.conversation.update|
 *
 * ### Note
 * >This endpoint is subject to Object Rate Limiting, which limits how many updates a single user can make to a single company attribute. To learn more, see [Rate limiting](https://developer.kustomer.com/kustomer-api-docs/reference/rate-limiting).
 *
 * ### Custom Attributes
 * [Custom attributes](https://help.kustomer.com/define-attributes-Skr924HI) are optional and allow you to specify
 * custom key-value pairs.
 *
 * Kustomer uses a naming convention for custom attributes to specify the field data type with a name suffix:
 *
 * #### Naming Suffix
 *
 * * `Num` *number* or *null*
 * * `At` *date-time* or *null*
 * * `Str` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Txt` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Bool` *boolean* or *null*
 * * `Url` *string* or *null*, format: *uri*
 */
export const updateConversationAttributes = <
    ThrowOnError extends boolean = true
>(
    options: Options<UpdateConversationAttributesData, ThrowOnError>
) => {
    return options.client.patch<
        UpdateConversationAttributesResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    })
}

/**
 * Update conversation
 * Updates a conversation based on the unique conversation ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.conversation.write|org.permission.conversation.update|
 *
 * ### Note
 * >This endpoint is subject to Object Rate Limiting, which limits how many updates a single user can make to a single conversation. To learn more, see [Rate limiting](https://developer.kustomer.com/kustomer-api-docs/reference/rate-limiting).
 *
 * ### Custom Attributes
 * [Custom attributes](https://help.kustomer.com/define-attributes-Skr924HI) are optional and allow you to specify
 * custom key-value pairs.
 *
 * Kustomer uses a naming convention for custom attributes to specify the field data type with a name suffix:
 *
 * #### Naming Suffix
 *
 * * `Num` *number* or *null*
 * * `At` *date-time* or *null*
 * * `Str` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Txt` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Bool` *boolean* or *null*
 * * `Url` *string* or *null*, format: *uri*
 */
export const updateConversation = <ThrowOnError extends boolean = true>(
    options: Options<UpdateConversationData, ThrowOnError>
) => {
    return options.client.put<
        UpdateConversationResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get conversation by external ID
 * Retrieves a single conversation based on a unique external ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.conversation.read|org.permission.conversation.read|
 */
export const getConversationByExternalId = <
    ThrowOnError extends boolean = true
>(
    options: Options<GetConversationByExternalIdData, ThrowOnError>
) => {
    return options.client.get<
        GetConversationByExternalIdResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/externalId={externalId}',
        ...options,
    })
}

/**
 * Get conversation attachments
 * Retrieves a paginated list of conversation attachments.
 *
 * Any attachment shared in a conversation via inbound and outbound messages.
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.attachment.read|org.permission.attachment.read|
 */
export const getConversationAttachments = <ThrowOnError extends boolean = true>(
    options: Options<GetConversationAttachmentsData, ThrowOnError>
) => {
    return options.client.get<
        GetConversationAttachmentsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/{id}/attachments',
        ...options,
    })
}

/**
 * Get conversation events
 * Retrieves a paginated list of conversation events based on the unique ID of the conversation.
 *
 * You can use the `name` and/or `changed` query parameters to filter the results.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.event.read|org.permission.event.read|
 */
export const getConversationEvents = <ThrowOnError extends boolean = true>(
    options: Options<GetConversationEventsData, ThrowOnError>
) => {
    return options.client.get<
        GetConversationEventsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/{id}/events',
        ...options,
    })
}

/**
 * Bulk create conversations
 * Create conversations in bulk.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.conversation.write|org.permission.conversation.create|
 */
export const bulkCreateConversations = <ThrowOnError extends boolean = true>(
    options: Options<BulkCreateConversationsData, ThrowOnError>
) => {
    return options.client.post<
        BulkCreateConversationsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Bulk batch update conversations
 * Updates a bulk batch of conversations.
 *
 * Use the `ids` query param to update multiple conversations in bulk with the same data.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.conversation.write|org.permission.conversation.update|
 */
export const bulkBatchUpdateConversations = <
    ThrowOnError extends boolean = true
>(
    options: Options<BulkBatchUpdateConversationsData, ThrowOnError>
) => {
    return options.client.put<
        BulkBatchUpdateConversationsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get messages by conversation
 * Retrieves messages for a conversation.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.message.read|org.permission.message.read|
 */
export const getMessagesByConversation = <ThrowOnError extends boolean = true>(
    options: Options<GetMessagesByConversationData, ThrowOnError>
) => {
    return options.client.get<
        GetMessagesByConversationResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/{id}/messages',
        ...options,
    })
}

/**
 * Create message from conversation
 * Creates a new message from a conversation.
 *
 * ### NOTE
 * > The new message created by the endpoint will be associated with the same customer as the conversation.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.message.write|org.permission.message.create|
 *
 * ### Authorization
 * `org.admin` role is required for setting `createdAt`, `createdBy`, `modifiedAt`, and `modifiedBy`. Otherwise, the token automatically sets these attributes.
 *
 * ### Rate Limit
 * Messages are subject to a rate limit. A single client can create up to 120 messages per minute per customer.
 * Messages with `importedAt` in their body will not be subject to the rate limit.
 *
 * A `429 Too Many Requests` response will be returned if the rate limit has been reached for a customer.
 */
export const createMessageFromConversation = <
    ThrowOnError extends boolean = true
>(
    options: Options<CreateMessageFromConversationData, ThrowOnError>
) => {
    return options.client.post<
        CreateMessageFromConversationResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/{id}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Remove tags from conversation
 * Removes tags from a conversation by tag name and/or the unique ID of the conversation.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.conversation.write|org.permission.conversation.delete|
 *
 * ### Note
 * > This endpoint is subject to Object Rate Limiting, which limits how many updates a single User can make to a single Conversation. See [Rate limiting](https://developer.kustomer.com/kustomer-api-docs/reference/rate-limiting) for more information.
 */
export const removeTagsFromConversation = <ThrowOnError extends boolean = true>(
    options: Options<RemoveTagsFromConversationData, ThrowOnError>
) => {
    return options.client.delete<
        RemoveTagsFromConversationResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/{id}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Append tags to conversation
 * Adds tags to a conversation by the tag name and/or the unique ID of the conversation. Creates a new tag if a tag does not exist yet in your Kustomer organization.
 *
 * To learn more, see [Conversation tags](https://help.kustomer.com/conversations-tags-H1c4iVrIb) in the Kustomer Help Center.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.conversation.write|org.permission.conversation.update|
 *
 * ### Note
 * > This endpoint is subject to Object Rate Limiting, which limits how many updates a single User can make to a single Conversation. See [Rate limiting](https://developer.kustomer.com/kustomer-api-docs/reference/rate-limiting) for more information.
 */
export const appendTagsToConversation = <ThrowOnError extends boolean = true>(
    options: Options<AppendTagsToConversationData, ThrowOnError>
) => {
    return options.client.post<
        AppendTagsToConversationResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/{id}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get all forwards by conversation
 * Retrieves all forwarded conversations based on the unique conversation ID.
 *
 * To learn more, see [Forwarding conversations](https://help.kustomer.com/forwarding-SJN_iaACN) in the Kustomer Help Center.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.draft.read|org.permission.draft.read|
 */
export const getAllForwardsByConversation = <
    ThrowOnError extends boolean = true
>(
    options: Options<GetAllForwardsByConversationData, ThrowOnError>
) => {
    return options.client.get<
        GetAllForwardsByConversationResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/{id}/forwards',
        ...options,
    })
}

/**
 * Create forward by conversation
 * Creates a forward to send through email. Forwards will send all messages in a conversation.
 *
 * ### NOTE
 * > To schedule the forward for delivery, create a forward with a `sendAt` property.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.conversation_forward.write|org.permission.conversation_forward.create|
 *
 */
export const createForwardByConversation = <
    ThrowOnError extends boolean = true
>(
    options: Options<CreateForwardByConversationData, ThrowOnError>
) => {
    return options.client.post<
        CreateForwardByConversationResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/{id}/forwards',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get conversation times by conversation
 * Retrieves `conversation_time`s by the unique ID of the related conversation.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.conversation.read|org.permission.conversation.read|
 */
export const getConversationTimesByConversationId = <
    ThrowOnError extends boolean = true
>(
    options: Options<GetConversationTimesByConversationIdData, ThrowOnError>
) => {
    return options.client.get<
        GetConversationTimesByConversationIdResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/{id}/times',
        ...options,
    })
}

/**
 * Get conversation time by ids
 * Retrieves `conversation_time`s base on the unique ID or the IDs of `conversation_time`(s).
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.conversation.read|org.permission.conversation.read|
 */
export const getConversationTimeByIds = <ThrowOnError extends boolean = true>(
    options: Options<GetConversationTimeByIdsData, ThrowOnError>
) => {
    return options.client.get<
        GetConversationTimeByIdsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/times/{ids}',
        ...options,
    })
}

/**
 * Get notes by conversation
 * Retrieves notes found in a specific conversation based on the conversation ID.
 *
 * To learn more, see [Notes](https://help.kustomer.com/using-notes-HJvDjNP58) in the Kustomer Help Center.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.note.read|org.permission.note.read|
 */
export const getNotesByConversation = <ThrowOnError extends boolean = true>(
    options: Options<GetNotesByConversationData, ThrowOnError>
) => {
    return options.client.get<
        GetNotesByConversationResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/{id}/notes',
        ...options,
    })
}

/**
 * Create note within conversation
 * Creates a new note within a conversation. Optionally, allows you to @mention another user in your Kustomer organization.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.note.read|org.permission.note.create|
 *
 * ### Authorization
 * The `org.admin` role is required for setting `createdAt`, `createdBy`, `modifiedAt`, and `modifiedBy`.  Otherwise, these attributes are automatically set by the token.
 *
 * ### Rate limit
 * Notes are subject to a rate limit. A single client can create up to 120 notes per minute per customer.
 */
export const createNoteWithinConversation = <
    ThrowOnError extends boolean = true
>(
    options: Options<CreateNoteWithinConversationData, ThrowOnError>
) => {
    return options.client.post<
        CreateNoteWithinConversationResponse,
        unknown,
        ThrowOnError
    >({
        url: '/conversations/{id}/notes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Bulk delete customers
 * Deletes multiple customers in bulk.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.customer.delete|org.permission.customer.delete|
 */
export const bulkDeleteCustomers = <ThrowOnError extends boolean = true>(
    options: Options<BulkDeleteCustomersData, ThrowOnError>
) => {
    return options.client.delete<
        BulkDeleteCustomersResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/bulk',
        ...options,
    })
}

/**
 * Bulk create customers
 * Creates customers in bulk.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.customer.write|org.permission.customer.create|
 */
export const bulkCreateCustomers = <ThrowOnError extends boolean = true>(
    options: Options<BulkCreateCustomersData, ThrowOnError>
) => {
    return options.client.post<
        BulkCreateCustomersResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Bulk batch update customers
 * Updates a bulk batch of customers.
 *
 * Use the `ids` query param to update multiple customers in bulk with the same data.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.customer.write|org.permission.customer.update|
 */
export const bulkBatchUpdateCustomers = <ThrowOnError extends boolean = true>(
    options: Options<BulkBatchUpdateCustomersData, ThrowOnError>
) => {
    return options.client.put<
        BulkBatchUpdateCustomersResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get conversations by customer
 * Retrieves a paginated list of conversations using the unique Customer ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.conversation.read|org.permission.conversation.read|
 */
export const getConversationsByCustomer = <ThrowOnError extends boolean = true>(
    options: Options<GetConversationsByCustomerData, ThrowOnError>
) => {
    return options.client.get<
        GetConversationsByCustomerResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/{id}/conversations',
        ...options,
    })
}

/**
 * Create conversation for customer
 * Creates a new, empty conversation for a customer.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.conversation.write|org.permission.conversation.create|
 *
 * ### Custom Attributes
 * [Custom attributes](https://help.kustomer.com/define-attributes-Skr924HI) are optional and allow you to specify
 * custom key-value pairs.
 *
 * Kustomer uses a naming convention for custom attributes to specify the field data type with a name suffix:
 *
 * #### Naming Suffix
 *
 * * `Num` *number* or *null*
 * * `At` *date-time* or *null*
 * * `Str` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Txt` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Bool` *boolean* or *null*
 * * `Url` *string* or *null*, format: *uri*
 */
export const createConversationForCustomer = <
    ThrowOnError extends boolean = true
>(
    options: Options<CreateConversationForCustomerData, ThrowOnError>
) => {
    return options.client.post<
        CreateConversationForCustomerResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/{id}/conversations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get all drafts for customer
 * Retrieves all outbound drafts to a customer based on the unique customer ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.draft.read|org.permission.draft.read|
 */
export const getAllDraftsByCustomer = <ThrowOnError extends boolean = true>(
    options: Options<GetAllDraftsByCustomerData, ThrowOnError>
) => {
    return options.client.get<
        GetAllDraftsByCustomerResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/{id}/drafts',
        ...options,
    })
}

/**
 * Create draft for customer
 * Creates an outbound draft to a customer through a specific channel (email, SMS, Facebook DM, etc).
 *
 * Use the `sendAt` property to designate a future date/time for the drafted message to be sent at.
 *
 * You can also create [note](https://help.kustomer.com/using-notes-HJvDjNP58) drafts by specifying the channel as 'note' in the request body channel field. You can have one note draft per conversation.
 *
 * ### Rate Limit
 * Customer drafts are subject to a rate limit. A single client can create up to 120 drafts per minute per customer, including drafts scheduled for the future.
 *
 * A `429 Too Many Requests` response will be returned if the rate limit has been reached for a customer.
 */
export const createDraftByCustomer = <ThrowOnError extends boolean = true>(
    options: Options<CreateDraftByCustomerData, ThrowOnError>
) => {
    return options.client.post<
        CreateDraftByCustomerResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/{id}/drafts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get customer event
 * Retrieves a single customer event based on the unique IDs of the customer and the event.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.event.read|org.permission.event.read|
 */
export const getaCustomerEvent = <ThrowOnError extends boolean = true>(
    options: Options<GetaCustomerEventData, ThrowOnError>
) => {
    return options.client.get<GetaCustomerEventResponse, unknown, ThrowOnError>(
        {
            url: '/customers/{customerId}/events/{id}',
            ...options,
        }
    )
}

/**
 * Get all events by customer for session
 * Retrieves all tracking events for a specific customer session based on the unique IDs of the customer and the session.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.event.read|org.permission.event.read|
 */
export const getAllEventsByCustomerForSession = <
    ThrowOnError extends boolean = true
>(
    options: Options<GetAllEventsByCustomerForSessionData, ThrowOnError>
) => {
    return options.client.get<
        GetAllEventsByCustomerForSessionResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/{customerId}/sessions/{sessionId}/events',
        ...options,
    })
}

/**
 * @deprecated
 * Get all customer events (deprecated)
 * Retrieves a single customer event based on the unique IDs of the customer and the event.
 *
 * ### Deprecation notice
 * > This endpoint has been deprecated and returns a `404 Not Found` error. Use [Get all events by customer for session](https://developer.kustomer.com/kustomer-api-docs/reference/customers-events#getalleventsbycustomerforsession) or [Get conversation events](https://developer.kustomer.com/kustomer-api-docs/reference/conversations#getconversationevents) instead.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.event.read|org.permission.event.read|
 */
export const getAllCustomerEvents = <ThrowOnError extends boolean = true>(
    options: Options<GetAllCustomerEventsData, ThrowOnError>
) => {
    return options.client.get<
        GetAllCustomerEventsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/{id}/events',
        ...options,
    })
}

/**
 * Get all customer sessions
 * Retrieves all sessions for a single customer based on the unique customer ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.event.read|org.permission.event.read|
 */
export const getCustomerSessions = <ThrowOnError extends boolean = true>(
    options: Options<GetCustomerSessionsData, ThrowOnError>
) => {
    return options.client.get<
        GetCustomerSessionsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/{id}/sessions',
        ...options,
    })
}

/**
 * Find customer KObjects (custom Objects)
 * Finds all [KObjects (custom objects)](https://help.kustomer.com/define-attributes-Skr924HI) linked to a customer based on the name of the Klass.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.customer.read|org.permission.customer.read|
 */
export const findCustomerKObjects = <ThrowOnError extends boolean = true>(
    options: Options<FindCustomerKObjectsData, ThrowOnError>
) => {
    return options.client.get<
        FindCustomerKObjectsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/{id}/klasses/{name}',
        ...options,
    })
}

/**
 * Create customer KObject (custom Object)
 * Creates a new [KObject (custom object)](https://help.kustomer.com/define-attributes-Skr924HI) and links the KObject to a customer based on the unique customer ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.kobject.write|org.permission.kobject.create|
 * ||org.permission.kobject.kobject_*.create|
 */
export const createCustomerKObject = <ThrowOnError extends boolean = true>(
    options: Options<CreateCustomerKObjectData, ThrowOnError>
) => {
    return options.client.post<
        CreateCustomerKObjectResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/{id}/klasses/{name}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Create customer merge
 * Creates a [customer merge](https://help.kustomer.com/merge-customers-SksSuFLaZ) based on a set of source customer and target customer IDs.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.customer.write|org.permission.customer_merge.create|
 * |org.admin.customer.merge.write|
 *
 * ### Merge rules
 *
 * Customer merges follow these rules:
 *
 * **Merge the following fields**:
 *
 * - Emails
 * - Phones
 * - Socials
 * - Locations
 * - Watchers
 * - Custom (target customer ID takes precedence with same attribute names)
 * - Tags
 * - KlassNames
 * - conversationCounts (sums all values)
 *
 * **Choose based on most recent value**:
 *
 * - Preview - Based on `preview.previewAt`
 * - LastMessageIn - Based on `lastMessageIn.sentAt`
 * - lastConversation - Based on `lastMessageIn.sentAt`
 * - recentLocation - Based on `recentLocation.updatedAt`
 * - signedUpAt
 * - modifiedAt / modifiedBy
 * - lastSeenAt
 * - lastActivityAt
 *
 * **Choose based on the oldest value**:
 * - createdAt / createdBy
 *
 * **Give precedence to the target customer ID value**:
 * - Company
 * - name
 * - externalId
 * - username
 * - avatarUrl
 * - locale
 * - timeZone
 * - birthdayAt
 * - gender
 */
export const createCustomerMerge = <ThrowOnError extends boolean = true>(
    options: Options<CreateCustomerMergeData, ThrowOnError>
) => {
    return options.client.post<
        CreateCustomerMergeResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/merges',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get customer merge
 * Retrieves an existing customer merge based on the unique ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.customer.read|org.permission.customer_merge.create|
 * |org.admin.customer.merge.read|
 */
export const getCustomerMerge = <ThrowOnError extends boolean = true>(
    options: Options<GetCustomerMergeData, ThrowOnError>
) => {
    return options.client.get<GetCustomerMergeResponse, unknown, ThrowOnError>({
        url: '/customers/merges/{id}',
        ...options,
    })
}

/**
 * Get customer merges by customer ID
 * Retrieves customer merges based on the unique ID of the customer.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.customer.read|org.permission.customer_merge.read|
 * |org.admin.customer.merge.read|
 */
export const getCustomerMergesByCustomer = <
    ThrowOnError extends boolean = true
>(
    options: Options<GetCustomerMergesByCustomerData, ThrowOnError>
) => {
    return options.client.get<
        GetCustomerMergesByCustomerResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/{id}/merges',
        ...options,
    })
}

/**
 * Get messages by customer ID
 * Retrieves messages for a specific customer based on the unique customer ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.message.read|org.permission.message.read|
 */
export const getMessagesByCustomer = <ThrowOnError extends boolean = true>(
    options: Options<GetMessagesByCustomerData, ThrowOnError>
) => {
    return options.client.get<
        GetMessagesByCustomerResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/{id}/messages',
        ...options,
    })
}

/**
 * Create message by customer ID
 * Creates a new message based on the unique customer ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.message.write|org.permission.message.create|
 *
 * ### Note
 * > If a conversation is specified, the message will be linked to the existing conversation. Otherwise, a new
 * conversation will be created and associated with the message.
 *
 * ### Authorization
 * The `org.admin` role is required for setting `createdAt`, `createdBy`, `modifiedAt`, and `modifiedBy`.  Otherwise, these attributes are automatically set by the token.
 *
 * ### Rate Limit
 * Messages are subject to a rate limit. A single client can create up to 120 messages per minute per customer.
 * Messages with `importedAt` in their body will not be subject to the rate limit.
 *
 * A `429 Too Many Requests` response will be returned if the rate limit has been reached for a customer.
 */
export const createMessageByCustomer = <ThrowOnError extends boolean = true>(
    options: Options<CreateMessageByCustomerData, ThrowOnError>
) => {
    return options.client.post<
        CreateMessageByCustomerResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/{id}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get notes by customer ID
 * Retrieves notes for a specific customer based on the unique customer ID.
 *
 * [Notes](https://help.kustomer.com/using-notes-HJvDjNP58) are internal communications visible only to users in your Kustomer organization.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.note.read|org.permission.note.read|
 */
export const getNotesByCustomer = <ThrowOnError extends boolean = true>(
    options: Options<GetNotesByCustomerData, ThrowOnError>
) => {
    return options.client.get<
        GetNotesByCustomerResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/{id}/notes',
        ...options,
    })
}

/**
 * Deletes unmasking window by customer ID
 * Deletes an unmasking window based on the unique customer ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----------------------|--------------------------------------|
 * |org.user.customer.write|org.permission.unmasking_window.delete|
 *
 * ### Note
 * > If an unmasking window is deleted for a customer, any sensitive attributes for the customer and for the customer's conversations, messages, and custom objects will be returned masked.
 */
export const deleteUnmaskingWindowByCustomer = <
    ThrowOnError extends boolean = true
>(
    options: Options<DeleteUnmaskingWindowByCustomerData, ThrowOnError>
) => {
    return options.client.delete<unknown, unknown, ThrowOnError>({
        bodySerializer: null,
        url: '/customers/{id}/unmasking-windows',
        ...options,
        headers: {
            'Content-Type': 'text/plain',
            ...options?.headers,
        },
    })
}

/**
 * Create unmasking window by customer ID
 * Creates or replaces an unmasking window based on the unique customer ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----------------------|--------------------------------------|
 * |org.user.customer.write|org.permission.unmasking_window.create|
 *
 * ### Note
 * > If an unmasking window is created for a customer, any sensitive attributes for the customer and for the customer's conversations, messages, and custom objects will be returned unmasked during the unmasking window period.
 */
export const createUnmaskingWindowByCustomer = <
    ThrowOnError extends boolean = true
>(
    options: Options<CreateUnmaskingWindowByCustomerData, ThrowOnError>
) => {
    return options.client.post<unknown, unknown, ThrowOnError>({
        bodySerializer: null,
        url: '/customers/{id}/unmasking-windows',
        ...options,
        headers: {
            'Content-Type': 'text/plain',
            ...options?.headers,
        },
    })
}

/**
 * Get customers
 * Retrieves all customers in your organization. Results include customer data, such as their phone number, sentiment score, and the last message in a conversation.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.customer.read|org.permission.customer.read|
 */
export const getCustomers = <ThrowOnError extends boolean = true>(
    options: Options<GetCustomersData, ThrowOnError>
) => {
    return options.client.get<GetCustomersResponse, unknown, ThrowOnError>({
        url: '/customers',
        ...options,
    })
}

/**
 * Create customer
 * Creates a new customer record.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.customer.write|org.permission.customer.create|
 *
 * ### Custom Attributes
 * [Custom attributes](https://help.kustomer.com/define-attributes-Skr924HI) are optional and allow you to specify custom key-value pairs.
 *
 * Kustomer uses a naming convention for custom attributes to specify the field data type with a name suffix:
 *
 * #### Naming Suffix
 *
 * * `Num` *number* or *null*
 * * `At` *date-time* or *null*
 * * `Str` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Txt` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Bool` *boolean* or *null*
 * * `Url` *string* or *null*, format: *uri*
 */
export const createCustomer = <ThrowOnError extends boolean = true>(
    options: Options<CreateCustomerData, ThrowOnError>
) => {
    return options.client.post<CreateCustomerResponse, unknown, ThrowOnError>({
        url: '/customers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Delete customer
 * Deletes a customer record based on the unique customer ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.customer.delete|org.permission.customer.delete|
 */
export const deleteCustomer = <ThrowOnError extends boolean = true>(
    options: Options<DeleteCustomerData, ThrowOnError>
) => {
    return options.client.delete<unknown, unknown, ThrowOnError>({
        url: '/customers/{id}',
        ...options,
    })
}

/**
 * Get customer by ID
 * Retrieves a customer record based on the unique customer ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.customer.read|org.permission.customer.read|
 */
export const getCustomerById = <ThrowOnError extends boolean = true>(
    options: Options<GetCustomerByIdData, ThrowOnError>
) => {
    return options.client.get<GetCustomerByIdResponse, unknown, ThrowOnError>({
        url: '/customers/{id}',
        ...options,
    })
}

/**
 * Update customer attributes
 * Updates customer attributes.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.customer.write|org.permission.customer.update|
 *
 * ### Note
 * > This endpoint is subject to Object Rate Limiting, which limits how many updates single user can make to a single customer. To learn more, see [Rate limiting](https://developer.kustomer.com/kustomer-api-docs/reference/rate-limiting).
 *
 * ### Company
 * If you omit the company, the customer will no longer be linked to the company.
 *
 * ### Custom Attributes
 * [Custom attributes](https://help.kustomer.com/define-attributes-Skr924HI) are optional and allow you to specify custom key-value pairs.
 *
 * Kustomer uses a naming convention for custom attributes to specify the field data type with a name suffix:
 *
 * #### Naming Suffix
 *
 * * `Num` *number* or *null*
 * * `At` *date-time* or *null*
 * * `Str` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Txt` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Bool` *boolean* or *null*
 * * `Url` *string* or *null*, format: *uri*
 */
export const updateCustomerAttributes = <ThrowOnError extends boolean = true>(
    options: Options<UpdateCustomerAttributesData, ThrowOnError>
) => {
    return options.client.patch<
        UpdateCustomerAttributesResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Update customer
 * Updates a customer based on the unique customer ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.customer.write|org.permission.customer.update|
 *
 * ### Note
 * > This endpoint is subject to Object Rate Limiting, which limits how many updates single user can make to a single customer. To learn more, see [Rate limiting](https://developer.kustomer.com/kustomer-api-docs/reference/rate-limiting).
 *
 * ### Company
 * If you omit the company, the customer will no longer be linked to the company.
 *
 * ### Custom Attributes
 * [Custom attributes](https://help.kustomer.com/define-attributes-Skr924HI) are optional and allow you to specify custom key-value pairs.
 *
 * Kustomer uses a naming convention for custom attributes to specify the field data type with a name suffix:
 *
 * #### Naming Suffix
 *
 * * `Num` *number* or *null*
 * * `At` *date-time* or *null*
 * * `Str` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Txt` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Bool` *boolean* or *null*
 * * `Url` *string* or *null*, format: *uri*
 */
export const updateCustomer = <ThrowOnError extends boolean = true>(
    options: Options<UpdateCustomerData, ThrowOnError>
) => {
    return options.client.put<UpdateCustomerResponse, unknown, ThrowOnError>({
        url: '/customers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get customer by email
 * Retrieves a customer based on their email address.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.customer.read|org.permission.customer.read|
 */
export const getCustomerByEmail = <ThrowOnError extends boolean = true>(
    options: Options<GetCustomerByEmailData, ThrowOnError>
) => {
    return options.client.get<
        GetCustomerByEmailResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/email={email}',
        ...options,
    })
}

/**
 * Get customer by external ID
 * Retrieves a customer based on their unique external ID.
 *
 * The `externalId` is typically the ID of the customer within your database or an external service.
 *
 * This provides a unique way to create and identify users by mapping a unique customer ID in Kustomer to a unique customer ID in an external system.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.customer.read|org.permission.customer.read|
 */
export const getCustomerByExternalId = <ThrowOnError extends boolean = true>(
    options: Options<GetCustomerByExternalIdData, ThrowOnError>
) => {
    return options.client.get<
        GetCustomerByExternalIdResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/externalId={externalId}',
        ...options,
    })
}

/**
 * Get customer by phone number
 * Retrieves a customer based on their phone number.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.customer.read|org.permission.customer.read|
 */
export const getCustomerByPhone = <ThrowOnError extends boolean = true>(
    options: Options<GetCustomerByPhoneData, ThrowOnError>
) => {
    return options.client.get<
        GetCustomerByPhoneResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/phone={phone}',
        ...options,
    })
}

/**
 * Get custom attribute metadata
 * Retrieves the [metadata properties](https://developer.kustomer.com/kustomer-apps-platform/docs/klasses#metadataproperties) for the custom attributes of a specific resource (for example, Company, Conversation, Customer, Message, and KObject (custom Object)).
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.metadata.read|org.permission.metadata.read|
 * |org.admin.metadata.read||
 *
 */
export const getCustomAttributeMetadata = <ThrowOnError extends boolean = true>(
    options: Options<GetCustomAttributeMetadataData, ThrowOnError>
) => {
    return options.client.get<
        GetCustomAttributeMetadataResponse,
        unknown,
        ThrowOnError
    >({
        url: '/metadata/{resource}',
        ...options,
    })
}

/**
 * Update custom attribute metadata
 * Sets the [metadata properties](https://developer.kustomer.com/kustomer-apps-platform/docs/klasses#metadataproperties) for custom attributes on any of the available resources (for example, Company, Conversation, Customer, Message, and KObject (custom Object)).
 *
 * Metadata property options are dependent on the data type as specified by the
 * suffix of the property name. The `displayName` default value is set to the title cased version of the camelCase property name and the type is determined automatically. For example, a property named `totalOrdersNum` will have a default `displayName` value of `Total Orders` (if no alternative `displayName` value is set) and the type is set to `number` based on the `Num` suffix in the property name `totalOrdersNum`.
 *
 * To learn more about options for metadata properties, visit [Klasses](https://developer.kustomer.com/kustomer-apps-platform/docs/klasses#metadataproperties).
 *
 * ### Note
 * > When you configure metadata property types for custom attributes, you must configure metadata for custom properties ending with `Id` before you can use the attributes. When you update these properties, Kustomer validates these values to ensure that the related object exists and matches the specified target type.
 *
 * > When configuring attributes as sensitive, note that some attributes will inherit any permissions and metadata from other attributes. These are
 * - `customer.externalId` inherits permissions and metadata from `customer.externalIds`
 * - `customer.firstName`, `customer.lastName`, and `customer.displayName` inherits permissions and metadata from `customer.name`
 *
 * ### Custom Attributes
 * [Custom attributes](https://help.kustomer.com/define-attributes-Skr924HI) are optional and allow you to specify custom key-value pairs.
 *
 * Kustomer uses a naming convention for custom attributes to specify the field data type with a name suffix:
 *
 * #### Naming Suffix
 *
 * * `Num` *number* or *null*
 * * `At` *date-time* or *null*
 * * `Str` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Txt` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Bool` *boolean* or *null*
 * * `Url` *string* or *null*, format: *uri*
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.metadata.write|org.permission.metadata.update|
 *
 */
export const updateCustomAttributeMetadata = <
    ThrowOnError extends boolean = true
>(
    options: Options<UpdateCustomAttributeMetadataData, ThrowOnError>
) => {
    return options.client.put<
        UpdateCustomAttributeMetadataResponse,
        unknown,
        ThrowOnError
    >({
        url: '/metadata/{resource}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get draft attachments
 * Retrieves all draft attachments.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.attachment.read|org.permission.attachment.read|
 */
export const getDraftAttachments = <ThrowOnError extends boolean = true>(
    options: Options<GetDraftAttachmentsData, ThrowOnError>
) => {
    return options.client.get<
        GetDraftAttachmentsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/drafts/{id}/attachments',
        ...options,
    })
}

/**
 * Create draft attachment
 * Creates an attachment on a draft.
 *
 * ## Pre-signed URL
 *
 * When you create an attachment, the response will include a **related** URL in the **links** section. You can use this URL to upload the contents of the attachment. This URL is a Pre-Signed URL from S3 and provides access to upload a file for a limited duration.
 *
 * ### Example command to upload an attachment to the related Pre-Signed URL
 *
 * ```bash
 * $ curl --upload-file [full path to file] "[Pre-Signed URL]"
 * ```
 */
export const createDraftAttachment = <ThrowOnError extends boolean = true>(
    options: Options<CreateDraftAttachmentData, ThrowOnError>
) => {
    return options.client.post<
        CreateDraftAttachmentResponse,
        unknown,
        ThrowOnError
    >({
        url: '/drafts/{id}/attachments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Delete draft attachment
 * Deletes a draft attachment resource.
 */
export const deleteDraftAttachment = <ThrowOnError extends boolean = true>(
    options: Options<DeleteDraftAttachmentData, ThrowOnError>
) => {
    return options.client.delete<unknown, unknown, ThrowOnError>({
        url: '/drafts/{id}/attachments/{attachmentId}',
        ...options,
    })
}

/**
 * Get draft attachment
 * Retrieves a draft attachment.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.attachment.read|org.permission.attachment.read|
 *
 * ### Pre-signed URL
 *
 * When you request the resource, the response will include a **related** URL in the **links** section. You can use this URL to download the attachment file.  This URL is a Pre-Signed URL from S3 and provides access for a limited duration to download a file.
 */
export const getDraftAttachment = <ThrowOnError extends boolean = true>(
    options: Options<GetDraftAttachmentData, ThrowOnError>
) => {
    return options.client.get<
        GetDraftAttachmentResponse,
        unknown,
        ThrowOnError
    >({
        url: '/drafts/{id}/attachments/{attachmentId}',
        ...options,
    })
}

/**
 * Get draft forward by ID
 * Retrieves a draft forward based on the unique forward ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.draft.read|org.permission.draft.read|
 */
export const getaDraftForwardById = <ThrowOnError extends boolean = true>(
    options: Options<GetaDraftForwardByIdData, ThrowOnError>
) => {
    return options.client.get<
        GetaDraftForwardByIdResponse,
        unknown,
        ThrowOnError
    >({
        url: '/forwards/{id}',
        ...options,
    })
}

/**
 * Update draft forward
 * Updates a draft forward.
 */
export const updateDraftForward = <ThrowOnError extends boolean = true>(
    options: Options<UpdateDraftForwardData, ThrowOnError>
) => {
    return options.client.put<
        UpdateDraftForwardResponse,
        unknown,
        ThrowOnError
    >({
        url: '/forwards/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get forward attachments
 * Retrieves all forward attachments.
 */
export const getForwardAttachments = <ThrowOnError extends boolean = true>(
    options: Options<GetForwardAttachmentsData, ThrowOnError>
) => {
    return options.client.get<
        GetForwardAttachmentsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/forwards/{id}/attachments',
        ...options,
    })
}

/**
 * Create forward attachment
 * Creates an attachment on a forward.
 *
 * ## Pre-signed URL
 *
 * When you create an attachment, the response will include a **related** URL in the **links** section. You ca use this URL to upload the contents of the attachment. This URL is a Pre-Signed URL from S3 and provides access to upload a file for a limited duration.
 *
 * ### Example command to upload an attachment to the related Pre-Signed URL
 *
 * ```bash
 * $ curl --upload-file [full path to file] "[Pre-Signed URL]"
 * ```
 */
export const createForwardAttachment = <ThrowOnError extends boolean = true>(
    options: Options<CreateForwardAttachmentData, ThrowOnError>
) => {
    return options.client.post<
        CreateForwardAttachmentResponse,
        unknown,
        ThrowOnError
    >({
        url: '/forwards/{id}/attachments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Delete Forward Attachment
 * Deletes a forward attachment resource.
 */
export const deleteForwardAttachment = <ThrowOnError extends boolean = true>(
    options: Options<DeleteForwardAttachmentData, ThrowOnError>
) => {
    return options.client.delete<unknown, unknown, ThrowOnError>({
        url: '/forwards/{id}/attachments/{attachmentId}',
        ...options,
    })
}

/**
 * Get forward attachment
 * Retrieves a forward attachment.
 *
 * ### Pre-signed URL
 *
 * When you request the resource, the response will include a **related** URL in the **links** section. You can use this URL to download the attachment file.  This URL is a Pre-Signed URL from S3 and provides access for a limited duration to download a file.
 */
export const getForwardAttachment = <ThrowOnError extends boolean = true>(
    options: Options<GetForwardAttachmentData, ThrowOnError>
) => {
    return options.client.get<
        GetForwardAttachmentResponse,
        unknown,
        ThrowOnError
    >({
        url: '/forwards/{id}/attachments/{attachmentId}',
        ...options,
    })
}

/**
 * Get outbound accounts
 * Retrieves all outbound accounts.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.apps.read|org.permission.apps.read|
 */
export const getOutboundAccounts = <ThrowOnError extends boolean = true>(
    options: Options<GetOutboundAccountsData, ThrowOnError>
) => {
    return options.client.get<
        GetOutboundAccountsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/outboundAccounts',
        ...options,
    })
}

/**
 * Delete draft
 * Deletes a draft.
 */
export const deleteDraft = <ThrowOnError extends boolean = true>(
    options: Options<DeleteDraftData, ThrowOnError>
) => {
    return options.client.delete<unknown, unknown, ThrowOnError>({
        url: '/drafts/{id}',
        ...options,
    })
}

/**
 * Update draft
 * Updates a draft.
 *
 * You can use this endpoint to update any available properties for a channel.
 *
 * ## `sendAt` property options
 *
 * * If the `sendAt` property is set to a valid timestamp, the draft will be scheduled to be sent.
 * * If the `sendAt` property is empty, the draft will be unscheduled.
 * * If the `sendAt` property is omitted, the draft status won't change.
 */
export const updateDraft = <ThrowOnError extends boolean = true>(
    options: Options<UpdateDraftData, ThrowOnError>
) => {
    return options.client.put<UpdateDraftResponse, unknown, ThrowOnError>({
        url: '/drafts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Bulk delete KObjects (custom objects)
 * Deletes multiple KObjects in bulk.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.kobject.delete|org.permission.kobject.delete|
 * ||org.permission.kobject.kobject_*.delete|
 */
export const bulkDeleteKObjects = <ThrowOnError extends boolean = true>(
    options: Options<BulkDeleteKObjectsData, ThrowOnError>
) => {
    return options.client.delete<
        BulkDeleteKObjectsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/klasses/{name}/bulk',
        ...options,
    })
}

/**
 * Bulk create KObjects (custom objects)
 * Creates KObjects (custom objects) in bulk.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.kobject.write|org.permission.kobject.create|
 * ||org.permission.kobject.kobject_*.create|
 */
export const bulkCreateKObjects = <ThrowOnError extends boolean = true>(
    options: Options<BulkCreateKObjectsData, ThrowOnError>
) => {
    return options.client.post<
        BulkCreateKObjectsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/klasses/{name}/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Bulk batch update KObjects (custom objects)
 * Updates a bulk batch of multiple KObjects (custom objects).
 *
 * Use the `ids` query param to update multiple KObjects in bulk with the same data.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.kobject.write|org.permission.kobject.update|
 * ||org.permission.kobject.kobject_*.update|
 */
export const bulkBatchUpdateKObjects = <ThrowOnError extends boolean = true>(
    options: Options<BulkBatchUpdateKObjectsData, ThrowOnError>
) => {
    return options.client.put<
        BulkBatchUpdateKObjectsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/klasses/{name}/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get KObjects (custom objects)
 * Retrieves a KObject (custom object) based on the Klass name.
 *
 * To learn more, see [Data Model Overview](https://support.kustomer.com/data-model-overview-SyIS1S3zM).
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.klass.read|org.permission.klass.read|
 * |org.admin.klass.read||
 */
export const getKObjects = <ThrowOnError extends boolean = true>(
    options: Options<GetKObjectsData, ThrowOnError>
) => {
    return options.client.get<GetKObjectsResponse, unknown, ThrowOnError>({
        url: '/klasses/{name}',
        ...options,
    })
}

/**
 * Create KObject
 * Creates a new KObject (custom object).
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.kobject.write|org.permission.kobject.create|
 * ||org.permission.kobject.kobject_*.create|
 *
 * ### Custom Attributes
 * [Custom attributes](https://help.kustomer.com/define-attributes-Skr924HI) are optional and allow you to specify custom key-value pairs.
 *
 * Kustomer uses a naming convention for custom attributes to specify the field data type with a name suffix:
 *
 * #### Naming Suffix
 *
 * * `Num` *number* or *null*
 * * `At` *date-time* or *null*
 * * `Str` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Txt` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Bool` *boolean* or *null*
 * * `Url` *string* or *null*, format: *uri*
 *
 * ### Rate Limit
 * Custom objects are subject to a rate limit. A single client can create up to 120 custom objects per minute per customer.
 *
 * #### Notes
 * * Custom objects with `importedAt` in the body will not be subject to the rate limit.
 * * A `429 Too Many Requests` response will be returned if the rate limit has been reached for a customer.
 */
export const createKObject = <ThrowOnError extends boolean = true>(
    options: Options<CreateKObjectData, ThrowOnError>
) => {
    return options.client.post<CreateKObjectResponse, unknown, ThrowOnError>({
        url: '/klasses/{name}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Delete KObject (custom object) by ID
 * Deletes a KObject (custom object) based on the unique KObject ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.kobject.delete|org.permission.kobject.delete|
 * ||org.permission.kobject.kobject_*.delete|
 */
export const deleteKObject = <ThrowOnError extends boolean = true>(
    options: Options<DeleteKObjectData, ThrowOnError>
) => {
    return options.client.delete<unknown, unknown, ThrowOnError>({
        url: '/klasses/{name}/{id}',
        ...options,
    })
}

/**
 * Get KObject (custom object) by ID
 * Retrieves a KObject (custom object) based on the unique KObject ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.kobject.read|org.permission.kobject.read|
 * ||org.permission.kobject.kobject_*.read|
 */
export const getKObject = <ThrowOnError extends boolean = true>(
    options: Options<GetKObjectData, ThrowOnError>
) => {
    return options.client.get<GetKObjectResponse, unknown, ThrowOnError>({
        url: '/klasses/{name}/{id}',
        ...options,
    })
}

/**
 * Update KObject (custom object) by ID
 * Updates an existing KObject (custom object) based on the unique ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.kobject.write|org.permission.kobject.update|
 * ||org.permission.kobject.kobject_*.update|
 *
 * ### Note
 * > This endpoint is subject to "Object Rate Limiting", meaning that a single user is limited in how many updates they can make to a single KObject. To learn more, see [Rate limiting](https://developer.kustomer.com/kustomer-api-docs/reference/rate-limiting).
 *
 * ### Custom Attributes
 * [Custom attributes](https://help.kustomer.com/define-attributes-Skr924HI) are optional and allow you to specify custom key-value pairs.
 *
 * Kustomer uses a naming convention for custom attributes to specify the field data type with a name suffix:
 *
 * #### Naming Suffix
 *
 * * `Num` *number* or *null*
 * * `At` *date-time* or *null*
 * * `Str` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Txt` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Bool` *boolean* or *null*
 * * `Url` *string* or *null*, format: *uri*
 */
export const updateKObject = <ThrowOnError extends boolean = true>(
    options: Options<UpdateKObjectData, ThrowOnError>
) => {
    return options.client.put<UpdateKObjectResponse, unknown, ThrowOnError>({
        url: '/klasses/{name}/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get Klasses
 * Retrieves all [Klasses](https://help.kustomer.com/define-attributes-Skr924HI#Attributes).
 *
 * ## Filter by `status`
 *
 * You can filter results based on the `status` of the Klass. Valid values are `enabled`, `existing_only`, and `disabled`. The default value is `enabled`.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.klass.read|org.permission.klass.read|
 * |org.admin.klass.read||
 */
export const getKlasses = <ThrowOnError extends boolean = true>(
    options: Options<GetKlassesData, ThrowOnError>
) => {
    return options.client.get<GetKlassesResponse, unknown, ThrowOnError>({
        url: '/klasses',
        ...options,
    })
}

/**
 * Create Klass
 * Creates a new [Klass](https://help.kustomer.com/define-attributes-Skr924HI#Attributes) model for your Kustomer organization.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.klass.write|org.permission.klass.create|
 */
export const createKlass = <ThrowOnError extends boolean = true>(
    options: Options<CreateKlassData, ThrowOnError>
) => {
    return options.client.post<CreateKlassResponse, unknown, ThrowOnError>({
        url: '/klasses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Delete Klass
 * Deletes a Klass based on the unique Klass ID.
 *
 * ### Note
 * > You cannot delete a Klass if KObjects (custom objects) exist for the Klass in your Kustomer organization.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.klass.write|org.permission.klass.delete|
 */
export const deleteKlass = <ThrowOnError extends boolean = true>(
    options: Options<DeleteKlassData, ThrowOnError>
) => {
    return options.client.delete<unknown, unknown, ThrowOnError>({
        url: '/klasses/{id}',
        ...options,
    })
}

/**
 * Get Klass by ID
 * Retrieves a Klass based on the unique Klass ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.klass.read|org.permission.klass.read|
 * |org.admin.klass.read||
 */
export const getKlass = <ThrowOnError extends boolean = true>(
    options: Options<GetKlassData, ThrowOnError>
) => {
    return options.client.get<GetKlassResponse, unknown, ThrowOnError>({
        url: '/klasses/{id}',
        ...options,
    })
}

/**
 * Update Klass by ID
 * Updates Klass attributes based on the unique Klass ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.klass.write|org.permission.klass.update|
 */
export const updateKlass = <ThrowOnError extends boolean = true>(
    options: Options<UpdateKlassData, ThrowOnError>
) => {
    return options.client.put<UpdateKlassResponse, unknown, ThrowOnError>({
        url: '/klasses/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Create media
 * Creates a new media upload document. This includes a temporary upload policy to allow a file upload through a `POST` request.
 *
 * ## Media uploads
 *
 * Media uploads require a mutli-part `POST` request to the URL in the `meta.upload.url` property in the response object:
 * * The request must include as standard form keys the key-value pairs located in the `meta.upload.fields` property.
 * * The request must include the file as the last key under the name `file`.
 *
 * ## Blocked extensions
 *
 * The following file name extensions are blocked and **cannot** be used as attachments:
 *
 * - .bin
 * - .bat
 * - .chm
 * - .com
 * - .cpl
 * - .crt
 * - .exe
 * - .hlp
 * - .hta
 * - .inf
 * - .ins
 * - .isp
 * - .jse
 * - .lnk
 * - .mdb
 * - .msc
 * - .msi
 * - .msp
 * - .mst
 * - .pcd
 * - .pif
 * - .ps1
 * - .reg
 * - .scr
 * - .sct
 * - .shs
 * - .vbe
 * - .vba
 * - .vbs
 * - .wsf
 * - .wsh
 * - .wsl
 */
export const createMedia = <ThrowOnError extends boolean = true>(
    options: Options<CreateMediaData, ThrowOnError>
) => {
    return options.client.post<CreateMediaResponse, unknown, ThrowOnError>({
        url: '/media',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get media by ID
 * Retrieves a media object that matches the unique ID or an array of media objects (if multiple IDs are given).
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.media.read|org.permission.kb.read|
 * |org.user.setting.read||
 * |org.user.content.kb.read||
 * |org.user.kb.read||
 * |org.admin.content.kb.read||
 * |org.admin.kb.read||
 */
export const getMediabyId = <ThrowOnError extends boolean = true>(
    options: Options<GetMediabyIdData, ThrowOnError>
) => {
    return options.client.get<GetMediabyIdResponse, unknown, ThrowOnError>({
        url: '/media/{id}',
        ...options,
    })
}

/**
 * Update media by ID
 * Updates a media object based on the unique media ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.media.write|org.permission.kb.update|
 */
export const updateMedia = <ThrowOnError extends boolean = true>(
    options: Options<UpdateMediaData, ThrowOnError>
) => {
    return options.client.put<UpdateMediaResponse, unknown, ThrowOnError>({
        url: '/media/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Bulk create messages
 * Creates a bulk batch of messages.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.message.write|org.permission.message.create|
 */
export const bulkCreateMessages = <ThrowOnError extends boolean = true>(
    options: Options<BulkCreateMessagesData, ThrowOnError>
) => {
    return options.client.post<
        BulkCreateMessagesResponse,
        unknown,
        ThrowOnError
    >({
        url: '/messages/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Bulk batch update messages
 * Updates a bulk batch of messages.
 *
 * Use the `ids` query param to update multiple messages in bulk with the same data.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.message.write|org.permission.message.update|
 */
export const bulkBatchUpdateMessages = <ThrowOnError extends boolean = true>(
    options: Options<BulkBatchUpdateMessagesData, ThrowOnError>
) => {
    return options.client.put<
        BulkBatchUpdateMessagesResponse,
        unknown,
        ThrowOnError
    >({
        url: '/messages/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Redact a message
 * Redacts a message.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.message.write|org.permission.message_redaction.create|
 */
export const redactMessage = <ThrowOnError extends boolean = true>(
    options: Options<RedactMessageData, ThrowOnError>
) => {
    return options.client.post<RedactMessageResponse, unknown, ThrowOnError>({
        url: '/messages/{id}/redactions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get messages
 * Retrieves [messages](https://help.kustomer.com/message-options-H1tSk3QOI) for your Kustomer organization.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.message.read|org.permission.message.read|
 */
export const getMessages = <ThrowOnError extends boolean = true>(
    options: Options<GetMessagesData, ThrowOnError>
) => {
    return options.client.get<
        GetMessagesResponse,
        GetMessagesError,
        ThrowOnError
    >({
        url: '/messages',
        ...options,
    })
}

/**
 * Create message
 * Adds an instance of a message to an existing conversation timeline with a customer. Interactions with a customer that occured via email, SMS, web or mobile chat, Facebook direct messages or comments, Twitter direct messages or Tweets, voice, Instagram direct messages or WhatsApp messages can be added to the conversation timeline.
 *
 * Does not sent a message to a customer, only to be used to record the instance of a message. To send a message, first see the [Create a draft by customer endpoint](https://developer.kustomer.com/kustomer-api-docs/reference/createadraftbycustomer).
 *
 * ### Prerequisites
 *
 * An existing conversation must be created to add the message. See the [Create conversation](https://developer.kustomer.com/kustomer-api-docs/reference/createaconversation) or [Bulk create conversations](https://developer.kustomer.com/kustomer-api-docs/reference/bulkcreateconversationshttps://developer.kustomer.com/kustomer-api-docs/reference/bulkcreateconversations) or [Create conversation for customer](https://developer.kustomer.com/kustomer-api-docs/reference/createaconversationforacustomer) endpoints.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.message.write|org.permission.message.create|
 *
 * ### Rate limit
 * Messages are subject to a rate limit. A single client can create up to 120 messages per minute per customer.
 *
 * Messages with `importedAt` in their body will not be subject to the rate limit.
 *
 * A `429 Too Many Requests` response will be returned if the rate limit has been reached for a customer.
 */
export const createMessage = <ThrowOnError extends boolean = true>(
    options: Options<CreateMessageData, ThrowOnError>
) => {
    return options.client.post<CreateMessageResponse, unknown, ThrowOnError>({
        url: '/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get message by ID
 * Retrieves a single message based on the unique message ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.message.read|org.permission.message.read|
 */
export const getMessage = <ThrowOnError extends boolean = true>(
    options: Options<GetMessageData, ThrowOnError>
) => {
    return options.client.get<GetMessageResponse, unknown, ThrowOnError>({
        url: '/messages/{id}',
        ...options,
    })
}

/**
 * Update message attributes by ID
 * Updates attributes for a message based on the unique message ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.message.write|org.permission.message.update|
 *
 * ### Note
 * > This endpoint is subject to Object Rate Limiting, which limits how many updates single user can make to a single message. To learn more, see [Rate limiting](https://developer.kustomer.com/kustomer-api-docs/reference/rate-limiting).
 *
 * ### Authorization
 * > The `org.admin` role is required for setting `createdAt`, `createdBy`, `modifiedAt`, and `modifiedBy`.  Otherwise, these attributes are automatically set by the token.
 *
 * ### Custom Attributes
 *
 * [Custom attributes](https://help.kustomer.com/define-attributes-Skr924HI) are optional and allow you to specify custom key-value pairs.
 *
 * Kustomer uses a naming convention for custom attributes to specify the field data type with a name suffix:
 *
 * #### Naming Suffix
 *
 * * `Num` *number* or *null*
 * * `At` *date-time* or *null*
 * * `Str` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Txt` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Bool` *boolean* or *null*
 * * `Url` *string* or *null*, format: *uri*
 */
export const updateMessageAttributes = <ThrowOnError extends boolean = true>(
    options: Options<UpdateMessageAttributesData, ThrowOnError>
) => {
    return options.client.patch<
        UpdateMessageAttributesResponse,
        unknown,
        ThrowOnError
    >({
        url: '/messages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Update message by ID
 * Updates a message based on the unique message ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.message.write|org.permission.message.update|
 *
 * ### Note
 * > This endpoint is subject to Object Rate Limiting, which limits how many updates single user can make to a single message. To learn more, see [Rate limiting](https://developer.kustomer.com/kustomer-api-docs/reference/rate-limiting).
 *
 * ### Authorization
 * > The `org.admin` role is required for setting `createdAt`, `createdBy`, `modifiedAt`, and `modifiedBy`.  Otherwise, these attributes are automatically set by the token.
 *
 * ### Custom Attributes
 *
 * [Custom attributes](https://help.kustomer.com/define-attributes-Skr924HI) are optional and allow you to specify custom key-value pairs.
 *
 * Kustomer uses a naming convention for custom attributes to specify the field data type with a name suffix:
 *
 * #### Naming Suffix
 *
 * * `Num` *number* or *null*
 * * `At` *date-time* or *null*
 * * `Str` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Txt` *string* or *null*, length: [ 0 .. 1024 ] characters
 * * `Bool` *boolean* or *null*
 * * `Url` *string* or *null*, format: *uri*
 */
export const updateMessage = <ThrowOnError extends boolean = true>(
    options: Options<UpdateMessageData, ThrowOnError>
) => {
    return options.client.put<UpdateMessageResponse, unknown, ThrowOnError>({
        url: '/messages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get a Message by External ID
 * Retrieves a single message using its unique external message ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.message.read|org.permission.message.read|
 *
 * | Key		| Value		| Description		|
 * |-|-|-|
 * | externalID	| string	| Unique external ID of the message.	|
 */
export const getMessageByExternalId = <ThrowOnError extends boolean = true>(
    options: Options<GetMessageByExternalIdData, ThrowOnError>
) => {
    return options.client.get<
        GetMessageByExternalIdResponse,
        unknown,
        ThrowOnError
    >({
        url: '/messages/externalid=:externalId',
        ...options,
    })
}

/**
 * Bulk create notes
 * Creates a bulk batch of notes.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.note.write|org.permission.note.create|
 */
export const bulkCreateNotes = <ThrowOnError extends boolean = true>(
    options: Options<BulkCreateNotesData, ThrowOnError>
) => {
    return options.client.post<BulkCreateNotesResponse, unknown, ThrowOnError>({
        url: '/notes/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Bulk batch update notes
 * Updates a bulk batch of notes.
 *
 * Use the `ids` query param to update multiple notes in bulk with the same data.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.note.write|org.permission.note.update|
 */
export const bulkBatchUpdateNotes = <ThrowOnError extends boolean = true>(
    options: Options<BulkBatchUpdateNotesData, ThrowOnError>
) => {
    return options.client.put<
        BulkBatchUpdateNotesResponse,
        unknown,
        ThrowOnError
    >({
        url: '/notes/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get notes
 * Retrieves all [notes](https://help.kustomer.com/using-notes-HJvDjNP58) for a Kustomer organization.
 *
 *
 * Any of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.note.read|org.permission.note.read|
 */
export const getNotesForOrg = <ThrowOnError extends boolean = true>(
    options: Options<GetNotesForOrgData, ThrowOnError>
) => {
    return options.client.get<GetNotesForOrgResponse, unknown, ThrowOnError>({
        url: '/notes',
        ...options,
    })
}

/**
 * Create note
 * Creates a note.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.note.write|org.permission.note.create|
 *
 * ### Rate limit
 * Notes are subject to a rate limit. A single client can create up to 120 notes per minute per customer.
 */
export const createNote = <ThrowOnError extends boolean = true>(
    options: Options<CreateNoteData, ThrowOnError>
) => {
    return options.client.post<CreateNoteResponse, unknown, ThrowOnError>({
        url: '/notes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Delete note by ID
 * Deletes a note based on the unique note ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.note.write|org.permission.note.delete|
 */
export const deleteNoteById = <ThrowOnError extends boolean = true>(
    options: Options<DeleteNoteByIdData, ThrowOnError>
) => {
    return options.client.delete<unknown, unknown, ThrowOnError>({
        url: '/notes/{id}',
        ...options,
    })
}

/**
 * Get note by ID
 * Retrieves a note based on the unique note ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.note.read|org.permission.note.read|
 */
export const getNoteById = <ThrowOnError extends boolean = true>(
    options: Options<GetNoteByIdData, ThrowOnError>
) => {
    return options.client.get<GetNoteByIdResponse, unknown, ThrowOnError>({
        url: '/notes/{id}',
        ...options,
    })
}

/**
 * Update note attributes by ID
 * Updates one or more note attibutes based on the unique note ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.note.write|org.permission.note.update|
 *
 * ### Note
 * > This endpoint is subject to Object Rate Limiting, which limits how many updates single user can make to a single note. To learn more, see [Rate limiting](https://developer.kustomer.com/kustomer-api-docs/reference/rate-limiting).
 *
 * ### Authorization
 * > The `org.admin` role is required for setting `createdAt`, `createdBy`, `modifiedAt`, and `modifiedBy`.  Otherwise, these attributes are automatically set by the token.
 */
export const patchNoteById = <ThrowOnError extends boolean = true>(
    options: Options<PatchNoteByIdData, ThrowOnError>
) => {
    return options.client.patch<PatchNoteByIdResponse, unknown, ThrowOnError>({
        url: '/notes/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Update note by ID
 * Updates a note based on the unique note ID.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.note.write|org.permission.note.update|
 *
 * ### Note
 * > This endpoint is subject to Object Rate Limiting, which limits how many updates single user can make to a single note. To learn more, see [Rate limiting](https://developer.kustomer.com/kustomer-api-docs/reference/rate-limiting).
 *
 * ### Authorization
 * > The `org.admin` role is required for setting `createdAt`, `createdBy`, `modifiedAt`, and `modifiedBy`.  Otherwise, these attributes are automatically set by the token.
 */
export const updateNoteById = <ThrowOnError extends boolean = true>(
    options: Options<UpdateNoteByIdData, ThrowOnError>
) => {
    return options.client.put<UpdateNoteByIdResponse, unknown, ThrowOnError>({
        url: '/notes/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Create tracking event
 * Creates a new tracking event.
 *
 * The following role is required for this endpoint: org.tracking
 */
export const createTrackingEvent = <ThrowOnError extends boolean = true>(
    options: Options<CreateTrackingEventData, ThrowOnError>
) => {
    return options.client.post<unknown, unknown, ThrowOnError>({
        url: '/tracking/event',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Create tracking identity
 * Identifies a user.
 *
 * The following role is required for this endpoint: org.tracking
 */
export const createTrackingIdentity = <ThrowOnError extends boolean = true>(
    options: Options<CreateTrackingIdentityData, ThrowOnError>
) => {
    return options.client.post<
        CreateTrackingIdentityResponse,
        unknown,
        ThrowOnError
    >({
        url: '/tracking/identity',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Create tracking identity and track event
 * Identifies a user and tracks an event with a single API call.
 *
 * The following role is required for this endpoint: org.tracking
 */
export const createTrackingIdentityEvent = <
    ThrowOnError extends boolean = true
>(
    options: Options<CreateTrackingIdentityEventData, ThrowOnError>
) => {
    return options.client.post<
        CreateTrackingIdentityEventResponse,
        unknown,
        ThrowOnError
    >({
        url: '/tracking/identityEvent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Create customer search
 * Searches across customer data with criteria based on standard Object data and any custom attribute data for standard Objects, including Message, Conversation, and Company objects.
 * Standard object data, custom object data, and conversation time data is limited to objects that have an updatedAt more recent than in the past 2 years. To query for older, archived data for standard and custom objects, see the [Archive Search API](https://developer.kustomer.com/kustomer-api-docs/reference/customerarchivesearch).
 * Older conversation time data is not available via search.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.search.read|org.permission.search.create|
 * |org.admin.search.read|org.permission.search.update|
 * ||org.permission.search_global.create|
 * ||org.permission.search_preview.create|
 *
 * ## Filter on dates
 * You can filter by dates in either a local date `YYYY-MM-DD` format or a UTC date format. If you include a timezone in the query, a local date will be adjusted to account for the included timezone. UTC dates will not be timezone adjusted.
 * <br>
 * ### Example of search criteria with local date
 * ```json
 * {
 * "and": [
 * {
 * "conversation_created_at": {
 * "lte": "2020-11-19"
 * }
 * }
 * ],
 * "queryContext": "conversation",
 * "timeZone": "America/New_York"
 * }
 * ```
 * #### Note
 * > The default `GMT` timezone is applied when you exclude a timezone.
 *
 * ### Example of search criteria with UTC date
 * ```json
 * {
 * "and": [
 * {
 * "conversation_created_at": {
 * "lte": "2020-11-20T16:34:00.000Z"
 * }
 * }
 * ],
 * "queryContext": "conversation"
 * }
 * ```
 *
 * ## Filter on standard attributes
 * For a list of available standard attributes, see [Standard attributes JSON schema](https://developer.kustomer.com/kustomer-api-docs/reference/search#standard-attributes-json-schema).
 *
 * ### Example of search criteria with standard attributes
 * ```json
 * [
 * {"customer_updated_at": {"gte": "2016-06-24" }},
 * {"conversation_status": {"equals": "done" }}
 * ]
 * ```
 *
 * ## Filter on custom attributes for standard Objects
 * You can query custom attibutes on on standard Objects with the following syntax:
 * `<<standard_object_name>>_custom_<<custom_field_name>>`.
 *
 * ### Example of search criteria with custom attributes
 *
 * ```json
 * { "customer_custom_myCustomStr": { "equals": "some value" }}
 * { "message_custom_myCustomNum": { "gte": 5 }}
 * ```
 *
 * ## Filter on custom attributes for custom Objects
 * You can query custom attributes for custom Object with the following syntax: `kobject_custom_<<klass_name>>_<<custom_field_name>>`.
 *
 * ### Examples
 * ```json
 * { "kobject_custom_myKlass_myCustomNum": { "gte": 5 }}
 * ```
 *
 * ## Sort on customer attributes
 * You can sort based on the following customer attributes:
 *
 * ```
 * customer_name
 * customer_gender
 * customer_created_at
 * customer_updated_at
 * customer_modified_at
 * customer_externalId
 * customer_activity_at
 * customer_last_seen_at
 * customer_signed_up_at
 * customer_lastmessage_preview
 * customer_progressive_status
 * customer_done
 * customer_open
 * customer_snoozed
 * customer_last_message_sent_at
 * customer_last_message_out_sent_at
 * customer_last_message_unresponded_to_sent_at
 * customer_last_message_at
 * ```
 *
 * ### Example of sort with customer attributes
 * ```
 * {"sort": [{"customer_updated_at": "asc"}]}
 * {"sort": [{"customer_gender": "asc"}, {"customer_created_at": "asc"}]}
 * ```
 *
 * #### Note
 * > Sorting based on other standard Object attributes is unavailable.
 *
 *
 * ## Pagination
 * There is a hard limit of **100** for the maximum number of pages.
 *
 * There may be cases where you want to page through more records. For example, let's say you'd like to get an initial snapshot of data and then update the data.
 *
 * To work around the pagination limit, you can write a query based on the `updated_at` attribute for a standard Object. You can then use the returned information in following API requests based on the last `updated_at` value from the response.
 *
 *
 * ## Standard attributes JSON Schema
 *
 * ```json
 * {
 * "type": "object",
 * "properties": {
 * "customer_any_text": {
 * "type": "string",
 * "operator": "any"
 * },
 * "customer_name": {
 * "type": "string",
 * "operator": "string"
 * },
 * "customer_gender": {
 * "type": "string",
 * "enum": ["m", "f"],
 * "operator": "list"
 * },
 * "customer_presence": {
 * "type": "string",
 * "enum": ["online", "offline", "idle"],
 * "operator": "list"
 * },
 * "customer_email": {
 * "type": "string",
 * "format": "email",
 * "operator": "string"
 * },
 * "customer_shared_email": {
 * "type": "string",
 * "format": "email",
 * "operator": "string"
 * },
 * "customer_phone": {
 * "type": "string",
 * "pattern": "^\\+?[1-9]\\d{1,14}$",
 * "operator": "string"
 * },
 * "customer_shared_phone": {
 * "type": "string",
 * "pattern": "^\\+?[1-9]\\d{1,14}$",
 * "operator": "string"
 * },
 * "customer_urls": {
 * "type": "string",
 * "operator": "string"
 * },
 * "customer_address": {
 * "type": "string",
 * "operator": "string"
 * },
 * "customer_locale": {
 * "type": "string",
 * "operator": "string"
 * },
 * "customer_activity_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "customer_last_seen_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "customer_signed_up_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "customer_last_message_sent_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "customer_last_message_out_sent_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "customer_last_message_unresponded_to_sent_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "customer_last_message_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "customer_externalId": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "customer_shared_externalId": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "customer_created_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "customer_updated_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "customer_modified_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "customer_created_by": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "customer_modified_by": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "customer_satisfaction_avg_score": {
 * "type": "number",
 * "operator": "number"
 * },
 * "customer_satisfaction_avg_rating": {
 * "type": "number",
 * "operator": "number"
 * },
 * "customer_conversations_count": {
 * "type": "number",
 * "operator": "number"
 * },
 * "customer_status": {
 * "type": "string",
 * "enum": ["snoozed", "open", "done"],
 * "operator": "list"
 * },
 * "customer_progressive_status": {
 * "type": "string",
 * "enum": ["snoozed", "open", "done"],
 * "operator": "list"
 * },
 * "customer_active_users": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "customer_watchers": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "customer_tags": {
 * "type": "string",
 * "operator": "list"
 * },
 * "customer_sentiment": {
 * "type": "string",
 * "enum": ["happy", "unhappy", "indifferent"],
 * "operator": "list"
 * },
 * "customer_social_type": {
 * "type": "string",
 * "enum": ["facebook", "instagram", "whatsapp", "linkedin", "pinterest", "twitter"],
 * "operator": "list"
 * },
 * "customer_social_userid": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "customer_social_username": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "customer_shared_social_type": {
 * "type": "string",
 * "enum": ["facebook", "instagram", "whatsapp", "linkedin", "pinterest", "twitter"],
 * "operator": "list"
 * },
 * "customer_shared_social_userid": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "customer_shared_social_username": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "customer_default_lang": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "customer_imported_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "customer_imported": {
 * "type": "boolean",
 * "operator": "boolean"
 * },
 * "company_any_text": {
 * "type": "string",
 * "operator": "any"
 * },
 * "company_name": {
 * "type": "string",
 * "operator": "string"
 * },
 * "company_tags": {
 * "type": "string",
 * "operator": "list"
 * },
 * "company_default_lang": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "company_imported_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "company_imported": {
 * "type": "boolean",
 * "operator": "boolean"
 * },
 * "message_any_text": {
 * "type": "string",
 * "operator": "any"
 * },
 * "message_body": {
 * "type": "string",
 * "operator": "text"
 * },
 * "message_channel": {
 * "type": "string",
 * "enum": ["sms", "chat", "email", "facebook", "voice", "twitter-dm", "twitter-tweet", "instagram", "whatsapp"],
 * "operator": "list"
 * },
 * "message_size": {
 * "type": "number",
 * "operator": "number"
 * },
 * "message_direction": {
 * "type": "string",
 * "enum": ["in", "out"],
 * "operator": "boolean"
 * },
 * "message_sent_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "message_created_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "message_updated_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "message_created_by": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "message_modified_by": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "message_sentiment": {
 * "type": "string",
 * "enum": ["happy", "unhappy", "indifferent"],
 * "operator": "list"
 * },
 * "message_customer_id": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "message_status": {
 * "type": "string",
 * "enum": ["sent", "received", "error"],
 * "operator": "list"
 * },
 * "message_error_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "message_error_title": {
 * "type": "string",
 * "operator": "string"
 * },
 * "message_external_id": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "message_direction_type": {
 * "type": "string",
 * "enum": ["initial-in", "initial-out", "response-in", "response-out", "followup-in", "followup-out"],
 * "operator": "list"
 * },
 * "message_created_by_teams": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "message_redacted": {
 * "type": "string",
 * "operator": "boolean"
 * },
 * "message_redacted_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "message_imported_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "message_imported": {
 * "type": "boolean",
 * "operator": "boolean"
 * },
 * "message_recipients": {
 * "type": "string",
 * "operator": "string"
 * },
 * "message_sender": {
 * "type": "string",
 * "operator": "string"
 * },
 * "message_shortcuts": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "message_subject": {
 * "type": "string",
 * "operator": "text"
 * },
 * "message_source": {
 * "type": "string",
 * "enum": ["bulk"],
 * "operator": "list"
 * },
 * "message_attachment_count": {
 * "type": "number",
 * "operator": "number"
 * },
 * "message_auto": {
 * "type": "string",
 * "operator": "boolean"
 * },
 * "message_lang": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "note_any_text": {
 * "type": "string",
 * "operator": "any"
 * },
 * "note_body": {
 * "type": "string",
 * "operator": "text"
 * },
 * "note_created_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "note_modified_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "note_updated_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "note_created_by": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "note_modified_by": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "note_deleted": {
 * "$ref": "#/definitions/user",
 * "operator": "boolean"
 * },
 * "note_user_mentions": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "note_team_mentions": {
 * "type": "string",
 * "pattern": "^(?=[A-Fa-f\\d]{24}$)(\\d+[A-Fa-f]|[A-Fa-f]+\\d)",
 * "collection": "teams",
 * "operator": "list"
 * },
 * "note_attachment_count": {
 * "$ref": "#/definitions/user",
 * "operator": "number"
 * },
 * "note_external_id": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "note_customer_id": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "note_conversation_id": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "note_lang": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "note_imported_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "note_imported": {
 * "type": "boolean",
 * "operator": "boolean"
 * },
 * "conversation_any_text": {
 * "type": "string",
 * "operator": "any"
 * },
 * "conversation_name": {
 * "type": "string",
 * "operator": "string"
 * },
 * "conversation_sentiment": {
 * "type": "string",
 * "enum": ["happy", "unhappy", "indifferent"],
 * "operator": "list"
 * },
 * "conversation_status": {
 * "type": "string",
 * "enum": ["snoozed", "open", "done"],
 * "operator": "list"
 * },
 * "conversation_sub_status": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "conversation_created_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_updated_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_modified_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_modified_by": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "conversation_message_count": {
 * "type": "number",
 * "operator": "number"
 * },
 * "conversation_note_count": {
 * "type": "number",
 * "operator": "number"
 * },
 * "conversation_satisfaction_survey_id": {
 * "type": "string",
 * "operator": "list"
 * },
 * "conversation_satisfaction_sent_by": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "conversation_satisfaction_sent_by_teams": {
 * "type": "string",
 * "pattern": "^(?=[A-Fa-f\\d]{24}$)(\\d+[A-Fa-f]|[A-Fa-f]+\\d)",
 * "collection": "teams",
 * "operator": "list"
 * },
 * "conversation_satisfaction_created_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_satisfaction_score": {
 * "type": "number",
 * "operator": "number"
 * },
 * "conversation_satisfaction_rating": {
 * "type": "number",
 * "operator": "number"
 * },
 * "conversation_satisfaction_status": {
 * "type": "string",
 * "enum": [
 * "canceled",
 * "scheduled",
 * "offered",
 * "unresponded",
 * "rated",
 * "commented"
 * ],
 * "operator": "list"
 * },
 * "conversation_channels": {
 * "type": "string",
 * "enum": ["sms", "chat", "email", "facebook", "voice", "twitter-dm", "twitter-tweet", "instagram", "whatsapp"],
 * "operator": "list"
 * },
 * "conversation_satisfaction": {
 * "type": "string",
 * "operator": "string"
 * },
 * "conversation_priority": {
 * "type": "integer",
 * "operator": "number",
 * "minimum": 1,
 * "maximum": 5
 * },
 * "conversation_tags": {
 * "type": "string",
 * "operator": "list"
 * },
 * "conversation_assigned_users": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "conversation_assigned_teams": {
 * "type": "string",
 * "pattern": "^(?=[A-Fa-f\\d]{24}$)(\\d+[A-Fa-f]|[A-Fa-f]+\\d)",
 * "collection": "teams",
 * "operator": "list"
 * },
 * "conversation_last_message_sent_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_last_message_out_sent_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_last_message_unresponded_to_sent_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_last_message_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_first_response_sent_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_first_response_time": {
 * "type": "number",
 * "operator": "number"
 * },
 * "conversation_first_response_created_by": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "conversation_last_response_created_by": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "conversation_last_message_direction": {
 * "type": "string",
 * "enum": ["in", "out"],
 * "operator": "list"
 * },
 * "conversation_direction": {
 * "type": "string",
 * "enum": ["in", "out"],
 * "operator": "list"
 * },
 * "conversation_outbound_message_count": {
 * "type": "number",
 * "operator": "number"
 * },
 * "conversation_customer_id": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "conversation_campaign_id": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "conversation_first_message_in_sent_at": {
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_first_message_in_direction_type": {
 * "type": "string",
 * "enum": ["initial-in", "initial-out", "response-in", "response-out", "followup-in", "followup-out"],
 * "operator": "list"
 * },
 * "conversation_first_message_in_channel": {
 * "type": "string",
 * "enum": ["sms", "chat", "email", "facebook", "voice", "twitter-dm", "twitter-tweet", "instagram", "whatsapp"],
 * "operator": "list"
 * },
 * "conversation_first_message_out_sent_at": {
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_first_message_out_direction_type": {
 * "type": "string",
 * "enum": ["initial-in", "initial-out", "response-in", "response-out", "followup-in", "followup-out"],
 * "operator": "list"
 * },
 * "conversation_first_message_out_channel": {
 * "type": "string",
 * "enum": ["sms", "chat", "email", "facebook", "voice", "twitter-dm", "twitter-tweet", "instagram", "whatsapp"],
 * "operator": "list"
 * },
 * "conversation_time_created_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_time_conversation_id": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "conversation_time_created_by_teams": {
 * "type": "string",
 * "pattern": "^(?=[A-Fa-f\\d]{24}$)(\\d+[A-Fa-f]|[A-Fa-f]+\\d)",
 * "collection": "teams",
 * "operator": "list"
 * },
 * "conversation_time_assigned_users": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "conversation_time_assigned_teams": {
 * "type": "string",
 * "pattern": "^(?=[A-Fa-f\\d]{24}$)(\\d+[A-Fa-f]|[A-Fa-f]+\\d)",
 * "collection": "teams",
 * "operator": "list"
 * },
 * "conversation_time_touched": {
 * "type": "string",
 * "operator": "boolean"
 * },
 * "conversation_time_reopened": {
 * "type": "string",
 * "operator": "boolean"
 * },
 * "conversation_time_snoozed": {
 * "type": "string",
 * "operator": "boolean"
 * },
 * "conversation_time_resolved": {
 * "type": "string",
 * "operator": "boolean"
 * },
 * "conversation_time_message_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_time_message_time": {
 * "type": "number",
 * "operator": "number"
 * },
 * "conversation_time_messages_sent": {
 * "type": "number",
 * "operator": "number"
 * },
 * "conversation_time_note_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_time_note_time": {
 * "type": "number",
 * "operator": "number"
 * },
 * "conversation_time_notes_sent": {
 * "type": "number",
 * "operator": "number"
 * },
 * "conversation_time_handle_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_time_handle_time": {
 * "type": "number",
 * "operator": "number"
 * },
 * "conversation_time_channels": {
 * "type": "string",
 * "enum": ["sms", "chat", "email", "facebook", "voice", "twitter-dm", "twitter-tweet", "instagram", "whatsapp"],
 * "operator": "list"
 * },
 * "conversation_default_lang": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "any_text": {
 * "type": "string",
 * "operator": "any"
 * },
 * "tracking_events": {
 * "type": "string",
 * "operator": "number"
 * },
 * "conversation_sla_status": {
 * "type": "string",
 * "enum": ["done", "pending", "paused"],
 * "operator": "list"
 * },
 * "conversation_sla_version_id": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "conversation_sla_id": {
 * "type": "string",
 * "operator": "list"
 * },
 * "conversation_sla_breached": {
 * "type": "boolean",
 * "operator": "boolean"
 * },
 * "conversation_sla_breach_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_sla_satisfied_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_sla_breach_metric": {
 * "type": "string",
 * "enum": [
 * "firstResponse",
 * "totalCustomerWaitTime",
 * "longestUnrespondedMessage",
 * "totalConversationOpenTime"
 * ],
 * "operator": "list"
 * },
 * "conversation_first_done_created_by": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "conversation_last_done_created_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_last_done_created_by": {
 * "$ref": "#/definitions/user",
 * "operator": "list"
 * },
 * "conversation_last_done_created_by_teams": {
 * "type": "string",
 * "pattern": "^(?=[A-Fa-f\\d]{24}$)(\\d+[A-Fa-f]|[A-Fa-f]+\\d)",
 * "collection": "teams",
 * "operator": "list"
 * },
 * "conversation_reply_channel": {
 * "type": "string",
 * "enum": ["sms", "chat", "email", "facebook", "voice", "twitter-dm", "twitter-tweet", "instagram", "whatsapp"],
 * "operator": "list"
 * },
 * "conversation_queue": {
 * "type": "string",
 * "pattern": "^(?=[A-Fa-f\\d]{24}$)(\\d+[A-Fa-f]|[A-Fa-f]+\\d)",
 * "collection": "queues",
 * "operator": "list"
 * },
 * "conversation_external_queue": {
 * "type": "string",
 * "enum": ["amazon-connect"],
 * "operator": "list"
 * },
 * "conversation_ended": {
 * "type": "boolean",
 * "operator": "boolean"
 * },
 * "conversation_ended_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_ended_reason": {
 * "type": "string",
 * "operator": "string"
 * },
 * "conversation_imported_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_imported": {
 * "type": "boolean",
 * "operator": "boolean"
 * },
 * "kobject_any_text": {
 * "type": "string",
 * "operator": "any"
 * },
 * "kobject_created_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "kobject_updated_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "kobject_imported_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "kobject_imported": {
 * "type": "boolean",
 * "operator": "boolean"
 * }
 * },
 * "definitions": {
 * "user": {
 * "type": "string",
 * "pattern": "^(?=[A-Fa-f\\d]{24}$)(\\d+[A-Fa-f]|[A-Fa-f]+\\d)",
 * "collection": "users"
 * }
 * },
 * "additionalProperties": false
 * }
 *
 * ```
 *
 */
export const customerSearch = <ThrowOnError extends boolean = true>(
    options: Options<CustomerSearchData, ThrowOnError>
) => {
    return options.client.post<CustomerSearchResponse, unknown, ThrowOnError>({
        url: '/customers/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Create customer archive search
 * Searches across all customer data with criteria based on a limited number of attributes on standard objects, including Message, Conversation, and Company objects, and on custom objects. Returns standard objects and custom objects older than 2 years ago that are unavailable in standard searches.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.search.read|org.permission.search.create|
 * |org.admin.search.read|org.permission.search.update|
 * ||org.permission.search_global.create|
 * ||org.permission.search_preview.create|
 *
 * ## Filter on dates
 * You can filter by dates in either a local date `YYYY-MM-DD` format or a UTC date format. If you include a timezone in the query, a local date will be adjusted to account for the included timezone. UTC dates will not be timezone adjusted.
 * <br>
 * ### Example of search criteria with local date
 * ```json
 * {
 * "and": [
 * {
 * "conversation_created_at": {
 * "lte": "2020-11-19"
 * }
 * }
 * ],
 * "queryContext": "conversation",
 * "timeZone": "America/New_York"
 * }
 * ```
 * #### Note
 * > The default `GMT` timezone is applied when you exclude a timezone.
 *
 * ### Example of search criteria with UTC date
 * ```json
 * {
 * "and": [
 * {
 * "conversation_created_at": {
 * "lte": "2020-11-20T16:34:00.000Z"
 * }
 * }
 * ],
 * "queryContext": "conversation"
 * }
 * ```
 *
 * ## Filtering
 * For a list of available standard attributes, see [Standard attributes JSON schema](https://developer.kustomer.com/kustomer-api-docs/reference/search#standard-attributes-json-schema).
 *
 * ### Example of search criteria with standard attributes
 * ```json
 * [
 * {"conversation_updated_at": {"gte": "2016-06-24" }},
 * {"conversation_customer_id": {"equals": "65f49506237963001f01a391" }}
 * ]
 * ```
 * ## Sort on attributes
 * You can sort based on the following attributes:
 *
 * ```
 * conversation_created_at
 * conversation_updated_at
 * conversation_customer_id
 * conversation_deleted
 * customer_companyId
 * customer_created_at
 * customer_updated_at
 * customer_deleted
 * message_id
 * message_created_at
 * message_updated_at
 * kobject_created_at
 * kobject_updated_at
 * ^kobject.*_created_at$
 * ^kobject.*_updated_at$
 * company_created_at
 * company_updated_at
 * ```
 *
 * ### Example of sort with attributes
 * ```
 * {"sort": [{"conversation_created_at": "asc"}]}
 * {"sort": [{"message_id": "asc"}, {"message_created_at": "asc"}]}
 * ```
 *
 * #### Note
 * > Sorting based on other standard Object attributes is unavailable.
 *
 * ## Pagination
 * There is a hard limit of **100** for the maximum number of pages.
 *
 * There may be cases where you want to page through more records. For example, let's say you'd like to get an initial snapshot of data and then update the data.
 *
 * To work around the pagination limit, you can write a query based on the `updated_at` attribute for a standard Object. You can then use the returned information in following API requests based on the last `updated_at` value from the response.
 *
 * ## Filterable attributes JSON Schema
 *
 * ```json
 * {
 * "type": "object",
 * "properties": {
 * "customer_any_text_new": {
 * "type": "string",
 * "operator": "any"
 * },
 * "customer_id": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "customer_created_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "customer_updated_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "customer_companyId": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "company_created_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "company_updated_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "message_any_text": {
 * "type": "string",
 * "operator": "any"
 * },
 * "message_created_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "message_updated_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "message_conversation_id": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "conversation_any_text": {
 * "type": "string",
 * "operator": "any"
 * },
 * "conversation_created_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_updated_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "conversation_customer_id": {
 * "type": "string",
 * "operator": "string_notanalyzed"
 * },
 * "kobject_any_text": {
 * "type": "string",
 * "operator": "any"
 * },
 * "kobject_created_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * "kobject_updated_at": {
 * "type": "string",
 * "format": "date-time",
 * "operator": "datetime"
 * },
 * },
 * "additionalProperties": false
 * }
 *
 * ```
 *
 */
export const customerArchiveSearch = <ThrowOnError extends boolean = true>(
    options: Options<CustomerArchiveSearchData, ThrowOnError>
) => {
    return options.client.post<
        CustomerArchiveSearchResponse,
        unknown,
        ThrowOnError
    >({
        url: '/customers/archive/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get Satisfactions
 * Retrieves a paginated list of satisfaction forms for the organization.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.satisfaction.read|org.permission.satisfaction.read|
 */
export const getSatisfaction = <ThrowOnError extends boolean = true>(
    options: Options<GetSatisfactionData, ThrowOnError>
) => {
    return options.client.get<GetSatisfactionResponse, unknown, ThrowOnError>({
        url: '/satisfaction',
        ...options,
    })
}

/**
 * Get SLA by ID
 * Retrieves an [SLA](https://help.kustomer.com/service-level-agreements-SyZ4xWcgf) based on the unique SLA ID.
 *
 * Use the optional `versions` query param to retrieve information about SLA versions.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.user.sla.read|org.permission.sla.read|
 */
export const getSlaById = <ThrowOnError extends boolean = true>(
    options: Options<GetSlaByIdData, ThrowOnError>
) => {
    return options.client.get<GetSlaByIdResponse, unknown, ThrowOnError>({
        url: '/slas/{id}',
        ...options,
    })
}

/**
 * Get spam senders
 * Retrieves a paginated list of senders.
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.spam.read|org.permission.spam.read|
 */
export const getSpamSenders = <ThrowOnError extends boolean = true>(
    options: Options<GetSpamSendersData, ThrowOnError>
) => {
    return options.client.get<GetSpamSendersResponse, unknown, ThrowOnError>({
        url: '/spam/senders',
        ...options,
    })
}

/**
 * Upsert spam sender
 * Assigns a spam list status for a new sender, or updates the spam list status for an existing sender.
 *
 * You can assign senders to a `list` status: `whitelist` (never considered spam) or `blacklist` (always considered spam).
 *
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.spam.write|org.permission.spam.update|
 */
export const upsertSpamSender = <ThrowOnError extends boolean = true>(
    options: Options<UpsertSpamSenderData, ThrowOnError>
) => {
    return options.client.put<UpsertSpamSenderResponse, unknown, ThrowOnError>({
        url: '/spam/senders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Delete a spam sender
 * Deletes a spam sender based on the unique sender ID.
 * Any one of the following roles is required for this endpoint:
 *
 * |Legacy Role|Equivalent Permission Set Role|
 * |-----|--------|
 * |org.admin.spam.write|org.permission.spam.delete|
 */
export const deleteSpamSender = <ThrowOnError extends boolean = true>(
    options: Options<DeleteSpamSenderData, ThrowOnError>
) => {
    return options.client.delete<unknown, unknown, ThrowOnError>({
        url: '/spam/senders/{id}',
        ...options,
    })
}

/**
 * Get KObject by external ID
 * Retrieve KObject by name and unique external ID.
 */
export const getKlassesByNameAndExternalId = <
    ThrowOnError extends boolean = true
>(
    options: Options<GetKlassesByNameAndExternalIdData, ThrowOnError>
) => {
    return options.client.get<
        GetKlassesByNameAndExternalIdResponse,
        unknown,
        ThrowOnError
    >({
        url: '/klasses/{name}/externalId={externalId}',
        ...options,
    })
}

/**
 * Get Auth Settings
 * Gets authentication settings for the organization
 *
 * #### NOTE
 * >Requires **org.admin.security** privileges
 */
export const getAuthSettings = <ThrowOnError extends boolean = true>(
    options: Options<GetAuthSettingsData, ThrowOnError>
) => {
    return options.client.get<GetAuthSettingsResponse, unknown, ThrowOnError>({
        url: '/auth/settings',
        ...options,
    })
}

/**
 * Update Auth Settings
 * Updates authentication settings for the organization
 *
 * #### NOTE
 * >Requires **org.admin.security** privileges
 */
export const updateAuthSettings = <ThrowOnError extends boolean = true>(
    options: Options<UpdateAuthSettingsData, ThrowOnError>
) => {
    return options.client.put<
        UpdateAuthSettingsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/auth/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get Auth Customer Settings
 * Gets customer authentication settings, including a generated secret token.
 *
 * #### NOTE
 * >Requires **org.admin** privileges
 */
export const getAuthCustomerSettings = <ThrowOnError extends boolean = true>(
    options: Options<GetAuthCustomerSettingsData, ThrowOnError>
) => {
    return options.client.get<
        GetAuthCustomerSettingsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/auth/customer/settings',
        ...options,
    })
}

/**
 * Get Public Auth Settings
 * Gets public authentication settings for the organization.
 */
export const getPublicAuthSettings = <ThrowOnError extends boolean = true>(
    options: Options<GetPublicAuthSettingsData, ThrowOnError>
) => {
    return options.client.get<
        GetPublicAuthSettingsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/p/auth/settings',
        ...options,
    })
}

/**
 * Get Auth Tokens
 * Returns a list of all auth tokens associated with the current authenticated user
 *
 * #### NOTE
 * > Requires **org.admin.security** privileges
 */
export const getAuthTokens = <ThrowOnError extends boolean = true>(
    options: Options<GetAuthTokensData, ThrowOnError>
) => {
    return options.client.get<GetAuthTokensResponse, unknown, ThrowOnError>({
        url: '/auth/tokens',
        ...options,
    })
}

/**
 * Create Token
 * Logs in to an organization with domain, email, and password.
 *
 * #### NOTE
 * > **Machine tokens** can be created within the settings section by an administrator for API, tracking, and hook access
 */
export const createToken = <ThrowOnError extends boolean = true>(
    options: Options<CreateTokenData, ThrowOnError>
) => {
    return options.client.post<CreateTokenResponse, unknown, ThrowOnError>({
        url: '/auth/tokens',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Delete Auth Token by ID
 * Deletes an authentication token for any user within the organization by id
 */
export const deleteAuthTokenById = <ThrowOnError extends boolean = true>(
    options: Options<DeleteAuthTokenByIdData, ThrowOnError>
) => {
    return options.client.delete<unknown, unknown, ThrowOnError>({
        url: '/auth/tokens/{id}',
        ...options,
    })
}

/**
 * Get Auth Token by ID
 * Gets an authentication token for any user within the organization by id
 *
 * #### NOTE
 * > Requires **org.admin** privileges
 */
export const getAuthTokenById = <ThrowOnError extends boolean = true>(
    options: Options<GetAuthTokenByIdData, ThrowOnError>
) => {
    return options.client.get<GetAuthTokenByIdResponse, unknown, ThrowOnError>({
        url: '/auth/tokens/{id}',
        ...options,
    })
}

/**
 * Delete Current Auth Token
 * Deletes the current authentication token
 */
export const deleteCurrentAuthToken = <ThrowOnError extends boolean = true>(
    options: Options<DeleteCurrentAuthTokenData, ThrowOnError>
) => {
    return options.client.delete<unknown, unknown, ThrowOnError>({
        url: '/auth/tokens/current',
        ...options,
    })
}

/**
 * Get Current Auth Token
 * Gets the current authentication token data
 */
export const getCurrentAuthToken = <ThrowOnError extends boolean = true>(
    options: Options<GetCurrentAuthTokenData, ThrowOnError>
) => {
    return options.client.get<
        GetCurrentAuthTokenResponse,
        unknown,
        ThrowOnError
    >({
        url: '/auth/tokens/current',
        ...options,
    })
}

/**
 * Get Auth Roles
 * Gets available organization Roles
 */
export const getAuthRoles = <ThrowOnError extends boolean = true>(
    options: Options<GetAuthRolesData, ThrowOnError>
) => {
    return options.client.get<GetAuthRolesResponse, unknown, ThrowOnError>({
        url: '/auth/roles',
        ...options,
    })
}

/**
 * Get All Role Groups
 * Lists the organization's role groups.
 *
 * This will include both the system (uneditable) and custom role groups.
 */
export const getAllRoleGroups = <ThrowOnError extends boolean = true>(
    options: Options<GetAllRoleGroupsData, ThrowOnError>
) => {
    return options.client.get<GetAllRoleGroupsResponse, unknown, ThrowOnError>({
        url: '/role-groups',
        ...options,
    })
}

/**
 * Create a Role Group
 * Creates a custom role group for the organization.
 *
 * ### Auth Roles
 * For a list of latest available outh roles, checkout the response from the Get Auth Roles API endpoint.
 */
export const createRoleGroup = <ThrowOnError extends boolean = true>(
    options: Options<CreateRoleGroupData, ThrowOnError>
) => {
    return options.client.post<CreateRoleGroupResponse, unknown, ThrowOnError>({
        url: '/role-groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Delete a Role Group
 * Deletes a role group for the organiztion by ID
 */
export const deleteRoleGroup = <ThrowOnError extends boolean = true>(
    options: Options<DeleteRoleGroupData, ThrowOnError>
) => {
    return options.client.delete<unknown, unknown, ThrowOnError>({
        url: '/role-groups/{id}',
        ...options,
    })
}

/**
 * Get A Role Group By ID
 * Gets a single role group.
 */
export const getRoleGroupById = <ThrowOnError extends boolean = true>(
    options: Options<GetRoleGroupByIdData, ThrowOnError>
) => {
    return options.client.get<GetRoleGroupByIdResponse, unknown, ThrowOnError>({
        url: '/role-groups/{id}',
        ...options,
    })
}

/**
 * Update a Role Group
 * Updates a role group for the organiztion
 *
 * ### Auth Roles
 * For a list of latest available outh roles, checkout the response from the Get Auth Roles API endpoint.
 */
export const updateRoleGroup = <ThrowOnError extends boolean = true>(
    options: Options<UpdateRoleGroupData, ThrowOnError>
) => {
    return options.client.put<UpdateRoleGroupResponse, unknown, ThrowOnError>({
        url: '/role-groups/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get Teams
 * Gets Teams for the Organization
 */
export const getTeams = <ThrowOnError extends boolean = true>(
    options: Options<GetTeamsData, ThrowOnError>
) => {
    return options.client.get<GetTeamsResponse, unknown, ThrowOnError>({
        url: '/teams',
        ...options,
    })
}

/**
 * Create Team
 * Creates a Team.
 */
export const createTeam = <ThrowOnError extends boolean = true>(
    options: Options<CreateTeamData, ThrowOnError>
) => {
    return options.client.post<CreateTeamResponse, unknown, ThrowOnError>({
        url: '/teams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get a User's Teams
 * Gets list of all Teams for a specific user.
 */
export const getUsersTeams = <ThrowOnError extends boolean = true>(
    options: Options<GetUsersTeamsData, ThrowOnError>
) => {
    return options.client.get<GetUsersTeamsResponse, unknown, ThrowOnError>({
        url: '/users/{id}/teams',
        ...options,
    })
}

/**
 * Delete Team
 * Deletes a Team by ID.
 */
export const deleteTeam = <ThrowOnError extends boolean = true>(
    options: Options<DeleteTeamData, ThrowOnError>
) => {
    return options.client.delete<unknown, unknown, ThrowOnError>({
        url: '/teams/{id}',
        ...options,
    })
}

/**
 * Get Team by ID
 * Gets a Team by ID.
 *
 * > **Note** To retrieve user records of all members within a team, use the results from the members array and make a subsequent call to [Get User Multi](#endpoint:d4yQXqTBxzzhg96Gk)
 *
 */
export const getTeamById = <ThrowOnError extends boolean = true>(
    options: Options<GetTeamByIdData, ThrowOnError>
) => {
    return options.client.get<GetTeamByIdResponse, unknown, ThrowOnError>({
        url: '/teams/{id}',
        ...options,
    })
}

/**
 * Update Team Attributes
 * Updates one or more Team Attribute(s) by ID.
 */
export const updateTeamAttributes = <ThrowOnError extends boolean = true>(
    options: Options<UpdateTeamAttributesData, ThrowOnError>
) => {
    return options.client.patch<
        UpdateTeamAttributesResponse,
        unknown,
        ThrowOnError
    >({
        url: '/teams/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Update Team by ID
 * Updates a team document by ID.
 */
export const updateTeamById = <ThrowOnError extends boolean = true>(
    options: Options<UpdateTeamByIdData, ThrowOnError>
) => {
    return options.client.put<UpdateTeamByIdResponse, unknown, ThrowOnError>({
        url: '/teams/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Remove Team Member
 * Deletes a member of a Team.
 */
export const removeTeamMember = <ThrowOnError extends boolean = true>(
    options: Options<RemoveTeamMemberData, ThrowOnError>
) => {
    return options.client.delete<
        RemoveTeamMemberResponse,
        unknown,
        ThrowOnError
    >({
        url: '/teams/{id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Add Team Member
 * Adds a member to a Team.
 */
export const addTeamMember = <ThrowOnError extends boolean = true>(
    options: Options<AddTeamMemberData, ThrowOnError>
) => {
    return options.client.post<AddTeamMemberResponse, unknown, ThrowOnError>({
        url: '/teams/{id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get Users
 * Retrieves users within the organization.
 *
 * ## Filtering
 *
 * This endpoint supports optional filtering in one of the following ways:
 *
 * **Note: These filters cannot be combined.**
 *
 * ### Pending (invitation)
 * Add ```pending=(true|false)``` in the query parameters with one of the following options:
 *
 * - `true` - Return only disabled users
 * - `false` - Return only active users
 *
 * ### Deleted (deactivated)
 * Add ```deleted=(true|false)``` in the query parameters with one of the following options:
 *
 * - `true` - Return only deactivated users
 * - `false` - Return only active users
 *
 * ### User Type
 * Add ```userType=[userType]``` in the query parameters with one of the following options:
 *
 * - `user` - Full user
 * - `machine` - Machine user / API user
 * - `limited` - Collaborator user
 *
 * ### Email
 * Add ```email=[email]``` in the query parameter to filter for a specific user email address.
 */
export const getUsers = <ThrowOnError extends boolean = true>(
    options: Options<GetUsersData, ThrowOnError>
) => {
    return options.client.get<GetUsersResponse, unknown, ThrowOnError>({
        url: '/users',
        ...options,
    })
}

/**
 * Create / Invite New User
 * Creates an account for a new user and sends an email invitation to join the organization within Kustomer.
 *
 * ### Note
 * > Requires **org.admin.user** permissions.  The permissions for the new user cannot exceed those of the user making the request and will be filtered automatically. The default roles for new users are **org.admin** and **org.user**.
 */
export const createInviteNewUser = <ThrowOnError extends boolean = true>(
    options: Options<CreateInviteNewUserData, ThrowOnError>
) => {
    return options.client.post<
        CreateInviteNewUserResponse,
        unknown,
        ThrowOnError
    >({
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get Current User
 * Retrieves the current user.
 */
export const getCurrentUser = <ThrowOnError extends boolean = true>(
    options: Options<GetCurrentUserData, ThrowOnError>
) => {
    return options.client.get<GetCurrentUserResponse, unknown, ThrowOnError>({
        url: '/users/current',
        ...options,
    })
}

/**
 * Update Current User
 * Updates the current user.
 */
export const updateCurrentUser = <ThrowOnError extends boolean = true>(
    options: Options<UpdateCurrentUserData, ThrowOnError>
) => {
    return options.client.put<UpdateCurrentUserResponse, unknown, ThrowOnError>(
        {
            url: '/users/current',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers,
            },
        }
    )
}

/**
 * Get User by ID
 * Retrieves a user using their unique ID.
 */
export const getUserById = <ThrowOnError extends boolean = true>(
    options: Options<GetUserByIdData, ThrowOnError>
) => {
    return options.client.get<GetUserByIdResponse, unknown, ThrowOnError>({
        url: '/users/{id}',
        ...options,
    })
}

/**
 * Update User by ID
 * Updates a specific user by ID.
 *
 * #### <i class="fa fa-warning"></i> Note
 * *To delete a user, set deleted to true.  You can un-delete by setting the deleted to null*
 */
export const updateUserById = <ThrowOnError extends boolean = true>(
    options: Options<UpdateUserByIdData, ThrowOnError>
) => {
    return options.client.put<UpdateUserByIdResponse, unknown, ThrowOnError>({
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}

/**
 * Get Multiple Users by IDs
 * Retrieves multiple users in a single request using a list of unique user IDs separated by a comma.
 */
export const getMultipleUsersByIds = <ThrowOnError extends boolean = true>(
    options: Options<GetMultipleUsersByIdsData, ThrowOnError>
) => {
    return options.client.get<
        GetMultipleUsersByIdsResponse,
        unknown,
        ThrowOnError
    >({
        url: '/users/{ids}',
        ...options,
    })
}

/**
 * Reset User's Password
 * Requests a password reset.
 *
 * This will send an email to the email address specified with a token-based URL for authenticating and setting a new password.
 */
export const resetUsersPassword = <ThrowOnError extends boolean = true>(
    options: Options<ResetUsersPasswordData, ThrowOnError>
) => {
    return options.client.post<unknown, unknown, ThrowOnError>({
        url: '/users/passwordreset',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers,
        },
    })
}
